{"ast":null,"code":"import { mapState, mapGetters, mapActions } from 'vuex';\nexport default {\n  name: 'CourseDetail',\n  data() {\n    return {\n      courseId: null,\n      studentSearchQuery: '',\n      assessmentToDelete: null,\n      editFormData: {\n        code: '',\n        name: '',\n        semester: '',\n        credits: '',\n        description: ''\n      }\n    };\n  },\n  computed: {\n    ...mapState({\n      isLoading: state => state.loading,\n      course: state => state.courses.course\n    }),\n    ...mapGetters({\n      getCourseAssessments: 'assessments/getCourseAssessments'\n    }),\n    courseAssessments() {\n      return this.getCourseAssessments(this.courseId) || [];\n    },\n    enrolledStudents() {\n      // This would be populated from a store getter once implemented\n      return this.$store.state.users.courseStudents || [];\n    },\n    filteredStudents() {\n      if (!this.studentSearchQuery) {\n        return this.enrolledStudents;\n      }\n      const query = this.studentSearchQuery.toLowerCase();\n      return this.enrolledStudents.filter(student => student.name.toLowerCase().includes(query) || student.email.toLowerCase().includes(query) || student.student_id && student.student_id.toString().includes(query));\n    }\n  },\n  async created() {\n    this.courseId = this.$route.params.id;\n    try {\n      // Fetch course details\n      await this.fetchCourse(this.courseId);\n\n      // Fetch course assessments\n      await this.fetchAssessments({\n        courseId: this.courseId\n      });\n\n      // Fetch enrolled students\n      await this.fetchCourseStudents(this.courseId);\n\n      // Fetch marks for this course\n      await this.fetchMarks({\n        courseId: this.courseId\n      });\n\n      // Initialize edit form data\n      this.initializeEditForm();\n    } catch (error) {\n      console.error('Error loading course details:', error);\n    }\n  },\n  methods: {\n    ...mapActions({\n      fetchCourse: 'courses/fetchCourse',\n      fetchAssessments: 'assessments/fetchAssessments',\n      fetchMarks: 'marks/fetchMarks',\n      updateCourse: 'courses/updateCourse',\n      deleteAssessmentAction: 'assessments/deleteAssessment'\n    }),\n    async fetchCourseStudents(courseId) {\n      try {\n        // This action would need to be implemented in the users store module\n        await this.$store.dispatch('users/fetchCourseStudents', courseId);\n      } catch (error) {\n        console.error('Error fetching course students:', error);\n      }\n    },\n    formatDate(dateString) {\n      if (!dateString) return 'Not set';\n      return new Date(dateString).toLocaleDateString();\n    },\n    getAssessmentTypeClass(type) {\n      const types = {\n        'exam': 'bg-danger',\n        'midterm': 'bg-warning',\n        'quiz': 'bg-info',\n        'assignment': 'bg-success',\n        'project': 'bg-primary',\n        'lab': 'bg-secondary'\n      };\n      return types[type.toLowerCase()] || 'bg-secondary';\n    },\n    getAssessmentTypeBadgeClass(type) {\n      const types = {\n        'exam': 'bg-danger',\n        'midterm': 'bg-warning',\n        'quiz': 'bg-info',\n        'assignment': 'bg-success',\n        'project': 'bg-primary',\n        'lab': 'bg-secondary'\n      };\n      return types[type.toLowerCase()] || 'bg-secondary';\n    },\n    getAssessmentStatus(assessment) {\n      const today = new Date();\n      const dueDate = new Date(assessment.due_date);\n      if (assessment.marks_entered) {\n        return 'Marked';\n      } else if (dueDate < today) {\n        return 'Overdue';\n      } else if (dueDate.getTime() - today.getTime() < 7 * 24 * 60 * 60 * 1000) {\n        return 'Upcoming';\n      } else {\n        return 'Scheduled';\n      }\n    },\n    getAssessmentStatusBadgeClass(assessment) {\n      const status = this.getAssessmentStatus(assessment);\n      const classes = {\n        'Marked': 'bg-success',\n        'Overdue': 'bg-danger',\n        'Upcoming': 'bg-warning',\n        'Scheduled': 'bg-info'\n      };\n      return classes[status] || 'bg-secondary';\n    },\n    getStudentProgress(studentId) {\n      // Calculate what percentage of assessments the student has completed\n      const studentMarks = this.$store.state.marks.marks.filter(mark => mark.student_id === studentId && mark.course_id === parseInt(this.courseId));\n      if (this.courseAssessments.length === 0) return 0;\n      return Math.round(studentMarks.length / this.courseAssessments.length * 100);\n    },\n    getStudentCurrentMark(studentId) {\n      // Calculate the current weighted average for this student\n      const studentMarks = this.$store.state.marks.marks.filter(mark => mark.student_id === studentId && mark.course_id === parseInt(this.courseId));\n      if (studentMarks.length === 0) return 'N/A';\n      let weightedSum = 0;\n      let totalWeight = 0;\n      studentMarks.forEach(mark => {\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\n        if (assessment) {\n          weightedSum += mark.mark / assessment.max_mark * assessment.weightage;\n          totalWeight += assessment.weightage;\n        }\n      });\n      if (totalWeight === 0) return 'N/A';\n      const averageMark = Math.round(weightedSum / totalWeight * 100);\n      return `${averageMark}%`;\n    },\n    getMarkClass(markString) {\n      if (markString === 'N/A') return 'text-muted';\n      const mark = parseInt(markString);\n      if (isNaN(mark)) return 'text-muted';\n      if (mark >= 70) return 'text-success fw-bold';\n      if (mark >= 50) return 'text-warning';\n      return 'text-danger';\n    },\n    navigateToCreateAssessment() {\n      this.$router.push({\n        name: 'CreateAssessment',\n        query: {\n          courseId: this.courseId\n        }\n      });\n    },\n    navigateToEditAssessment(assessment) {\n      this.$router.push({\n        name: 'EditAssessment',\n        params: {\n          id: assessment.id\n        }\n      });\n    },\n    navigateToEnterMarks(assessment) {\n      // This route would need to be added to the router\n      this.$router.push({\n        name: 'EnterMarks',\n        params: {\n          id: assessment.id\n        }\n      });\n    },\n    navigateToStudentDetail(student) {\n      this.$router.push({\n        name: 'StudentDetail',\n        params: {\n          id: student.id\n        },\n        query: {\n          courseId: this.courseId\n        }\n      });\n    },\n    navigateToStudentMarks(student) {\n      // This route would need to be added to the router\n      this.$router.push({\n        name: 'StudentMarks',\n        params: {\n          studentId: student.id,\n          courseId: this.courseId\n        }\n      });\n    },\n    openEditCourseModal() {\n      this.initializeEditForm();\n      // In a real implementation, we would use Bootstrap's modal methods\n      // $('#editCourseModal').modal('show');\n    },\n    initializeEditForm() {\n      if (this.course) {\n        this.editFormData = {\n          code: this.course.code || '',\n          name: this.course.name || '',\n          semester: this.course.semester || '',\n          credits: this.course.credits || '',\n          description: this.course.description || ''\n        };\n      }\n    },\n    async saveCourseChanges() {\n      try {\n        await this.updateCourse({\n          id: this.courseId,\n          ...this.editFormData\n        });\n        // Close modal\n        // $('#editCourseModal').modal('hide');\n        this.$store.dispatch('showToast', {\n          message: 'Course updated successfully',\n          type: 'success'\n        });\n      } catch (error) {\n        console.error('Error updating course:', error);\n      }\n    },\n    confirmDeleteAssessment(assessment) {\n      this.assessmentToDelete = assessment;\n      // In a real implementation, we would use Bootstrap's modal methods\n      // $('#deleteAssessmentModal').modal('show');\n    },\n    async deleteAssessment() {\n      if (!this.assessmentToDelete) return;\n      try {\n        await this.deleteAssessmentAction(this.assessmentToDelete.id);\n        // Close modal\n        // $('#deleteAssessmentModal').modal('hide');\n        this.$store.dispatch('showToast', {\n          message: 'Assessment deleted successfully',\n          type: 'success'\n        });\n        this.assessmentToDelete = null;\n      } catch (error) {\n        console.error('Error deleting assessment:', error);\n      }\n    },\n    exportCourseData() {\n      // This would initiate a download of course data in CSV format\n      // Implementation would need to call an API endpoint\n      this.$store.dispatch('showToast', {\n        message: 'Exporting course data...',\n        type: 'info'\n      });\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapGetters","mapActions","name","data","courseId","studentSearchQuery","assessmentToDelete","editFormData","code","semester","credits","description","computed","isLoading","state","loading","course","courses","getCourseAssessments","courseAssessments","enrolledStudents","$store","users","courseStudents","filteredStudents","query","toLowerCase","filter","student","includes","email","student_id","toString","created","$route","params","id","fetchCourse","fetchAssessments","fetchCourseStudents","fetchMarks","initializeEditForm","error","console","methods","updateCourse","deleteAssessmentAction","dispatch","formatDate","dateString","Date","toLocaleDateString","getAssessmentTypeClass","type","types","getAssessmentTypeBadgeClass","getAssessmentStatus","assessment","today","dueDate","due_date","marks_entered","getTime","getAssessmentStatusBadgeClass","status","classes","getStudentProgress","studentId","studentMarks","marks","mark","course_id","parseInt","length","Math","round","getStudentCurrentMark","weightedSum","totalWeight","forEach","find","a","assessment_id","max_mark","weightage","averageMark","getMarkClass","markString","isNaN","navigateToCreateAssessment","$router","push","navigateToEditAssessment","navigateToEnterMarks","navigateToStudentDetail","navigateToStudentMarks","openEditCourseModal","saveCourseChanges","message","confirmDeleteAssessment","deleteAssessment","exportCourseData"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\CourseDetail.vue"],"sourcesContent":["<template>\r\n  <div class=\"course-detail\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/lecturer/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              {{ course?.code }} - {{ course?.name }}\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">{{ course?.name }}</h1>\r\n        <p class=\"text-muted\">\r\n          {{ course?.code }} | {{ course?.semester || 'No semester specified' }}\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <div class=\"btn-group\">\r\n          <button class=\"btn btn-outline-primary\" @click=\"exportCourseData\">\r\n            <i class=\"fas fa-file-export me-2\"></i> Export Data\r\n          </button>\r\n          <button class=\"btn btn-outline-primary\" @click=\"openEditCourseModal\">\r\n            <i class=\"fas fa-edit me-2\"></i> Edit Course\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else class=\"row\">\r\n      <div class=\"col-md-4 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n            <h5 class=\"mb-0\">Course Information</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <table class=\"table table-sm\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>Code:</th>\r\n                  <td>{{ course?.code }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Name:</th>\r\n                  <td>{{ course?.name }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Semester:</th>\r\n                  <td>{{ course?.semester || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Credits:</th>\r\n                  <td>{{ course?.credits || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Students:</th>\r\n                  <td>{{ enrolledStudents.length }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Assessments:</th>\r\n                  <td>{{ courseAssessments.length }}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <div v-if=\"course?.description\" class=\"mt-3\">\r\n              <h6>Description</h6>\r\n              <p>{{ course.description }}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-8 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n            <h5 class=\"mb-0\">Assessment Breakdown</h5>\r\n            <button class=\"btn btn-sm btn-primary\" @click=\"navigateToCreateAssessment\">\r\n              <i class=\"fas fa-plus-circle me-2\"></i> Add Assessment\r\n            </button>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"courseAssessments.length === 0\" class=\"text-center py-4\">\r\n              <p class=\"mb-3\">No assessments have been added to this course yet.</p>\r\n              <button class=\"btn btn-primary\" @click=\"navigateToCreateAssessment\">\r\n                <i class=\"fas fa-plus-circle me-2\"></i> Create First Assessment\r\n              </button>\r\n            </div>\r\n            <div v-else>\r\n              <div class=\"mb-4\">\r\n                <div class=\"progress\" style=\"height: 30px;\">\r\n                  <div v-for=\"assessment in courseAssessments\" \r\n                       :key=\"assessment.id\"\r\n                       class=\"progress-bar\" \r\n                       :class=\"getAssessmentTypeClass(assessment.type)\"\r\n                       :style=\"`width: ${assessment.weightage}%`\"\r\n                       :title=\"`${assessment.name} (${assessment.weightage}%)`\">\r\n                    {{ assessment.weightage }}%\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"table-responsive\">\r\n                <table class=\"table table-hover\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Name</th>\r\n                      <th>Type</th>\r\n                      <th>Weight</th>\r\n                      <th>Due Date</th>\r\n                      <th>Status</th>\r\n                      <th>Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr v-for=\"assessment in courseAssessments\" :key=\"assessment.id\">\r\n                      <td>\r\n                        <strong>{{ assessment.name }}</strong>\r\n                        <div class=\"small text-muted\">{{ assessment.description }}</div>\r\n                      </td>\r\n                      <td>\r\n                        <span class=\"badge\" :class=\"getAssessmentTypeBadgeClass(assessment.type)\">\r\n                          {{ assessment.type }}\r\n                        </span>\r\n                      </td>\r\n                      <td>{{ assessment.weightage }}%</td>\r\n                      <td>{{ formatDate(assessment.due_date) }}</td>\r\n                      <td>\r\n                        <span class=\"badge\" :class=\"getAssessmentStatusBadgeClass(assessment)\">\r\n                          {{ getAssessmentStatus(assessment) }}\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <div class=\"btn-group btn-group-sm\">\r\n                          <button class=\"btn btn-outline-primary\" @click=\"navigateToEnterMarks(assessment)\">\r\n                            <i class=\"fas fa-calculator\"></i>\r\n                          </button>\r\n                          <button class=\"btn btn-outline-secondary\" @click=\"navigateToEditAssessment(assessment)\">\r\n                            <i class=\"fas fa-edit\"></i>\r\n                          </button>\r\n                          <button class=\"btn btn-outline-danger\" @click=\"confirmDeleteAssessment(assessment)\">\r\n                            <i class=\"fas fa-trash\"></i>\r\n                          </button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 mb-4\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n            <h5 class=\"mb-0\">Enrolled Students</h5>\r\n            <div class=\"input-group w-25\">\r\n              <input \r\n                type=\"text\" \r\n                class=\"form-control\" \r\n                placeholder=\"Search students...\" \r\n                v-model=\"studentSearchQuery\"\r\n              >\r\n              <button class=\"btn btn-outline-secondary\" type=\"button\">\r\n                <i class=\"fas fa-search\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"enrolledStudents.length === 0\" class=\"text-center py-4\">\r\n              <p>No students are enrolled in this course yet.</p>\r\n            </div>\r\n            <div v-else class=\"table-responsive\">\r\n              <table class=\"table table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Student ID</th>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Overall Progress</th>\r\n                    <th>Current Mark</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr v-for=\"student in filteredStudents\" :key=\"student.id\">\r\n                    <td>{{ student.student_id || 'N/A' }}</td>\r\n                    <td>{{ student.name }}</td>\r\n                    <td>{{ student.email }}</td>\r\n                    <td>\r\n                      <div class=\"progress\">\r\n                        <div \r\n                          class=\"progress-bar bg-success\" \r\n                          role=\"progressbar\"\r\n                          :style=\"`width: ${getStudentProgress(student.id)}%`\"\r\n                          :aria-valuenow=\"getStudentProgress(student.id)\" \r\n                          aria-valuemin=\"0\" \r\n                          aria-valuemax=\"100\">\r\n                          {{ getStudentProgress(student.id) }}%\r\n                        </div>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <span \r\n                        :class=\"getMarkClass(getStudentCurrentMark(student.id))\">\r\n                        {{ getStudentCurrentMark(student.id) }}\r\n                      </span>\r\n                    </td>\r\n                    <td>\r\n                      <div class=\"btn-group btn-group-sm\">\r\n                        <button class=\"btn btn-outline-primary\" @click=\"navigateToStudentDetail(student)\">\r\n                          <i class=\"fas fa-user me-1\"></i> Details\r\n                        </button>\r\n                        <button class=\"btn btn-outline-secondary\" @click=\"navigateToStudentMarks(student)\">\r\n                          <i class=\"fas fa-calculator me-1\"></i> Marks\r\n                        </button>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Edit Course Modal -->\r\n    <div class=\"modal fade\" id=\"editCourseModal\" tabindex=\"-1\" aria-labelledby=\"editCourseModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"editCourseModalLabel\">Edit Course</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <!-- Course edit form will go here -->\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"saveCourseChanges\">Save Changes</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Delete Assessment Confirmation Modal -->\r\n    <div class=\"modal fade\" id=\"deleteAssessmentModal\" tabindex=\"-1\" aria-labelledby=\"deleteAssessmentModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"deleteAssessmentModalLabel\">Confirm Deletion</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            Are you sure you want to delete the assessment \"{{ assessmentToDelete?.name }}\"? This action cannot be undone.\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n            <button type=\"button\" class=\"btn btn-danger\" @click=\"deleteAssessment\">Delete</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'CourseDetail',\r\n  data() {\r\n    return {\r\n      courseId: null,\r\n      studentSearchQuery: '',\r\n      assessmentToDelete: null,\r\n      editFormData: {\r\n        code: '',\r\n        name: '',\r\n        semester: '',\r\n        credits: '',\r\n        description: ''\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      isLoading: state => state.loading,\r\n      course: state => state.courses.course,\r\n    }),\r\n    ...mapGetters({\r\n      getCourseAssessments: 'assessments/getCourseAssessments'\r\n    }),\r\n    courseAssessments() {\r\n      return this.getCourseAssessments(this.courseId) || [];\r\n    },\r\n    enrolledStudents() {\r\n      // This would be populated from a store getter once implemented\r\n      return this.$store.state.users.courseStudents || [];\r\n    },\r\n    filteredStudents() {\r\n      if (!this.studentSearchQuery) {\r\n        return this.enrolledStudents;\r\n      }\r\n      \r\n      const query = this.studentSearchQuery.toLowerCase();\r\n      return this.enrolledStudents.filter(student => \r\n        student.name.toLowerCase().includes(query) || \r\n        student.email.toLowerCase().includes(query) ||\r\n        (student.student_id && student.student_id.toString().includes(query))\r\n      );\r\n    }\r\n  },\r\n  async created() {\r\n    this.courseId = this.$route.params.id;\r\n    try {\r\n      // Fetch course details\r\n      await this.fetchCourse(this.courseId);\r\n      \r\n      // Fetch course assessments\r\n      await this.fetchAssessments({ courseId: this.courseId });\r\n      \r\n      // Fetch enrolled students\r\n      await this.fetchCourseStudents(this.courseId);\r\n      \r\n      // Fetch marks for this course\r\n      await this.fetchMarks({ courseId: this.courseId });\r\n      \r\n      // Initialize edit form data\r\n      this.initializeEditForm();\r\n    } catch (error) {\r\n      console.error('Error loading course details:', error);\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchCourse: 'courses/fetchCourse',\r\n      fetchAssessments: 'assessments/fetchAssessments',\r\n      fetchMarks: 'marks/fetchMarks',\r\n      updateCourse: 'courses/updateCourse',\r\n      deleteAssessmentAction: 'assessments/deleteAssessment'\r\n    }),\r\n    async fetchCourseStudents(courseId) {\r\n      try {\r\n        // This action would need to be implemented in the users store module\r\n        await this.$store.dispatch('users/fetchCourseStudents', courseId);\r\n      } catch (error) {\r\n        console.error('Error fetching course students:', error);\r\n      }\r\n    },\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not set';\r\n      return new Date(dateString).toLocaleDateString();\r\n    },\r\n    getAssessmentTypeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    getAssessmentTypeBadgeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    getAssessmentStatus(assessment) {\r\n      const today = new Date();\r\n      const dueDate = new Date(assessment.due_date);\r\n      \r\n      if (assessment.marks_entered) {\r\n        return 'Marked';\r\n      } else if (dueDate < today) {\r\n        return 'Overdue';\r\n      } else if (dueDate.getTime() - today.getTime() < 7 * 24 * 60 * 60 * 1000) {\r\n        return 'Upcoming';\r\n      } else {\r\n        return 'Scheduled';\r\n      }\r\n    },\r\n    getAssessmentStatusBadgeClass(assessment) {\r\n      const status = this.getAssessmentStatus(assessment);\r\n      const classes = {\r\n        'Marked': 'bg-success',\r\n        'Overdue': 'bg-danger',\r\n        'Upcoming': 'bg-warning',\r\n        'Scheduled': 'bg-info'\r\n      };\r\n      return classes[status] || 'bg-secondary';\r\n    },\r\n    getStudentProgress(studentId) {\r\n      // Calculate what percentage of assessments the student has completed\r\n      const studentMarks = this.$store.state.marks.marks.filter(mark => \r\n        mark.student_id === studentId && mark.course_id === parseInt(this.courseId)\r\n      );\r\n      \r\n      if (this.courseAssessments.length === 0) return 0;\r\n      \r\n      return Math.round((studentMarks.length / this.courseAssessments.length) * 100);\r\n    },\r\n    getStudentCurrentMark(studentId) {\r\n      // Calculate the current weighted average for this student\r\n      const studentMarks = this.$store.state.marks.marks.filter(mark => \r\n        mark.student_id === studentId && mark.course_id === parseInt(this.courseId)\r\n      );\r\n      \r\n      if (studentMarks.length === 0) return 'N/A';\r\n      \r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      studentMarks.forEach(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (assessment) {\r\n          weightedSum += (mark.mark / assessment.max_mark) * assessment.weightage;\r\n          totalWeight += assessment.weightage;\r\n        }\r\n      });\r\n      \r\n      if (totalWeight === 0) return 'N/A';\r\n      \r\n      const averageMark = Math.round((weightedSum / totalWeight) * 100);\r\n      return `${averageMark}%`;\r\n    },\r\n    getMarkClass(markString) {\r\n      if (markString === 'N/A') return 'text-muted';\r\n      \r\n      const mark = parseInt(markString);\r\n      if (isNaN(mark)) return 'text-muted';\r\n      \r\n      if (mark >= 70) return 'text-success fw-bold';\r\n      if (mark >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    navigateToCreateAssessment() {\r\n      this.$router.push({ \r\n        name: 'CreateAssessment',\r\n        query: { courseId: this.courseId }\r\n      });\r\n    },\r\n    navigateToEditAssessment(assessment) {\r\n      this.$router.push({ \r\n        name: 'EditAssessment', \r\n        params: { id: assessment.id }\r\n      });\r\n    },\r\n    navigateToEnterMarks(assessment) {\r\n      // This route would need to be added to the router\r\n      this.$router.push({ \r\n        name: 'EnterMarks', \r\n        params: { id: assessment.id }\r\n      });\r\n    },\r\n    navigateToStudentDetail(student) {\r\n      this.$router.push({ \r\n        name: 'StudentDetail', \r\n        params: { id: student.id },\r\n        query: { courseId: this.courseId }\r\n      });\r\n    },\r\n    navigateToStudentMarks(student) {\r\n      // This route would need to be added to the router\r\n      this.$router.push({ \r\n        name: 'StudentMarks', \r\n        params: { studentId: student.id, courseId: this.courseId }\r\n      });\r\n    },\r\n    openEditCourseModal() {\r\n      this.initializeEditForm();\r\n      // In a real implementation, we would use Bootstrap's modal methods\r\n      // $('#editCourseModal').modal('show');\r\n    },\r\n    initializeEditForm() {\r\n      if (this.course) {\r\n        this.editFormData = {\r\n          code: this.course.code || '',\r\n          name: this.course.name || '',\r\n          semester: this.course.semester || '',\r\n          credits: this.course.credits || '',\r\n          description: this.course.description || ''\r\n        };\r\n      }\r\n    },\r\n    async saveCourseChanges() {\r\n      try {\r\n        await this.updateCourse({\r\n          id: this.courseId,\r\n          ...this.editFormData\r\n        });\r\n        // Close modal\r\n        // $('#editCourseModal').modal('hide');\r\n        this.$store.dispatch('showToast', {\r\n          message: 'Course updated successfully',\r\n          type: 'success'\r\n        });\r\n      } catch (error) {\r\n        console.error('Error updating course:', error);\r\n      }\r\n    },\r\n    confirmDeleteAssessment(assessment) {\r\n      this.assessmentToDelete = assessment;\r\n      // In a real implementation, we would use Bootstrap's modal methods\r\n      // $('#deleteAssessmentModal').modal('show');\r\n    },\r\n    async deleteAssessment() {\r\n      if (!this.assessmentToDelete) return;\r\n      \r\n      try {\r\n        await this.deleteAssessmentAction(this.assessmentToDelete.id);\r\n        // Close modal\r\n        // $('#deleteAssessmentModal').modal('hide');\r\n        this.$store.dispatch('showToast', {\r\n          message: 'Assessment deleted successfully',\r\n          type: 'success'\r\n        });\r\n        this.assessmentToDelete = null;\r\n      } catch (error) {\r\n        console.error('Error deleting assessment:', error);\r\n      }\r\n    },\r\n    exportCourseData() {\r\n      // This would initiate a download of course data in CSV format\r\n      // Implementation would need to call an API endpoint\r\n      this.$store.dispatch('showToast', {\r\n        message: 'Exporting course data...',\r\n        type: 'info'\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.course-detail h1 {\r\n  font-size: 2rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.progress {\r\n  height: 20px;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n}\r\n\r\n.card-header {\r\n  background-color: rgba(0, 0, 0, 0.03);\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.125);\r\n}\r\n\r\n.table th {\r\n  font-weight: 600;\r\n}\r\n\r\n.badge {\r\n  font-weight: 500;\r\n  padding: 0.35em 0.65em;\r\n}\r\n\r\n/* Timeline styling for recent activities */\r\n.timeline {\r\n  position: relative;\r\n  padding-left: 40px;\r\n}\r\n\r\n.timeline-item {\r\n  position: relative;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.timeline-item:before {\r\n  content: \"\";\r\n  position: absolute;\r\n  left: -30px;\r\n  top: 0;\r\n  height: 100%;\r\n  width: 2px;\r\n  background-color: #e9ecef;\r\n}\r\n\r\n.timeline-item:last-child:before {\r\n  height: 50%;\r\n}\r\n\r\n.timeline-item-icon {\r\n  position: absolute;\r\n  left: -38px;\r\n  top: 0;\r\n  width: 16px;\r\n  height: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #fff;\r\n  border: 2px solid #007bff;\r\n  border-radius: 50%;\r\n}\r\n\r\n.timeline-item-icon i {\r\n  font-size: 8px;\r\n  color: #007bff;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}