{"ast":null,"code":"import { mapState, mapGetters, mapActions } from 'vuex';\nexport default {\n  name: 'MarkSimulation',\n  data() {\n    return {\n      courseId: null,\n      simulatedMarks: {},\n      // assessment_id -> simulated_mark\n      requiredMarks: {\n        pass: 0,\n        distinction: 0\n      }\n    };\n  },\n  computed: {\n    ...mapState({\n      isLoading: state => state.loading,\n      course: state => state.courses.course,\n      marks: state => state.marks.marks,\n      userId: state => state.auth.userId\n    }),\n    ...mapGetters({\n      getCourseAssessments: 'assessments/getCourseAssessments'\n    }),\n    courseAssessments() {\n      return this.getCourseAssessments(this.courseId) || [];\n    },\n    sortedAssessments() {\n      return [...this.courseAssessments].sort((a, b) => {\n        // Sort by due date\n        if (!a.due_date) return 1;\n        if (!b.due_date) return -1;\n        return new Date(a.due_date) - new Date(b.due_date);\n      });\n    },\n    studentMarks() {\n      return this.marks.filter(mark => mark.student_id === this.userId && mark.course_id === parseInt(this.courseId));\n    },\n    unassessedItems() {\n      return this.courseAssessments.filter(assessment => !this.hasMarkForAssessment(assessment.id));\n    },\n    totalRemainingWeight() {\n      return this.unassessedItems.reduce((sum, assessment) => sum + assessment.weightage, 0);\n    },\n    currentOverallMark() {\n      if (!this.studentMarks.length) return 0;\n      let weightedSum = 0;\n      let totalWeight = 0;\n      this.studentMarks.forEach(mark => {\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\n        if (!assessment) return;\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\n        weightedSum += percentage * assessment.weightage;\n        totalWeight += parseInt(assessment.weightage);\n      });\n      if (totalWeight === 0) return 0;\n      return Math.round(weightedSum / totalWeight);\n    },\n    simulatedOverallMark() {\n      let weightedSum = 0;\n      let totalWeight = 0;\n\n      // Include actual marks\n      this.studentMarks.forEach(mark => {\n        // Skip if this assessment is being simulated\n        if (this.isSimulatedAssessment(mark.assessment_id)) return;\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\n        if (!assessment) return;\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\n        weightedSum += percentage * assessment.weightage;\n        totalWeight += parseInt(assessment.weightage);\n      });\n\n      // Include simulated marks\n      for (const assessmentId in this.simulatedMarks) {\n        const mark = this.simulatedMarks[assessmentId];\n        const assessment = this.courseAssessments.find(a => a.id === parseInt(assessmentId));\n        if (!assessment || mark === undefined) continue;\n        const percentage = this.calculatePercentage(mark, assessment.max_mark);\n        weightedSum += percentage * assessment.weightage;\n        totalWeight += parseInt(assessment.weightage);\n      }\n      if (totalWeight === 0) return 0;\n      return Math.round(weightedSum / totalWeight);\n    },\n    simulatedGrade() {\n      return this.calculateGrade(this.simulatedOverallMark);\n    },\n    markChange() {\n      return this.simulatedOverallMark - this.currentOverallMark;\n    },\n    getSimulatedMarkClass() {\n      if (this.simulatedOverallMark >= 70) return 'text-success';\n      if (this.simulatedOverallMark >= 50) return 'text-warning';\n      return 'text-danger';\n    },\n    getSimulatedGradeBadgeClass() {\n      if (this.simulatedOverallMark >= 70) return 'bg-success';\n      if (this.simulatedOverallMark >= 50) return 'bg-warning';\n      return 'bg-danger';\n    },\n    getCurrentMarkClass() {\n      if (this.currentOverallMark >= 70) return 'text-success';\n      if (this.currentOverallMark >= 50) return 'text-warning';\n      return 'text-danger';\n    },\n    getMarkChangeClass() {\n      if (this.markChange > 0) return 'text-success';\n      if (this.markChange < 0) return 'text-danger';\n      return 'text-muted';\n    }\n  },\n  async created() {\n    this.courseId = parseInt(this.$route.params.id);\n    try {\n      // Fetch course details\n      await this.fetchCourse(this.courseId);\n\n      // Fetch assessments for this course\n      await this.fetchAssessments({\n        courseId: this.courseId\n      });\n\n      // Fetch marks for this student in this course\n      await this.fetchMarks({\n        studentId: this.userId,\n        courseId: this.courseId\n      });\n\n      // Initialize the simulation\n      this.initializeSimulation();\n\n      // Calculate required marks\n      this.calculateRequiredMarks();\n    } catch (error) {\n      console.error('Error loading simulation data:', error);\n    }\n  },\n  methods: {\n    ...mapActions({\n      fetchCourse: 'courses/fetchCourse',\n      fetchAssessments: 'assessments/fetchAssessments',\n      fetchMarks: 'marks/fetchMarks'\n    }),\n    formatDate(dateString) {\n      if (!dateString) return 'Not set';\n      return new Date(dateString).toLocaleDateString();\n    },\n    hasMarkForAssessment(assessmentId) {\n      return this.studentMarks.some(mark => mark.assessment_id === parseInt(assessmentId));\n    },\n    getMarkForAssessment(assessmentId) {\n      return this.studentMarks.find(mark => mark.assessment_id === parseInt(assessmentId));\n    },\n    isSimulatedAssessment(assessmentId) {\n      return assessmentId in this.simulatedMarks;\n    },\n    calculatePercentage(mark, maxMark) {\n      if (!maxMark) return 0;\n      return Math.round(mark / maxMark * 100);\n    },\n    getAssessmentTypeBadgeClass(type) {\n      const types = {\n        'exam': 'bg-danger',\n        'midterm': 'bg-warning',\n        'quiz': 'bg-info',\n        'assignment': 'bg-success',\n        'project': 'bg-primary',\n        'lab': 'bg-secondary'\n      };\n      return types[type.toLowerCase()] || 'bg-secondary';\n    },\n    getAssessmentStatus(assessment) {\n      // Check if it has a real mark\n      if (this.hasMarkForAssessment(assessment.id) && !this.isSimulatedAssessment(assessment.id)) {\n        return 'Completed';\n      }\n\n      // Check if it has a simulated mark\n      if (this.isSimulatedAssessment(assessment.id)) {\n        return 'Simulated';\n      }\n      const today = new Date();\n      const dueDate = assessment.due_date ? new Date(assessment.due_date) : null;\n      if (!dueDate) return 'Upcoming';\n      if (dueDate < today) {\n        return 'Overdue';\n      }\n      if (dueDate.getTime() - today.getTime() < 7 * 24 * 60 * 60 * 1000) {\n        return 'Upcoming';\n      }\n      return 'Scheduled';\n    },\n    getStatusBadge(assessment) {\n      const status = this.getAssessmentStatus(assessment);\n      const badges = {\n        'Completed': 'bg-success',\n        'Simulated': 'bg-info',\n        'Overdue': 'bg-danger',\n        'Upcoming': 'bg-warning',\n        'Scheduled': 'bg-secondary'\n      };\n      return badges[status] || 'bg-secondary';\n    },\n    calculateGrade(percentage) {\n      if (percentage >= 90) return 'A+';\n      if (percentage >= 80) return 'A';\n      if (percentage >= 75) return 'B+';\n      if (percentage >= 70) return 'B';\n      if (percentage >= 65) return 'C+';\n      if (percentage >= 60) return 'C';\n      if (percentage >= 55) return 'D+';\n      if (percentage >= 50) return 'D';\n      return 'F';\n    },\n    initializeSimulation() {\n      this.simulatedMarks = {};\n\n      // For assessments without marks, initialize with empty values\n      this.courseAssessments.forEach(assessment => {\n        if (!this.hasMarkForAssessment(assessment.id)) {\n          this.simulatedMarks[assessment.id] = undefined;\n        }\n      });\n    },\n    resetSimulation() {\n      this.initializeSimulation();\n      this.calculateRequiredMarks();\n    },\n    updateSimulation() {\n      this.calculateRequiredMarks();\n    },\n    calculateRequiredMarks() {\n      // Calculate how much is needed on remaining assessments to achieve target grades\n\n      // First, get the current contribution from real and simulated marks\n      let currentWeightedSum = 0;\n      let assessedWeight = 0;\n\n      // Include actual marks (that aren't being simulated)\n      this.studentMarks.forEach(mark => {\n        if (this.isSimulatedAssessment(mark.assessment_id)) return;\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\n        if (!assessment) return;\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\n        currentWeightedSum += percentage * assessment.weightage;\n        assessedWeight += assessment.weightage;\n      });\n\n      // Include simulated marks that have values\n      for (const assessmentId in this.simulatedMarks) {\n        const mark = this.simulatedMarks[assessmentId];\n        if (mark === undefined) continue;\n        const assessment = this.courseAssessments.find(a => a.id === parseInt(assessmentId));\n        if (!assessment) continue;\n        const percentage = this.calculatePercentage(mark, assessment.max_mark);\n        currentWeightedSum += percentage * assessment.weightage;\n        assessedWeight += assessment.weightage;\n      }\n\n      // Calculate remaining unassessed weight\n      let unassessedWeight = 0;\n      this.courseAssessments.forEach(assessment => {\n        const assessmentId = assessment.id;\n        if (!this.hasMarkForAssessment(assessmentId) && !(assessmentId in this.simulatedMarks && this.simulatedMarks[assessmentId] !== undefined)) {\n          unassessedWeight += assessment.weightage;\n        }\n      });\n\n      // Calculate required marks for different grade thresholds\n      const totalWeight = 100; // Assuming total is 100%\n\n      // For passing grade (50%)\n      const requiredForPass = (50 * totalWeight - currentWeightedSum) / unassessedWeight;\n      this.requiredMarks.pass = unassessedWeight > 0 ? Math.round(requiredForPass) : 0;\n\n      // For distinction grade (70%)\n      const requiredForDistinction = (70 * totalWeight - currentWeightedSum) / unassessedWeight;\n      this.requiredMarks.distinction = unassessedWeight > 0 ? Math.round(requiredForDistinction) : 0;\n    },\n    formatRequiredMark(value) {\n      if (value <= 0) return 'Already achieved';\n      if (value > 100) return 'Not possible';\n      return `${value}% needed`;\n    },\n    applyPreset(preset) {\n      // Apply preset values to all simulated assessments\n      let presetValue = 0;\n      switch (preset) {\n        case 'best':\n          presetValue = 90;\n          break;\n        case 'good':\n          presetValue = 75;\n          break;\n        case 'average':\n          presetValue = 65;\n          break;\n        case 'minimal':\n          presetValue = 50;\n          break;\n      }\n\n      // Apply the preset percentage to all unassessed items\n      this.courseAssessments.forEach(assessment => {\n        if (!this.hasMarkForAssessment(assessment.id)) {\n          // Calculate the actual mark value based on the percentage and max mark\n          const markValue = Math.round(presetValue / 100 * assessment.max_mark);\n          this.simulatedMarks[assessment.id] = markValue;\n        }\n      });\n      this.calculateRequiredMarks();\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapGetters","mapActions","name","data","courseId","simulatedMarks","requiredMarks","pass","distinction","computed","isLoading","state","loading","course","courses","marks","userId","auth","getCourseAssessments","courseAssessments","sortedAssessments","sort","a","b","due_date","Date","studentMarks","filter","mark","student_id","course_id","parseInt","unassessedItems","assessment","hasMarkForAssessment","id","totalRemainingWeight","reduce","sum","weightage","currentOverallMark","length","weightedSum","totalWeight","forEach","find","assessment_id","percentage","calculatePercentage","max_mark","Math","round","simulatedOverallMark","isSimulatedAssessment","assessmentId","undefined","simulatedGrade","calculateGrade","markChange","getSimulatedMarkClass","getSimulatedGradeBadgeClass","getCurrentMarkClass","getMarkChangeClass","created","$route","params","fetchCourse","fetchAssessments","fetchMarks","studentId","initializeSimulation","calculateRequiredMarks","error","console","methods","formatDate","dateString","toLocaleDateString","some","getMarkForAssessment","maxMark","getAssessmentTypeBadgeClass","type","types","toLowerCase","getAssessmentStatus","today","dueDate","getTime","getStatusBadge","status","badges","resetSimulation","updateSimulation","currentWeightedSum","assessedWeight","unassessedWeight","requiredForPass","requiredForDistinction","formatRequiredMark","value","applyPreset","preset","presetValue","markValue"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\student\\MarkSimulation.vue"],"sourcesContent":["<template>\r\n  <div class=\"mark-simulation\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/student/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link :to=\"`/student/course/${courseId}`\">\r\n                {{ course?.code }} - {{ course?.name }}\r\n              </router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Grade Simulator\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">Grade Simulator</h1>\r\n        <p class=\"text-muted\">\r\n          {{ course?.code }} | {{ course?.name }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"!course\" class=\"alert alert-danger\">\r\n      Course not found or you don't have access to this course.\r\n    </div>\r\n\r\n    <div v-else class=\"row\">\r\n      <div class=\"col-md-8 mb-4\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Assessment Marks</h5>\r\n            <p class=\"text-muted small mb-0\">\r\n              Enter hypothetical marks for assessments to simulate your final grade\r\n            </p>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"alert alert-info mb-4\">\r\n              <i class=\"fas fa-info-circle me-2\"></i>\r\n              Enter the marks you expect to get for assessments that haven't been graded yet. Your actual marks are pre-filled where available.\r\n            </div>\r\n\r\n            <div class=\"table-responsive\">\r\n              <table class=\"table table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Assessment</th>\r\n                    <th>Type</th>\r\n                    <th>Weight</th>\r\n                    <th>Status</th>\r\n                    <th>Mark</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr v-for=\"assessment in sortedAssessments\" :key=\"assessment.id\">\r\n                    <td>\r\n                      <strong>{{ assessment.name }}</strong>\r\n                    </td>\r\n                    <td>\r\n                      <span class=\"badge\" :class=\"getAssessmentTypeBadgeClass(assessment.type)\">\r\n                        {{ assessment.type }}\r\n                      </span>\r\n                    </td>\r\n                    <td>{{ assessment.weightage }}%</td>\r\n                    <td>\r\n                      <span \r\n                        class=\"badge\" \r\n                        :class=\"getStatusBadge(assessment)\"\r\n                      >\r\n                        {{ getAssessmentStatus(assessment) }}\r\n                      </span>\r\n                    </td>\r\n                    <td style=\"width: 180px;\">\r\n                      <div v-if=\"hasMarkForAssessment(assessment.id) && !isSimulatedAssessment(assessment.id)\">\r\n                        <div class=\"input-group input-group-sm disabled\">\r\n                          <input \r\n                            type=\"number\" \r\n                            class=\"form-control bg-light\"\r\n                            :value=\"getMarkForAssessment(assessment.id).mark\"\r\n                            disabled\r\n                          >\r\n                          <span class=\"input-group-text\">/ {{ assessment.max_mark }}</span>\r\n                        </div>\r\n                        <small class=\"text-muted\">Actual mark ({{ calculatePercentage(getMarkForAssessment(assessment.id).mark, assessment.max_mark) }}%)</small>\r\n                      </div>\r\n                      <div v-else>\r\n                        <div class=\"input-group input-group-sm\">\r\n                          <input \r\n                            type=\"number\" \r\n                            class=\"form-control\"\r\n                            v-model.number=\"simulatedMarks[assessment.id]\"\r\n                            :min=\"0\" \r\n                            :max=\"assessment.max_mark\"\r\n                            @input=\"updateSimulation\"\r\n                          >\r\n                          <span class=\"input-group-text\">/ {{ assessment.max_mark }}</span>\r\n                        </div>\r\n                        <small class=\"text-muted\" v-if=\"simulatedMarks[assessment.id] !== undefined\">\r\n                          Simulated ({{ calculatePercentage(simulatedMarks[assessment.id], assessment.max_mark) }}%)\r\n                        </small>\r\n                        <small class=\"text-muted\" v-else>\r\n                          Enter expected mark\r\n                        </small>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div class=\"d-flex justify-content-end mt-3\">\r\n              <button class=\"btn btn-outline-secondary me-2\" @click=\"resetSimulation\">\r\n                Reset Simulation\r\n              </button>\r\n              <div class=\"dropdown\">\r\n                <button \r\n                  class=\"btn btn-outline-primary dropdown-toggle\" \r\n                  type=\"button\" \r\n                  id=\"presetDropdown\" \r\n                  data-bs-toggle=\"dropdown\" \r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Apply Preset\r\n                </button>\r\n                <ul class=\"dropdown-menu\" aria-labelledby=\"presetDropdown\">\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('best')\">Best Case (90%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('good')\">Good Case (75%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('average')\">Average Case (65%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('minimal')\">Minimal Pass (50%)</a></li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-4 mb-4\">\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Simulation Results</h5>\r\n          </div>\r\n          <div class=\"card-body text-center\">\r\n            <div class=\"mb-4\">\r\n              <div class=\"display-4 fw-bold\" :class=\"getSimulatedMarkClass\">\r\n                {{ simulatedOverallMark }}%\r\n              </div>\r\n              <div class=\"badge fs-6 my-2\" :class=\"getSimulatedGradeBadgeClass\">\r\n                {{ simulatedGrade }}\r\n              </div>\r\n              <p class=\"text-muted\">Projected Final Grade</p>\r\n            </div>\r\n            \r\n            <hr class=\"my-4\">\r\n            \r\n            <div class=\"comparison mb-3\">\r\n              <div class=\"row\">\r\n                <div class=\"col-6 text-start\">\r\n                  <p class=\"mb-1 small text-muted\">Current Mark</p>\r\n                  <h4 :class=\"getCurrentMarkClass\">{{ currentOverallMark }}%</h4>\r\n                </div>\r\n                <div class=\"col-6 text-end\">\r\n                  <p class=\"mb-1 small text-muted\">Change</p>\r\n                  <h4 :class=\"getMarkChangeClass\">\r\n                    {{ markChange > 0 ? '+' : '' }}{{ markChange }}%\r\n                  </h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"progress mb-3\" style=\"height: 10px;\">\r\n              <div \r\n                class=\"progress-bar bg-danger\" \r\n                role=\"progressbar\" \r\n                :style=\"`width: 50%`\"\r\n                aria-valuenow=\"50\" \r\n                aria-valuemin=\"0\" \r\n                aria-valuemax=\"100\">\r\n              </div>\r\n            </div>\r\n            <div class=\"d-flex justify-content-between\">\r\n              <small>Fail</small>\r\n              <small>Pass</small>\r\n              <small>Distinction</small>\r\n            </div>\r\n            \r\n            <div \r\n              class=\"position-indicator\" \r\n              :style=\"`left: ${Math.min(Math.max(simulatedOverallMark, 0), 100)}%`\"\r\n            >\r\n              <i class=\"fas fa-caret-down\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Required Marks</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <p class=\"text-muted small mb-3\">\r\n              Marks required on remaining assessments to achieve these grades:\r\n            </p>\r\n            \r\n            <div class=\"required-mark-row\">\r\n              <div class=\"d-flex justify-content-between mb-2\">\r\n                <span class=\"badge bg-success\">Distinction (70%+)</span>\r\n                <span \r\n                  :class=\"{ 'text-success': requiredMarks.distinction <= 100, 'text-danger': requiredMarks.distinction > 100 }\"\r\n                >\r\n                  {{ formatRequiredMark(requiredMarks.distinction) }}\r\n                </span>\r\n              </div>\r\n              <div class=\"progress mb-3\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-success\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${Math.min(requiredMarks.distinction, 100)}%`\"\r\n                  :aria-valuenow=\"Math.min(requiredMarks.distinction, 100)\"\r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"required-mark-row\">\r\n              <div class=\"d-flex justify-content-between mb-2\">\r\n                <span class=\"badge bg-warning\">Pass (50%+)</span>\r\n                <span\r\n                  :class=\"{ 'text-success': requiredMarks.pass <= 100, 'text-danger': requiredMarks.pass > 100 }\"\r\n                >\r\n                  {{ formatRequiredMark(requiredMarks.pass) }}\r\n                </span>\r\n              </div>\r\n              <div class=\"progress mb-3\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-warning\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${Math.min(requiredMarks.pass, 100)}%`\"\r\n                  :aria-valuenow=\"Math.min(requiredMarks.pass, 100)\"\r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"alert alert-secondary mt-3 small\">\r\n              <i class=\"fas fa-info-circle me-2\"></i>\r\n              These calculations show the average mark needed on all remaining assessments to achieve the target grade.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'MarkSimulation',\r\n  data() {\r\n    return {\r\n      courseId: null,\r\n      simulatedMarks: {}, // assessment_id -> simulated_mark\r\n      requiredMarks: {\r\n        pass: 0,\r\n        distinction: 0\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      isLoading: state => state.loading,\r\n      course: state => state.courses.course,\r\n      marks: state => state.marks.marks,\r\n      userId: state => state.auth.userId\r\n    }),\r\n    ...mapGetters({\r\n      getCourseAssessments: 'assessments/getCourseAssessments'\r\n    }),\r\n    courseAssessments() {\r\n      return this.getCourseAssessments(this.courseId) || [];\r\n    },\r\n    sortedAssessments() {\r\n      return [...this.courseAssessments].sort((a, b) => {\r\n        // Sort by due date\r\n        if (!a.due_date) return 1;\r\n        if (!b.due_date) return -1;\r\n        return new Date(a.due_date) - new Date(b.due_date);\r\n      });\r\n    },\r\n    studentMarks() {\r\n      return this.marks.filter(mark => \r\n        mark.student_id === this.userId && \r\n        mark.course_id === parseInt(this.courseId)\r\n      );\r\n    },\r\n    unassessedItems() {\r\n      return this.courseAssessments.filter(assessment => \r\n        !this.hasMarkForAssessment(assessment.id)\r\n      );\r\n    },\r\n    totalRemainingWeight() {\r\n      return this.unassessedItems.reduce((sum, assessment) => sum + assessment.weightage, 0);\r\n    },\r\n    currentOverallMark() {\r\n      if (!this.studentMarks.length) return 0;\r\n      \r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      this.studentMarks.forEach(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        weightedSum += percentage * assessment.weightage;\r\n        totalWeight += parseInt(assessment.weightage);\r\n      });\r\n      \r\n      if (totalWeight === 0) return 0;\r\n      return Math.round(weightedSum / totalWeight);\r\n    },\r\n    simulatedOverallMark() {\r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      // Include actual marks\r\n      this.studentMarks.forEach(mark => {\r\n        // Skip if this assessment is being simulated\r\n        if (this.isSimulatedAssessment(mark.assessment_id)) return;\r\n        \r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        weightedSum += percentage * assessment.weightage;\r\n        totalWeight += parseInt(assessment.weightage);\r\n      });\r\n      \r\n      // Include simulated marks\r\n      for (const assessmentId in this.simulatedMarks) {\r\n        const mark = this.simulatedMarks[assessmentId];\r\n        const assessment = this.courseAssessments.find(a => a.id === parseInt(assessmentId));\r\n        \r\n        if (!assessment || mark === undefined) continue;\r\n        \r\n        const percentage = this.calculatePercentage(mark, assessment.max_mark);\r\n        weightedSum += percentage * assessment.weightage;\r\n        totalWeight += parseInt(assessment.weightage);\r\n      }\r\n      \r\n      if (totalWeight === 0) return 0;\r\n      return Math.round(weightedSum / totalWeight);\r\n    },\r\n    simulatedGrade() {\r\n      return this.calculateGrade(this.simulatedOverallMark);\r\n    },\r\n    markChange() {\r\n      return this.simulatedOverallMark - this.currentOverallMark;\r\n    },\r\n    getSimulatedMarkClass() {\r\n      if (this.simulatedOverallMark >= 70) return 'text-success';\r\n      if (this.simulatedOverallMark >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getSimulatedGradeBadgeClass() {\r\n      if (this.simulatedOverallMark >= 70) return 'bg-success';\r\n      if (this.simulatedOverallMark >= 50) return 'bg-warning';\r\n      return 'bg-danger';\r\n    },\r\n    getCurrentMarkClass() {\r\n      if (this.currentOverallMark >= 70) return 'text-success';\r\n      if (this.currentOverallMark >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getMarkChangeClass() {\r\n      if (this.markChange > 0) return 'text-success';\r\n      if (this.markChange < 0) return 'text-danger';\r\n      return 'text-muted';\r\n    }\r\n  },\r\n  async created() {\r\n    this.courseId = parseInt(this.$route.params.id);\r\n    \r\n    try {\r\n      // Fetch course details\r\n      await this.fetchCourse(this.courseId);\r\n      \r\n      // Fetch assessments for this course\r\n      await this.fetchAssessments({ courseId: this.courseId });\r\n      \r\n      // Fetch marks for this student in this course\r\n      await this.fetchMarks({ \r\n        studentId: this.userId,\r\n        courseId: this.courseId\r\n      });\r\n      \r\n      // Initialize the simulation\r\n      this.initializeSimulation();\r\n      \r\n      // Calculate required marks\r\n      this.calculateRequiredMarks();\r\n    } catch (error) {\r\n      console.error('Error loading simulation data:', error);\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchCourse: 'courses/fetchCourse',\r\n      fetchAssessments: 'assessments/fetchAssessments',\r\n      fetchMarks: 'marks/fetchMarks'\r\n    }),\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not set';\r\n      return new Date(dateString).toLocaleDateString();\r\n    },\r\n    hasMarkForAssessment(assessmentId) {\r\n      return this.studentMarks.some(mark => mark.assessment_id === parseInt(assessmentId));\r\n    },\r\n    getMarkForAssessment(assessmentId) {\r\n      return this.studentMarks.find(mark => mark.assessment_id === parseInt(assessmentId));\r\n    },\r\n    isSimulatedAssessment(assessmentId) {\r\n      return assessmentId in this.simulatedMarks;\r\n    },\r\n    calculatePercentage(mark, maxMark) {\r\n      if (!maxMark) return 0;\r\n      return Math.round((mark / maxMark) * 100);\r\n    },\r\n    getAssessmentTypeBadgeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    getAssessmentStatus(assessment) {\r\n      // Check if it has a real mark\r\n      if (this.hasMarkForAssessment(assessment.id) && !this.isSimulatedAssessment(assessment.id)) {\r\n        return 'Completed';\r\n      }\r\n      \r\n      // Check if it has a simulated mark\r\n      if (this.isSimulatedAssessment(assessment.id)) {\r\n        return 'Simulated';\r\n      }\r\n      \r\n      const today = new Date();\r\n      const dueDate = assessment.due_date ? new Date(assessment.due_date) : null;\r\n      \r\n      if (!dueDate) return 'Upcoming';\r\n      \r\n      if (dueDate < today) {\r\n        return 'Overdue';\r\n      }\r\n      \r\n      if (dueDate.getTime() - today.getTime() < 7 * 24 * 60 * 60 * 1000) {\r\n        return 'Upcoming';\r\n      }\r\n      \r\n      return 'Scheduled';\r\n    },\r\n    getStatusBadge(assessment) {\r\n      const status = this.getAssessmentStatus(assessment);\r\n      \r\n      const badges = {\r\n        'Completed': 'bg-success',\r\n        'Simulated': 'bg-info',\r\n        'Overdue': 'bg-danger',\r\n        'Upcoming': 'bg-warning',\r\n        'Scheduled': 'bg-secondary'\r\n      };\r\n      \r\n      return badges[status] || 'bg-secondary';\r\n    },\r\n    calculateGrade(percentage) {\r\n      if (percentage >= 90) return 'A+';\r\n      if (percentage >= 80) return 'A';\r\n      if (percentage >= 75) return 'B+';\r\n      if (percentage >= 70) return 'B';\r\n      if (percentage >= 65) return 'C+';\r\n      if (percentage >= 60) return 'C';\r\n      if (percentage >= 55) return 'D+';\r\n      if (percentage >= 50) return 'D';\r\n      return 'F';\r\n    },\r\n    initializeSimulation() {\r\n      this.simulatedMarks = {};\r\n      \r\n      // For assessments without marks, initialize with empty values\r\n      this.courseAssessments.forEach(assessment => {\r\n        if (!this.hasMarkForAssessment(assessment.id)) {\r\n          this.simulatedMarks[assessment.id] = undefined;\r\n        }\r\n      });\r\n    },\r\n    resetSimulation() {\r\n      this.initializeSimulation();\r\n      this.calculateRequiredMarks();\r\n    },\r\n    updateSimulation() {\r\n      this.calculateRequiredMarks();\r\n    },\r\n    calculateRequiredMarks() {\r\n      // Calculate how much is needed on remaining assessments to achieve target grades\r\n      \r\n      // First, get the current contribution from real and simulated marks\r\n      let currentWeightedSum = 0;\r\n      let assessedWeight = 0;\r\n      \r\n      // Include actual marks (that aren't being simulated)\r\n      this.studentMarks.forEach(mark => {\r\n        if (this.isSimulatedAssessment(mark.assessment_id)) return;\r\n        \r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        currentWeightedSum += percentage * assessment.weightage;\r\n        assessedWeight += assessment.weightage;\r\n      });\r\n      \r\n      // Include simulated marks that have values\r\n      for (const assessmentId in this.simulatedMarks) {\r\n        const mark = this.simulatedMarks[assessmentId];\r\n        if (mark === undefined) continue;\r\n        \r\n        const assessment = this.courseAssessments.find(a => a.id === parseInt(assessmentId));\r\n        if (!assessment) continue;\r\n        \r\n        const percentage = this.calculatePercentage(mark, assessment.max_mark);\r\n        currentWeightedSum += percentage * assessment.weightage;\r\n        assessedWeight += assessment.weightage;\r\n      }\r\n      \r\n      // Calculate remaining unassessed weight\r\n      let unassessedWeight = 0;\r\n      this.courseAssessments.forEach(assessment => {\r\n        const assessmentId = assessment.id;\r\n        if (!this.hasMarkForAssessment(assessmentId) && \r\n            !(assessmentId in this.simulatedMarks && this.simulatedMarks[assessmentId] !== undefined)) {\r\n          unassessedWeight += assessment.weightage;\r\n        }\r\n      });\r\n      \r\n      // Calculate required marks for different grade thresholds\r\n      const totalWeight = 100; // Assuming total is 100%\r\n      \r\n      // For passing grade (50%)\r\n      const requiredForPass = (50 * totalWeight - currentWeightedSum) / unassessedWeight;\r\n      this.requiredMarks.pass = unassessedWeight > 0 ? Math.round(requiredForPass) : 0;\r\n      \r\n      // For distinction grade (70%)\r\n      const requiredForDistinction = (70 * totalWeight - currentWeightedSum) / unassessedWeight;\r\n      this.requiredMarks.distinction = unassessedWeight > 0 ? Math.round(requiredForDistinction) : 0;\r\n    },\r\n    formatRequiredMark(value) {\r\n      if (value <= 0) return 'Already achieved';\r\n      if (value > 100) return 'Not possible';\r\n      return `${value}% needed`;\r\n    },\r\n    applyPreset(preset) {\r\n      // Apply preset values to all simulated assessments\r\n      let presetValue = 0;\r\n      \r\n      switch(preset) {\r\n        case 'best':\r\n          presetValue = 90;\r\n          break;\r\n        case 'good':\r\n          presetValue = 75;\r\n          break;\r\n        case 'average':\r\n          presetValue = 65;\r\n          break;\r\n        case 'minimal':\r\n          presetValue = 50;\r\n          break;\r\n      }\r\n      \r\n      // Apply the preset percentage to all unassessed items\r\n      this.courseAssessments.forEach(assessment => {\r\n        if (!this.hasMarkForAssessment(assessment.id)) {\r\n          // Calculate the actual mark value based on the percentage and max mark\r\n          const markValue = Math.round((presetValue / 100) * assessment.max_mark);\r\n          this.simulatedMarks[assessment.id] = markValue;\r\n        }\r\n      });\r\n      \r\n      this.calculateRequiredMarks();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.mark-simulation h1 {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.progress {\r\n  border-radius: 0.25rem;\r\n  overflow: hidden;\r\n}\r\n\r\n.display-4 {\r\n  font-size: 3rem;\r\n}\r\n\r\n.position-indicator {\r\n  position: relative;\r\n  width: 0;\r\n  height: 0;\r\n  margin-top: -24px;\r\n  z-index: 2;\r\n  color: #343a40;\r\n  font-size: 1.5rem;\r\n  transform: translateX(-50%);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .display-4 {\r\n    font-size: 2.5rem;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}