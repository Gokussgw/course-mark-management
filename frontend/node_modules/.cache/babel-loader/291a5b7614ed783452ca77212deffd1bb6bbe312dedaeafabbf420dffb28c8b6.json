{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport store from '../store';\n\n// Lazy-loaded components\nconst Login = () => import('../views/Login.vue');\nconst Register = () => import('../views/Register.vue');\nconst LecturerDashboard = () => import('../views/lecturer/Dashboard.vue');\nconst StudentDashboard = () => import('../views/student/Dashboard.vue');\nconst AdvisorDashboard = () => import('../views/advisor/Dashboard.vue');\nconst CourseDetail = () => import('../views/lecturer/CourseDetail.vue');\nconst StudentDetail = () => import('../views/lecturer/StudentDetail.vue');\nconst AssessmentForm = () => import('../views/lecturer/AssessmentForm.vue');\nconst StudentMarksView = () => import('../views/student/CourseMarks.vue');\nconst StudentSimulation = () => import('../views/student/MarkSimulation.vue');\nconst AdviseeList = () => import('../views/advisor/AdviseeList.vue');\nconst AdviseeDetail = () => import('../views/advisor/AdviseeDetail.vue');\nconst NotFound = () => import('../views/NotFound.vue');\nconst routes = [{\n  path: '/',\n  redirect: to => {\n    const userRole = store.getters['auth/userRole'];\n    if (userRole === 'lecturer') {\n      return '/lecturer/dashboard';\n    } else if (userRole === 'student') {\n      return '/student/dashboard';\n    } else if (userRole === 'advisor') {\n      return '/advisor/dashboard';\n    } else {\n      return '/login';\n    }\n  }\n}, {\n  path: '/login',\n  name: 'Login',\n  component: Login,\n  meta: {\n    requiresGuest: true\n  }\n}, {\n  path: '/register',\n  name: 'Register',\n  component: Register,\n  meta: {\n    requiresGuest: true\n  }\n},\n// Lecturer routes\n{\n  path: '/lecturer/dashboard',\n  name: 'LecturerDashboard',\n  component: LecturerDashboard,\n  meta: {\n    requiresAuth: true,\n    role: 'lecturer'\n  }\n}, {\n  path: '/lecturer/course/:id',\n  name: 'CourseDetail',\n  component: CourseDetail,\n  meta: {\n    requiresAuth: true,\n    role: 'lecturer'\n  }\n}, {\n  path: '/lecturer/student/:id',\n  name: 'StudentDetail',\n  component: StudentDetail,\n  meta: {\n    requiresAuth: true,\n    role: 'lecturer'\n  }\n}, {\n  path: '/lecturer/assessment/create',\n  name: 'CreateAssessment',\n  component: AssessmentForm,\n  meta: {\n    requiresAuth: true,\n    role: 'lecturer'\n  }\n}, {\n  path: '/lecturer/assessment/edit/:id',\n  name: 'EditAssessment',\n  component: AssessmentForm,\n  meta: {\n    requiresAuth: true,\n    role: 'lecturer'\n  }\n},\n// Student routes\n{\n  path: '/student/dashboard',\n  name: 'StudentDashboard',\n  component: StudentDashboard,\n  meta: {\n    requiresAuth: true,\n    role: 'student'\n  }\n}, {\n  path: '/student/course/:id',\n  name: 'StudentMarksView',\n  component: StudentMarksView,\n  meta: {\n    requiresAuth: true,\n    role: 'student'\n  }\n}, {\n  path: '/student/simulation/:id',\n  name: 'StudentSimulation',\n  component: StudentSimulation,\n  meta: {\n    requiresAuth: true,\n    role: 'student'\n  }\n},\n// Advisor routes\n{\n  path: '/advisor/dashboard',\n  name: 'AdvisorDashboard',\n  component: AdvisorDashboard,\n  meta: {\n    requiresAuth: true,\n    role: 'advisor'\n  }\n}, {\n  path: '/advisor/advisees',\n  name: 'AdviseeList',\n  component: AdviseeList,\n  meta: {\n    requiresAuth: true,\n    role: 'advisor'\n  }\n}, {\n  path: '/advisor/advisee/:id',\n  name: 'AdviseeDetail',\n  component: AdviseeDetail,\n  meta: {\n    requiresAuth: true,\n    role: 'advisor'\n  }\n},\n// 404 page\n{\n  path: '/:pathMatch(.*)*',\n  name: 'NotFound',\n  component: NotFound\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\n// Navigation guards\nrouter.beforeEach((to, from, next) => {\n  const isAuthenticated = store.getters['auth/isAuthenticated'];\n  const userRole = store.getters['auth/userRole'];\n\n  // Check if the route requires authentication\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    if (!isAuthenticated) {\n      next({\n        name: 'Login'\n      });\n    } else if (to.meta.role && to.meta.role !== userRole) {\n      // Redirect to the appropriate dashboard if role doesn't match\n      next({\n        path: '/'\n      });\n    } else {\n      next();\n    }\n  }\n  // Check if the route requires guest access (like login page)\n  else if (to.matched.some(record => record.meta.requiresGuest)) {\n    if (isAuthenticated) {\n      next({\n        path: '/'\n      });\n    } else {\n      next();\n    }\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","store","Login","Register","LecturerDashboard","StudentDashboard","AdvisorDashboard","CourseDetail","StudentDetail","AssessmentForm","StudentMarksView","StudentSimulation","AdviseeList","AdviseeDetail","NotFound","routes","path","redirect","to","userRole","getters","name","component","meta","requiresGuest","requiresAuth","role","router","history","process","env","BASE_URL","beforeEach","from","next","isAuthenticated","matched","some","record"],"sources":["C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router'\r\nimport store from '../store'\r\n\r\n// Lazy-loaded components\r\nconst Login = () => import('../views/Login.vue')\r\nconst Register = () => import('../views/Register.vue')\r\nconst LecturerDashboard = () => import('../views/lecturer/Dashboard.vue')\r\nconst StudentDashboard = () => import('../views/student/Dashboard.vue')\r\nconst AdvisorDashboard = () => import('../views/advisor/Dashboard.vue')\r\nconst CourseDetail = () => import('../views/lecturer/CourseDetail.vue')\r\nconst StudentDetail = () => import('../views/lecturer/StudentDetail.vue')\r\nconst AssessmentForm = () => import('../views/lecturer/AssessmentForm.vue')\r\nconst StudentMarksView = () => import('../views/student/CourseMarks.vue')\r\nconst StudentSimulation = () => import('../views/student/MarkSimulation.vue')\r\nconst AdviseeList = () => import('../views/advisor/AdviseeList.vue')\r\nconst AdviseeDetail = () => import('../views/advisor/AdviseeDetail.vue')\r\nconst NotFound = () => import('../views/NotFound.vue')\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    redirect: to => {\r\n      const userRole = store.getters['auth/userRole'];\r\n      if (userRole === 'lecturer') {\r\n        return '/lecturer/dashboard';\r\n      } else if (userRole === 'student') {\r\n        return '/student/dashboard';\r\n      } else if (userRole === 'advisor') {\r\n        return '/advisor/dashboard';\r\n      } else {\r\n        return '/login';\r\n      }\r\n    }\r\n  },\r\n  {\r\n    path: '/login',\r\n    name: 'Login',\r\n    component: Login,\r\n    meta: { requiresGuest: true }\r\n  },\r\n  {\r\n    path: '/register',\r\n    name: 'Register',\r\n    component: Register,\r\n    meta: { requiresGuest: true }\r\n  },\r\n  // Lecturer routes\r\n  {\r\n    path: '/lecturer/dashboard',\r\n    name: 'LecturerDashboard',\r\n    component: LecturerDashboard,\r\n    meta: { requiresAuth: true, role: 'lecturer' }\r\n  },\r\n  {\r\n    path: '/lecturer/course/:id',\r\n    name: 'CourseDetail',\r\n    component: CourseDetail,\r\n    meta: { requiresAuth: true, role: 'lecturer' }\r\n  },\r\n  {\r\n    path: '/lecturer/student/:id',\r\n    name: 'StudentDetail',\r\n    component: StudentDetail,\r\n    meta: { requiresAuth: true, role: 'lecturer' }\r\n  },\r\n  {\r\n    path: '/lecturer/assessment/create',\r\n    name: 'CreateAssessment',\r\n    component: AssessmentForm,\r\n    meta: { requiresAuth: true, role: 'lecturer' }\r\n  },\r\n  {\r\n    path: '/lecturer/assessment/edit/:id',\r\n    name: 'EditAssessment',\r\n    component: AssessmentForm,\r\n    meta: { requiresAuth: true, role: 'lecturer' }\r\n  },\r\n  // Student routes\r\n  {\r\n    path: '/student/dashboard',\r\n    name: 'StudentDashboard',\r\n    component: StudentDashboard,\r\n    meta: { requiresAuth: true, role: 'student' }\r\n  },\r\n  {\r\n    path: '/student/course/:id',\r\n    name: 'StudentMarksView',\r\n    component: StudentMarksView,\r\n    meta: { requiresAuth: true, role: 'student' }\r\n  },\r\n  {\r\n    path: '/student/simulation/:id',\r\n    name: 'StudentSimulation',\r\n    component: StudentSimulation,\r\n    meta: { requiresAuth: true, role: 'student' }\r\n  },\r\n  // Advisor routes\r\n  {\r\n    path: '/advisor/dashboard',\r\n    name: 'AdvisorDashboard',\r\n    component: AdvisorDashboard,\r\n    meta: { requiresAuth: true, role: 'advisor' }\r\n  },\r\n  {\r\n    path: '/advisor/advisees',\r\n    name: 'AdviseeList',\r\n    component: AdviseeList,\r\n    meta: { requiresAuth: true, role: 'advisor' }\r\n  },\r\n  {\r\n    path: '/advisor/advisee/:id',\r\n    name: 'AdviseeDetail',\r\n    component: AdviseeDetail,\r\n    meta: { requiresAuth: true, role: 'advisor' }\r\n  },\r\n  // 404 page\r\n  {\r\n    path: '/:pathMatch(.*)*',\r\n    name: 'NotFound',\r\n    component: NotFound\r\n  }\r\n]\r\n\r\nconst router = createRouter({\r\n  history: createWebHistory(process.env.BASE_URL),\r\n  routes\r\n})\r\n\r\n// Navigation guards\r\nrouter.beforeEach((to, from, next) => {\r\n  const isAuthenticated = store.getters['auth/isAuthenticated'];\r\n  const userRole = store.getters['auth/userRole'];\r\n  \r\n  // Check if the route requires authentication\r\n  if (to.matched.some(record => record.meta.requiresAuth)) {\r\n    if (!isAuthenticated) {\r\n      next({ name: 'Login' });\r\n    } else if (to.meta.role && to.meta.role !== userRole) {\r\n      // Redirect to the appropriate dashboard if role doesn't match\r\n      next({ path: '/' });\r\n    } else {\r\n      next();\r\n    }\r\n  }\r\n  // Check if the route requires guest access (like login page)\r\n  else if (to.matched.some(record => record.meta.requiresGuest)) {\r\n    if (isAuthenticated) {\r\n      next({ path: '/' });\r\n    } else {\r\n      next();\r\n    }\r\n  }\r\n  else {\r\n    next();\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}