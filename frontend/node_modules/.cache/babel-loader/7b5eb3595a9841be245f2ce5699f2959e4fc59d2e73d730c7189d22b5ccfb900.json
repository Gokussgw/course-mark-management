{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = [\"height\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"canvas\", {\n    ref: \"chartCanvas\",\n    height: $props.height\n  }, null, 8 /* PROPS */, _hoisted_1)]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","ref","height","$props"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\NEW\\course-mark-management\\frontend\\src\\components\\charts\\ComponentChart.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <canvas ref=\"chartCanvas\" :height=\"height\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Chart from 'chart.js/auto'\r\n\r\nexport default {\r\n  name: 'ComponentChart',\r\n  props: {\r\n    components: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    height: {\r\n      type: Number,\r\n      default: 300\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      chart: null\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.createChart()\r\n    })\r\n  },\r\n  watch: {\r\n    components: {\r\n      handler() {\r\n        if (this.chart) {\r\n          this.updateChart()\r\n        }\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    this.destroyChart()\r\n  },\r\n  methods: {\r\n    destroyChart() {\r\n      if (this.chart) {\r\n        this.chart.destroy()\r\n        this.chart = null\r\n      }\r\n    },\r\n    createChart() {\r\n      // Ensure canvas exists and is not already used\r\n      if (!this.$refs.chartCanvas) {\r\n        console.warn('Canvas ref not available for ComponentChart')\r\n        return\r\n      }\r\n\r\n      // Destroy existing chart if any\r\n      this.destroyChart()\r\n      \r\n      const ctx = this.$refs.chartCanvas.getContext('2d')\r\n      \r\n      const data = {\r\n        labels: this.components.map(comp => comp.name),\r\n        datasets: [{\r\n          label: 'Component Weightage',\r\n          data: this.components.map(comp => comp.weightage),\r\n          backgroundColor: [\r\n            '#28a745', // Assignment - Green\r\n            '#17a2b8', // Quiz - Cyan\r\n            '#ffc107', // Test - Yellow\r\n            '#dc3545'  // Final Exam - Red\r\n          ],\r\n          borderColor: [\r\n            '#1e7e34',\r\n            '#138496',\r\n            '#e0a800',\r\n            '#c82333'\r\n          ],\r\n          borderWidth: 2\r\n        }]\r\n      }\r\n\r\n      const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Standard Component Distribution',\r\n            font: {\r\n              size: 16,\r\n              weight: 'bold'\r\n            }\r\n          },\r\n          legend: {\r\n            display: false\r\n          },\r\n          tooltip: {\r\n            callbacks: {\r\n              label: function(context) {\r\n                return `${context.label}: ${context.parsed}%`\r\n              }\r\n            }\r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n            max: 35,\r\n            ticks: {\r\n              callback: function(value) {\r\n                return value + '%'\r\n              }\r\n            },\r\n            title: {\r\n              display: true,\r\n              text: 'Weightage (%)'\r\n            }\r\n          },\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'Component Types'\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this.chart = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: data,\r\n        options: options\r\n      })\r\n    },\r\n    updateChart() {\r\n      if (this.chart) {\r\n        this.chart.data.labels = this.components.map(comp => comp.name)\r\n        this.chart.data.datasets[0].data = this.components.map(comp => comp.weightage)\r\n        this.chart.update()\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\ncanvas {\r\n  max-height: 100%;\r\n}\r\n</style>\r\n"],"mappings":";;;uBACEA,mBAAA,CAEM,cADJC,mBAAA,CAAoD;IAA5CC,GAAG,EAAC,aAAa;IAAEC,MAAM,EAAEC,MAAA,CAAAD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}