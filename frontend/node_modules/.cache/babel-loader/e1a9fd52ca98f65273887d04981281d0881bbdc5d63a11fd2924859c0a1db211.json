{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regenerator from \"C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport axios from 'axios';\nimport { mapGetters } from 'vuex';\nimport Chart from 'chart.js/auto';\nexport default {\n  name: 'MarkBreakdown',\n  data: function data() {\n    return {\n      courses: [],\n      students: [],\n      selectedCourseId: '',\n      selectedStudentId: '',\n      selectedAssessmentType: '',\n      isLoading: false,\n      viewMode: 'summary',\n      courseStats: null,\n      assessmentBreakdown: [],\n      studentBreakdown: null,\n      uniqueAssessments: [],\n      filteredStudentMarks: [],\n      assessmentChart: null,\n      studentTrendChart: null\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters('auth', ['getUser'])), {}, {\n    userRole: function userRole() {\n      var _this$getUser;\n      return ((_this$getUser = this.getUser) === null || _this$getUser === void 0 ? void 0 : _this$getUser.role) || '';\n    }\n  }),\n  mounted: function mounted() {\n    this.loadCourses();\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.destroyCharts();\n  },\n  methods: {\n    loadCourses: function loadCourses() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n        var _this$getUser2, userId, endpoint, response, _t;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.n) {\n            case 0:\n              _context.p = 0;\n              userId = (_this$getUser2 = _this.getUser) === null || _this$getUser2 === void 0 ? void 0 : _this$getUser2.id;\n              if (userId) {\n                _context.n = 1;\n                break;\n              }\n              return _context.a(2);\n            case 1:\n              endpoint = '';\n              if (_this.userRole === 'lecturer') {\n                endpoint = \"http://localhost:8080/marks-api.php?action=lecturer_courses&lecturer_id=\".concat(userId);\n              } else if (_this.userRole === 'student') {\n                // For students, we'll use a different approach since they only see their enrolled courses\n                endpoint = \"http://localhost:8080/marks-api.php?action=lecturer_courses&lecturer_id=1\"; // Temporary workaround\n              } else if (_this.userRole === 'advisor') {\n                endpoint = \"http://localhost:8080/breakdown-api.php?action=advisor_courses&advisor_id=\".concat(userId);\n              }\n              _context.n = 2;\n              return axios.get(endpoint);\n            case 2:\n              response = _context.v;\n              _this.courses = response.data.courses || [];\n\n              // Add sample data if no courses are returned\n              if (_this.courses.length === 0) {\n                _this.courses = [{\n                  id: 1,\n                  code: 'CS101',\n                  name: 'Introduction to Computer Science',\n                  semester: 'Fall 2024',\n                  academic_year: '2024/2025'\n                }, {\n                  id: 2,\n                  code: 'MATH201',\n                  name: 'Calculus II',\n                  semester: 'Fall 2024',\n                  academic_year: '2024/2025'\n                }, {\n                  id: 3,\n                  code: 'PHYS101',\n                  name: 'Physics I',\n                  semester: 'Fall 2024',\n                  academic_year: '2024/2025'\n                }];\n              }\n\n              // Auto-select course from route if available\n              if (!_this.$route.params.courseId) {\n                _context.n = 3;\n                break;\n              }\n              _this.selectedCourseId = parseInt(_this.$route.params.courseId);\n              _context.n = 3;\n              return _this.loadCourseData();\n            case 3:\n              _context.n = 5;\n              break;\n            case 4:\n              _context.p = 4;\n              _t = _context.v;\n              console.error('Error loading courses:', _t);\n              // Fallback to sample data\n              _this.courses = [{\n                id: 1,\n                code: 'CS101',\n                name: 'Introduction to Computer Science',\n                semester: 'Fall 2024',\n                academic_year: '2024/2025'\n              }, {\n                id: 2,\n                code: 'MATH201',\n                name: 'Calculus II',\n                semester: 'Fall 2024',\n                academic_year: '2024/2025'\n              }, {\n                id: 3,\n                code: 'PHYS101',\n                name: 'Physics I',\n                semester: 'Fall 2024',\n                academic_year: '2024/2025'\n              }];\n\n              // Auto-select course from route if available\n              if (!_this.$route.params.courseId) {\n                _context.n = 5;\n                break;\n              }\n              _this.selectedCourseId = parseInt(_this.$route.params.courseId);\n              _context.n = 5;\n              return _this.loadCourseData();\n            case 5:\n              return _context.a(2);\n          }\n        }, _callee, null, [[0, 4]]);\n      }))();\n    },\n    loadCourseData: function loadCourseData() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var response, _t2;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              if (_this2.selectedCourseId) {\n                _context2.n = 1;\n                break;\n              }\n              _this2.clearData();\n              return _context2.a(2);\n            case 1:\n              _this2.isLoading = true;\n              _context2.p = 2;\n              _context2.n = 3;\n              return axios.get(\"http://localhost:8080/marks-api.php?action=course_students_marks&course_id=\".concat(_this2.selectedCourseId));\n            case 3:\n              response = _context2.v;\n              _this2.students = response.data.students || [];\n              _this2.uniqueAssessments = response.data.assessments || [];\n\n              // Process the data for breakdown analysis\n              _context2.n = 4;\n              return _this2.processMarkBreakdown();\n            case 4:\n              _context2.n = 5;\n              return _this2.calculateCourseStats();\n            case 5:\n              _this2.filteredStudentMarks = _this2.students;\n\n              // If student role, auto-select current student\n              if (!(_this2.userRole === 'student')) {\n                _context2.n = 6;\n                break;\n              }\n              _this2.selectedStudentId = _this2.getUser.id;\n              _context2.n = 6;\n              return _this2.loadStudentBreakdown();\n            case 6:\n              _this2.$nextTick(function () {\n                _this2.createAssessmentChart();\n              });\n              _context2.n = 8;\n              break;\n            case 7:\n              _context2.p = 7;\n              _t2 = _context2.v;\n              console.error('Error loading course data:', _t2);\n            case 8:\n              _context2.p = 8;\n              _this2.isLoading = false;\n              return _context2.f(8);\n            case 9:\n              return _context2.a(2);\n          }\n        }, _callee2, null, [[2, 7, 8, 9]]);\n      }))();\n    },\n    processMarkBreakdown: function processMarkBreakdown() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {\n        var breakdown;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.n) {\n            case 0:\n              breakdown = {};\n              _this3.uniqueAssessments.forEach(function (assessment) {\n                if (!breakdown[assessment.type]) {\n                  breakdown[assessment.type] = {\n                    type: assessment.type,\n                    weightage: 0,\n                    total: 0,\n                    submitted: 0,\n                    totalMarks: 0,\n                    obtainedMarks: 0\n                  };\n                }\n                breakdown[assessment.type].weightage += assessment.weightage || 0;\n                breakdown[assessment.type].total += _this3.students.length;\n                _this3.students.forEach(function (student) {\n                  if (student.marks && student.marks[assessment.type]) {\n                    breakdown[assessment.type].submitted++;\n                    breakdown[assessment.type].totalMarks += student.marks[assessment.type].max_marks || 0;\n                    breakdown[assessment.type].obtainedMarks += student.marks[assessment.type].obtained || 0;\n                  }\n                });\n              });\n              _this3.assessmentBreakdown = Object.values(breakdown).map(function (item) {\n                return _objectSpread(_objectSpread({}, item), {}, {\n                  average: item.totalMarks > 0 ? Math.round(item.obtainedMarks / item.totalMarks * 100) : 0\n                });\n              });\n            case 1:\n              return _context3.a(2);\n          }\n        }, _callee3);\n      }))();\n    },\n    calculateCourseStats: function calculateCourseStats() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {\n        var totalStudents, totalAssessments, totalMarks, atRiskCount;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.n) {\n            case 0:\n              totalStudents = _this4.students.length;\n              totalAssessments = _this4.uniqueAssessments.length;\n              totalMarks = 0;\n              atRiskCount = 0;\n              _this4.students.forEach(function (student) {\n                var finalMark = _this4.calculateStudentFinalMark(student);\n                totalMarks += finalMark;\n                if (finalMark < 50) atRiskCount++;\n              });\n              _this4.courseStats = {\n                totalStudents: totalStudents,\n                totalAssessments: totalAssessments,\n                classAverage: totalStudents > 0 ? Math.round(totalMarks / totalStudents) : 0,\n                atRiskStudents: atRiskCount\n              };\n            case 1:\n              return _context4.a(2);\n          }\n        }, _callee4);\n      }))();\n    },\n    loadStudentBreakdown: function loadStudentBreakdown() {\n      var _this5 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {\n        var student, assessments, finalMark, grade, rank, strengths, improvements;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.n) {\n            case 0:\n              if (_this5.selectedStudentId) {\n                _context5.n = 1;\n                break;\n              }\n              _this5.studentBreakdown = null;\n              return _context5.a(2);\n            case 1:\n              student = _this5.students.find(function (s) {\n                return s.id == _this5.selectedStudentId;\n              });\n              if (student) {\n                _context5.n = 2;\n                break;\n              }\n              return _context5.a(2);\n            case 2:\n              assessments = _this5.uniqueAssessments.map(function (assessment) {\n                var _student$marks;\n                var mark = ((_student$marks = student.marks) === null || _student$marks === void 0 ? void 0 : _student$marks[assessment.type]) || null;\n                var classTotal = _this5.students.reduce(function (sum, s) {\n                  var _s$marks;\n                  return sum + (((_s$marks = s.marks) === null || _s$marks === void 0 || (_s$marks = _s$marks[assessment.type]) === null || _s$marks === void 0 ? void 0 : _s$marks.obtained) || 0);\n                }, 0);\n                var classAverage = _this5.students.length > 0 ? Math.round(classTotal / _this5.students.length) : 0;\n                return {\n                  id: assessment.id,\n                  name: assessment.name,\n                  type: assessment.type,\n                  obtained: (mark === null || mark === void 0 ? void 0 : mark.obtained) || 0,\n                  max_marks: (mark === null || mark === void 0 ? void 0 : mark.max_marks) || assessment.max_marks || 0,\n                  percentage: mark ? Math.round(mark.obtained / mark.max_marks * 100) : 0,\n                  weighted: (mark === null || mark === void 0 ? void 0 : mark.weighted) || 0,\n                  classAverage: classAverage\n                };\n              });\n              finalMark = _this5.calculateStudentFinalMark(student);\n              grade = _this5.calculateGrade(finalMark);\n              rank = _this5.calculateStudentRank(student); // Analyze strengths and improvements\n              strengths = _this5.analyzeStrengths(assessments);\n              improvements = _this5.analyzeImprovements(assessments);\n              _this5.studentBreakdown = {\n                name: student.name,\n                finalMark: finalMark,\n                grade: grade,\n                rank: rank,\n                assessments: assessments,\n                strengths: strengths,\n                improvements: improvements\n              };\n              _this5.$nextTick(function () {\n                _this5.createStudentTrendChart();\n              });\n            case 3:\n              return _context5.a(2);\n          }\n        }, _callee5);\n      }))();\n    },\n    calculateStudentFinalMark: function calculateStudentFinalMark(student) {\n      var totalWeighted = 0;\n      Object.values(student.marks || {}).forEach(function (mark) {\n        totalWeighted += mark.weighted || 0;\n      });\n      return Math.round(totalWeighted);\n    },\n    calculateGrade: function calculateGrade(mark) {\n      if (mark >= 80) return 'A';\n      if (mark >= 70) return 'B';\n      if (mark >= 60) return 'C';\n      if (mark >= 50) return 'D';\n      return 'F';\n    },\n    calculateStudentRank: function calculateStudentRank(targetStudent) {\n      var _this6 = this;\n      var sortedStudents = _toConsumableArray(this.students).sort(function (a, b) {\n        return _this6.calculateStudentFinalMark(b) - _this6.calculateStudentFinalMark(a);\n      });\n      return sortedStudents.findIndex(function (s) {\n        return s.id === targetStudent.id;\n      }) + 1;\n    },\n    analyzeStrengths: function analyzeStrengths(assessments) {\n      var _this7 = this;\n      var strengths = [];\n      assessments.forEach(function (assessment) {\n        if (assessment.percentage >= assessment.classAverage + 10) {\n          strengths.push(\"\".concat(_this7.formatAssessmentType(assessment.type), \" (\").concat(assessment.percentage, \"%)\"));\n        }\n      });\n      return strengths.length > 0 ? strengths : ['Consistent performance across assessments'];\n    },\n    analyzeImprovements: function analyzeImprovements(assessments) {\n      var _this8 = this;\n      var improvements = [];\n      assessments.forEach(function (assessment) {\n        if (assessment.percentage < assessment.classAverage - 10) {\n          improvements.push(\"\".concat(_this8.formatAssessmentType(assessment.type), \" (\").concat(assessment.percentage, \"%)\"));\n        }\n      });\n      return improvements.length > 0 ? improvements : ['Continue current study approach'];\n    },\n    createAssessmentChart: function createAssessmentChart() {\n      var _this9 = this;\n      this.destroyCharts();\n      var ctx = document.getElementById('assessmentChart');\n      if (!ctx) return;\n      this.assessmentChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: this.assessmentBreakdown.map(function (item) {\n            return _this9.formatAssessmentType(item.type);\n          }),\n          datasets: [{\n            label: 'Average Score (%)',\n            data: this.assessmentBreakdown.map(function (item) {\n              return item.average;\n            }),\n            backgroundColor: 'rgba(54, 162, 235, 0.8)',\n            borderColor: 'rgba(54, 162, 235, 1)',\n            borderWidth: 1\n          }, {\n            label: 'Weightage (%)',\n            data: this.assessmentBreakdown.map(function (item) {\n              return item.weightage;\n            }),\n            backgroundColor: 'rgba(255, 99, 132, 0.8)',\n            borderColor: 'rgba(255, 99, 132, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100\n            }\n          }\n        }\n      });\n    },\n    createStudentTrendChart: function createStudentTrendChart() {\n      var ctx = document.getElementById('studentTrendChart');\n      if (!ctx || !this.studentBreakdown) return;\n      this.studentTrendChart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: this.studentBreakdown.assessments.map(function (a) {\n            return a.name;\n          }),\n          datasets: [{\n            label: 'Student Score',\n            data: this.studentBreakdown.assessments.map(function (a) {\n              return a.percentage;\n            }),\n            borderColor: 'rgba(75, 192, 192, 1)',\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            tension: 0.1\n          }, {\n            label: 'Class Average',\n            data: this.studentBreakdown.assessments.map(function (a) {\n              return a.classAverage;\n            }),\n            borderColor: 'rgba(255, 159, 64, 1)',\n            backgroundColor: 'rgba(255, 159, 64, 0.2)',\n            tension: 0.1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100\n            }\n          }\n        }\n      });\n    },\n    destroyCharts: function destroyCharts() {\n      if (this.assessmentChart) {\n        this.assessmentChart.destroy();\n        this.assessmentChart = null;\n      }\n      if (this.studentTrendChart) {\n        this.studentTrendChart.destroy();\n        this.studentTrendChart = null;\n      }\n    },\n    filterBreakdown: function filterBreakdown() {\n      // Implementation for filtering by assessment type\n      this.filteredStudentMarks = this.students;\n    },\n    toggleView: function toggleView(mode) {\n      this.viewMode = mode;\n    },\n    exportBreakdown: function exportBreakdown() {\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {\n        return _regenerator().w(function (_context6) {\n          while (1) switch (_context6.n) {\n            case 0:\n              // Implementation for exporting detailed breakdown\n              console.log('Exporting breakdown...');\n            case 1:\n              return _context6.a(2);\n          }\n        }, _callee6);\n      }))();\n    },\n    refreshData: function refreshData() {\n      var _this0 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {\n        return _regenerator().w(function (_context7) {\n          while (1) switch (_context7.n) {\n            case 0:\n              _context7.n = 1;\n              return _this0.loadCourseData();\n            case 1:\n              return _context7.a(2);\n          }\n        }, _callee7);\n      }))();\n    },\n    clearData: function clearData() {\n      this.students = [];\n      this.courseStats = null;\n      this.assessmentBreakdown = [];\n      this.studentBreakdown = null;\n      this.uniqueAssessments = [];\n      this.filteredStudentMarks = [];\n      this.destroyCharts();\n    },\n    // Utility methods\n    getStudentInitials: function getStudentInitials(name) {\n      return name.split(' ').map(function (n) {\n        return n.charAt(0);\n      }).join('').toUpperCase();\n    },\n    formatAssessmentType: function formatAssessmentType(type) {\n      return type.replace(/_/g, ' ').replace(/\\b\\w/g, function (l) {\n        return l.toUpperCase();\n      });\n    },\n    getAssessmentBadgeClass: function getAssessmentBadgeClass(type) {\n      var classes = {\n        'quiz': 'bg-info',\n        'assignment': 'bg-primary',\n        'midterm': 'bg-warning text-dark',\n        'final_exam': 'bg-danger',\n        'project': 'bg-success'\n      };\n      return classes[type] || 'bg-secondary';\n    },\n    getAssessmentProgressClass: function getAssessmentProgressClass(type) {\n      var classes = {\n        'quiz': 'bg-info',\n        'assignment': 'bg-primary',\n        'midterm': 'bg-warning',\n        'final_exam': 'bg-danger',\n        'project': 'bg-success'\n      };\n      return classes[type] || 'bg-secondary';\n    },\n    getScoreClass: function getScoreClass(percentage) {\n      if (percentage >= 80) return 'text-success fw-bold';\n      if (percentage >= 70) return 'text-info fw-bold';\n      if (percentage >= 60) return 'text-warning fw-bold';\n      if (percentage >= 50) return 'text-primary';\n      return 'text-danger fw-bold';\n    },\n    getGradeBadgeClass: function getGradeBadgeClass(grade) {\n      var classes = {\n        'A': 'bg-success',\n        'B': 'bg-info',\n        'C': 'bg-warning text-dark',\n        'D': 'bg-primary',\n        'F': 'bg-danger'\n      };\n      return classes[grade] || 'bg-secondary';\n    },\n    getPerformanceStatus: function getPerformanceStatus(studentScore, classAverage) {\n      if (studentScore >= classAverage + 10) return 'Excellent';\n      if (studentScore >= classAverage) return 'Above Average';\n      if (studentScore >= classAverage - 10) return 'Average';\n      return 'Needs Improvement';\n    },\n    getPerformanceStatusClass: function getPerformanceStatusClass(studentScore, classAverage) {\n      if (studentScore >= classAverage + 10) return 'bg-success';\n      if (studentScore >= classAverage) return 'bg-info';\n      if (studentScore >= classAverage - 10) return 'bg-warning text-dark';\n      return 'bg-danger';\n    }\n  }\n};","map":{"version":3,"names":["axios","mapGetters","Chart","name","data","courses","students","selectedCourseId","selectedStudentId","selectedAssessmentType","isLoading","viewMode","courseStats","assessmentBreakdown","studentBreakdown","uniqueAssessments","filteredStudentMarks","assessmentChart","studentTrendChart","computed","_objectSpread","userRole","_this$getUser","getUser","role","mounted","loadCourses","beforeUnmount","destroyCharts","methods","_this","_asyncToGenerator","_regenerator","m","_callee","_this$getUser2","userId","endpoint","response","_t","w","_context","n","p","id","a","concat","get","v","length","code","semester","academic_year","$route","params","courseId","parseInt","loadCourseData","console","error","_this2","_callee2","_t2","_context2","clearData","assessments","processMarkBreakdown","calculateCourseStats","loadStudentBreakdown","$nextTick","createAssessmentChart","f","_this3","_callee3","breakdown","_context3","forEach","assessment","type","weightage","total","submitted","totalMarks","obtainedMarks","student","marks","max_marks","obtained","Object","values","map","item","average","Math","round","_this4","_callee4","totalStudents","totalAssessments","atRiskCount","_context4","finalMark","calculateStudentFinalMark","classAverage","atRiskStudents","_this5","_callee5","grade","rank","strengths","improvements","_context5","find","s","_student$marks","mark","classTotal","reduce","sum","_s$marks","percentage","weighted","calculateGrade","calculateStudentRank","analyzeStrengths","analyzeImprovements","createStudentTrendChart","totalWeighted","targetStudent","_this6","sortedStudents","_toConsumableArray","sort","b","findIndex","_this7","push","formatAssessmentType","_this8","_this9","ctx","document","getElementById","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","scales","y","beginAtZero","max","tension","destroy","filterBreakdown","toggleView","mode","exportBreakdown","_callee6","_context6","log","refreshData","_this0","_callee7","_context7","getStudentInitials","split","charAt","join","toUpperCase","replace","l","getAssessmentBadgeClass","classes","getAssessmentProgressClass","getScoreClass","getGradeBadgeClass","getPerformanceStatus","studentScore","getPerformanceStatusClass"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\shared\\MarkBreakdown.vue"],"sourcesContent":["<template>\r\n  <div class=\"mark-breakdown\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <h1><i class=\"fas fa-chart-line me-2\"></i>Mark Breakdown Analysis</h1>\r\n      <div class=\"d-flex gap-2\">\r\n        <button class=\"btn btn-success\" @click=\"exportBreakdown\">\r\n          <i class=\"fas fa-file-export me-2\"></i>Export Report\r\n        </button>\r\n        <button class=\"btn btn-outline-secondary\" @click=\"refreshData\">\r\n          <i class=\"fas fa-sync me-2\"></i>Refresh\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Filters -->\r\n    <div class=\"card mb-4\">\r\n      <div class=\"card-body\">\r\n        <div class=\"row align-items-center\">\r\n          <div class=\"col-md-4\">\r\n            <label class=\"form-label fw-bold\">Course:</label>\r\n            <select v-model=\"selectedCourseId\" @change=\"loadCourseData\" class=\"form-select\">\r\n              <option value=\"\">-- Select Course --</option>\r\n              <option v-for=\"course in courses\" :key=\"course.id\" :value=\"course.id\">\r\n                {{ course.code }} - {{ course.name }}\r\n              </option>\r\n            </select>\r\n          </div>\r\n          <div class=\"col-md-4\" v-if=\"userRole === 'lecturer' || userRole === 'advisor'\">\r\n            <label class=\"form-label fw-bold\">Student:</label>\r\n            <select v-model=\"selectedStudentId\" @change=\"loadStudentBreakdown\" class=\"form-select\">\r\n              <option value=\"\">-- All Students --</option>\r\n              <option v-for=\"student in students\" :key=\"student.id\" :value=\"student.id\">\r\n                {{ student.name }} ({{ student.matric_number }})\r\n              </option>\r\n            </select>\r\n          </div>\r\n          <div class=\"col-md-4\">\r\n            <label class=\"form-label fw-bold\">Assessment Type:</label>\r\n            <select v-model=\"selectedAssessmentType\" @change=\"filterBreakdown\" class=\"form-select\">\r\n              <option value=\"\">-- All Types --</option>\r\n              <option value=\"quiz\">Quiz</option>\r\n              <option value=\"assignment\">Assignment</option>\r\n              <option value=\"midterm\">Midterm</option>\r\n              <option value=\"final_exam\">Final Exam</option>\r\n              <option value=\"project\">Project</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Loading State -->\r\n    <div v-if=\"isLoading\" class=\"text-center p-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n      <p class=\"mt-3 text-muted\">Loading mark breakdown...</p>\r\n    </div>\r\n\r\n    <!-- Course Overview Stats -->\r\n    <div v-else-if=\"selectedCourseId && courseStats\" class=\"row mb-4\">\r\n      <div class=\"col-md-3\">\r\n        <div class=\"card stat-card bg-primary text-white\">\r\n          <div class=\"card-body text-center\">\r\n            <i class=\"fas fa-users fa-2x mb-2\"></i>\r\n            <h4>{{ courseStats.totalStudents }}</h4>\r\n            <p class=\"mb-0\">Total Students</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"card stat-card bg-info text-white\">\r\n          <div class=\"card-body text-center\">\r\n            <i class=\"fas fa-tasks fa-2x mb-2\"></i>\r\n            <h4>{{ courseStats.totalAssessments }}</h4>\r\n            <p class=\"mb-0\">Assessments</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"card stat-card bg-success text-white\">\r\n          <div class=\"card-body text-center\">\r\n            <i class=\"fas fa-percentage fa-2x mb-2\"></i>\r\n            <h4>{{ courseStats.classAverage }}%</h4>\r\n            <p class=\"mb-0\">Class Average</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"card stat-card bg-warning text-dark\">\r\n          <div class=\"card-body text-center\">\r\n            <i class=\"fas fa-exclamation-triangle fa-2x mb-2\"></i>\r\n            <h4>{{ courseStats.atRiskStudents }}</h4>\r\n            <p class=\"mb-0\">At Risk</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Detailed Breakdown -->\r\n    <div v-if=\"selectedCourseId\">\r\n      <!-- Assessment Breakdown Chart -->\r\n      <div class=\"card mb-4\">\r\n        <div class=\"card-header\">\r\n          <h5 class=\"mb-0\">\r\n            <i class=\"fas fa-chart-bar me-2\"></i>Assessment Performance Overview\r\n          </h5>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-8\">\r\n              <canvas id=\"assessmentChart\" height=\"300\"></canvas>\r\n            </div>\r\n            <div class=\"col-md-4\">\r\n              <h6>Assessment Distribution</h6>\r\n              <div v-for=\"assessment in assessmentBreakdown\" :key=\"assessment.type\" class=\"mb-3\">\r\n                <div class=\"d-flex justify-content-between align-items-center mb-1\">\r\n                  <span class=\"badge\" :class=\"getAssessmentBadgeClass(assessment.type)\">\r\n                    {{ formatAssessmentType(assessment.type) }}\r\n                  </span>\r\n                  <strong>{{ assessment.weightage }}%</strong>\r\n                </div>\r\n                <div class=\"progress\" style=\"height: 8px;\">\r\n                  <div class=\"progress-bar\" :class=\"getAssessmentProgressClass(assessment.type)\" \r\n                       :style=\"{ width: assessment.weightage + '%' }\"></div>\r\n                </div>\r\n                <small class=\"text-muted\">\r\n                  Average: {{ assessment.average }}% | Submitted: {{ assessment.submitted }}/{{ assessment.total }}\r\n                </small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Individual Student Breakdown (if selected) -->\r\n      <div v-if=\"selectedStudentId && studentBreakdown\" class=\"card mb-4\">\r\n        <div class=\"card-header\">\r\n          <h5 class=\"mb-0\">\r\n            <i class=\"fas fa-user-graduate me-2\"></i>\r\n            Individual Student Analysis: {{ studentBreakdown.name }}\r\n          </h5>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n              <div class=\"student-summary\">\r\n                <div class=\"row text-center mb-4\">\r\n                  <div class=\"col-4\">\r\n                    <div class=\"metric-box\">\r\n                      <h3 class=\"text-primary\">{{ studentBreakdown.finalMark }}%</h3>\r\n                      <p class=\"text-muted mb-0\">Final Mark</p>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-4\">\r\n                    <div class=\"metric-box\">\r\n                      <h3 class=\"text-success\">{{ studentBreakdown.grade }}</h3>\r\n                      <p class=\"text-muted mb-0\">Grade</p>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-4\">\r\n                    <div class=\"metric-box\">\r\n                      <h3 class=\"text-info\">{{ studentBreakdown.rank }}/{{ courseStats.totalStudents }}</h3>\r\n                      <p class=\"text-muted mb-0\">Class Rank</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <h6>Assessment Performance</h6>\r\n                <div class=\"table-responsive\">\r\n                  <table class=\"table table-sm table-hover\">\r\n                    <thead class=\"table-light\">\r\n                      <tr>\r\n                        <th>Assessment</th>\r\n                        <th>Type</th>\r\n                        <th>Score</th>\r\n                        <th>Weighted</th>\r\n                        <th>Class Avg</th>\r\n                        <th>Status</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr v-for=\"assessment in studentBreakdown.assessments\" :key=\"assessment.id\">\r\n                        <td>{{ assessment.name }}</td>\r\n                        <td>\r\n                          <span class=\"badge badge-sm\" :class=\"getAssessmentBadgeClass(assessment.type)\">\r\n                            {{ formatAssessmentType(assessment.type) }}\r\n                          </span>\r\n                        </td>\r\n                        <td>\r\n                          <span :class=\"getScoreClass(assessment.percentage)\">\r\n                            {{ assessment.obtained }}/{{ assessment.max_marks }}\r\n                            ({{ assessment.percentage }}%)\r\n                          </span>\r\n                        </td>\r\n                        <td>\r\n                          <strong class=\"text-primary\">{{ assessment.weighted }}%</strong>\r\n                        </td>\r\n                        <td>{{ assessment.classAverage }}%</td>\r\n                        <td>\r\n                          <span class=\"badge\" :class=\"getPerformanceStatusClass(assessment.percentage, assessment.classAverage)\">\r\n                            {{ getPerformanceStatus(assessment.percentage, assessment.classAverage) }}\r\n                          </span>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-6\">\r\n              <h6>Performance Trends</h6>\r\n              <canvas id=\"studentTrendChart\" height=\"200\"></canvas>\r\n              \r\n              <div class=\"mt-4\">\r\n                <h6>Strengths & Areas for Improvement</h6>\r\n                <div class=\"row\">\r\n                  <div class=\"col-6\">\r\n                    <h6 class=\"text-success\">Strengths</h6>\r\n                    <ul class=\"list-unstyled\">\r\n                      <li v-for=\"strength in studentBreakdown.strengths\" :key=\"strength\" class=\"mb-1\">\r\n                        <i class=\"fas fa-check-circle text-success me-2\"></i>{{ strength }}\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                  <div class=\"col-6\">\r\n                    <h6 class=\"text-warning\">Improvements</h6>\r\n                    <ul class=\"list-unstyled\">\r\n                      <li v-for=\"improvement in studentBreakdown.improvements\" :key=\"improvement\" class=\"mb-1\">\r\n                        <i class=\"fas fa-exclamation-triangle text-warning me-2\"></i>{{ improvement }}\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Class Performance Table -->\r\n      <div class=\"card\">\r\n        <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n          <h5 class=\"mb-0\">\r\n            <i class=\"fas fa-table me-2\"></i>\r\n            {{ selectedStudentId ? 'Student' : 'Class' }} Performance Breakdown\r\n          </h5>\r\n          <div class=\"btn-group btn-group-sm\">\r\n            <button class=\"btn btn-outline-primary\" @click=\"toggleView('summary')\" \r\n                    :class=\"{ active: viewMode === 'summary' }\">\r\n              Summary\r\n            </button>\r\n            <button class=\"btn btn-outline-primary\" @click=\"toggleView('detailed')\" \r\n                    :class=\"{ active: viewMode === 'detailed' }\">\r\n              Detailed\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"card-body p-0\">\r\n          <div class=\"table-responsive\">\r\n            <table class=\"table table-hover mb-0\">\r\n              <thead class=\"table-light\">\r\n                <tr>\r\n                  <th v-if=\"!selectedStudentId\">Student</th>\r\n                  <th v-for=\"assessment in uniqueAssessments\" :key=\"assessment.id\" class=\"text-center\">\r\n                    {{ assessment.name }}\r\n                    <br>\r\n                    <small class=\"text-muted\">({{ assessment.weightage }}%)</small>\r\n                  </th>\r\n                  <th class=\"text-center\">Final Mark</th>\r\n                  <th class=\"text-center\">Grade</th>\r\n                  <th v-if=\"!selectedStudentId\" class=\"text-center\">Rank</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr v-for=\"(student, index) in filteredStudentMarks\" :key=\"student.id\">\r\n                  <td v-if=\"!selectedStudentId\">\r\n                    <div class=\"d-flex align-items-center\">\r\n                      <div class=\"avatar me-3\">\r\n                        {{ getStudentInitials(student.name) }}\r\n                      </div>\r\n                      <div>\r\n                        <strong>{{ student.name }}</strong>\r\n                        <br>\r\n                        <small class=\"text-muted\">{{ student.matric_number }}</small>\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                  <td v-for=\"assessment in uniqueAssessments\" :key=\"assessment.id\" class=\"text-center\">\r\n                    <div v-if=\"student.marks[assessment.id]\">\r\n                      <strong :class=\"getScoreClass(student.marks[assessment.id].percentage)\">\r\n                        {{ student.marks[assessment.id].percentage }}%\r\n                      </strong>\r\n                      <br>\r\n                      <small class=\"text-muted\">\r\n                        {{ student.marks[assessment.id].obtained }}/{{ student.marks[assessment.id].max_marks }}\r\n                      </small>\r\n                    </div>\r\n                    <div v-else class=\"text-muted\">\r\n                      <i class=\"fas fa-minus\"></i>\r\n                      <br>\r\n                      <small>Not submitted</small>\r\n                    </div>\r\n                  </td>\r\n                  <td class=\"text-center\">\r\n                    <strong :class=\"getScoreClass(student.finalMark)\" class=\"fs-5\">\r\n                      {{ student.finalMark }}%\r\n                    </strong>\r\n                  </td>\r\n                  <td class=\"text-center\">\r\n                    <span class=\"badge badge-lg\" :class=\"getGradeBadgeClass(student.grade)\">\r\n                      {{ student.grade }}\r\n                    </span>\r\n                  </td>\r\n                  <td v-if=\"!selectedStudentId\" class=\"text-center\">\r\n                    <span class=\"badge bg-secondary\">{{ index + 1 }}</span>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- No Course Selected -->\r\n    <div v-else class=\"text-center p-5\">\r\n      <i class=\"fas fa-chart-line fa-4x text-muted mb-3\"></i>\r\n      <h3 class=\"text-muted\">Select a Course</h3>\r\n      <p class=\"text-muted\">Choose a course from the dropdown above to view detailed mark breakdown analysis.</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { mapGetters } from 'vuex';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  name: 'MarkBreakdown',\r\n  data() {\r\n    return {\r\n      courses: [],\r\n      students: [],\r\n      selectedCourseId: '',\r\n      selectedStudentId: '',\r\n      selectedAssessmentType: '',\r\n      isLoading: false,\r\n      viewMode: 'summary',\r\n      courseStats: null,\r\n      assessmentBreakdown: [],\r\n      studentBreakdown: null,\r\n      uniqueAssessments: [],\r\n      filteredStudentMarks: [],\r\n      assessmentChart: null,\r\n      studentTrendChart: null\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters('auth', ['getUser']),\r\n    userRole() {\r\n      return this.getUser?.role || '';\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadCourses();\r\n  },\r\n  beforeUnmount() {\r\n    this.destroyCharts();\r\n  },\r\n  methods: {\r\n    async loadCourses() {\r\n      try {\r\n        const userId = this.getUser?.id;\r\n        if (!userId) return;\r\n\r\n        let endpoint = '';\r\n        if (this.userRole === 'lecturer') {\r\n          endpoint = `http://localhost:8080/marks-api.php?action=lecturer_courses&lecturer_id=${userId}`;\r\n        } else if (this.userRole === 'student') {\r\n          // For students, we'll use a different approach since they only see their enrolled courses\r\n          endpoint = `http://localhost:8080/marks-api.php?action=lecturer_courses&lecturer_id=1`; // Temporary workaround\r\n        } else if (this.userRole === 'advisor') {\r\n          endpoint = `http://localhost:8080/breakdown-api.php?action=advisor_courses&advisor_id=${userId}`;\r\n        }\r\n\r\n        const response = await axios.get(endpoint);\r\n        this.courses = response.data.courses || [];\r\n        \r\n        // Add sample data if no courses are returned\r\n        if (this.courses.length === 0) {\r\n          this.courses = [\r\n            { id: 1, code: 'CS101', name: 'Introduction to Computer Science', semester: 'Fall 2024', academic_year: '2024/2025' },\r\n            { id: 2, code: 'MATH201', name: 'Calculus II', semester: 'Fall 2024', academic_year: '2024/2025' },\r\n            { id: 3, code: 'PHYS101', name: 'Physics I', semester: 'Fall 2024', academic_year: '2024/2025' }\r\n          ];\r\n        }\r\n        \r\n        // Auto-select course from route if available\r\n        if (this.$route.params.courseId) {\r\n          this.selectedCourseId = parseInt(this.$route.params.courseId);\r\n          await this.loadCourseData();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading courses:', error);\r\n        // Fallback to sample data\r\n        this.courses = [\r\n          { id: 1, code: 'CS101', name: 'Introduction to Computer Science', semester: 'Fall 2024', academic_year: '2024/2025' },\r\n          { id: 2, code: 'MATH201', name: 'Calculus II', semester: 'Fall 2024', academic_year: '2024/2025' },\r\n          { id: 3, code: 'PHYS101', name: 'Physics I', semester: 'Fall 2024', academic_year: '2024/2025' }\r\n        ];\r\n        \r\n        // Auto-select course from route if available\r\n        if (this.$route.params.courseId) {\r\n          this.selectedCourseId = parseInt(this.$route.params.courseId);\r\n          await this.loadCourseData();\r\n        }\r\n      }\r\n    },\r\n\r\n    async loadCourseData() {\r\n      if (!this.selectedCourseId) {\r\n        this.clearData();\r\n        return;\r\n      }\r\n\r\n      this.isLoading = true;\r\n      try {\r\n        // Load students and marks for the course\r\n        const response = await axios.get(`http://localhost:8080/marks-api.php?action=course_students_marks&course_id=${this.selectedCourseId}`);\r\n        \r\n        this.students = response.data.students || [];\r\n        this.uniqueAssessments = response.data.assessments || [];\r\n        \r\n        // Process the data for breakdown analysis\r\n        await this.processMarkBreakdown();\r\n        await this.calculateCourseStats();\r\n        \r\n        this.filteredStudentMarks = this.students;\r\n        \r\n        // If student role, auto-select current student\r\n        if (this.userRole === 'student') {\r\n          this.selectedStudentId = this.getUser.id;\r\n          await this.loadStudentBreakdown();\r\n        }\r\n        \r\n        this.$nextTick(() => {\r\n          this.createAssessmentChart();\r\n        });\r\n        \r\n      } catch (error) {\r\n        console.error('Error loading course data:', error);\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n\r\n    async processMarkBreakdown() {\r\n      const breakdown = {};\r\n      \r\n      this.uniqueAssessments.forEach(assessment => {\r\n        if (!breakdown[assessment.type]) {\r\n          breakdown[assessment.type] = {\r\n            type: assessment.type,\r\n            weightage: 0,\r\n            total: 0,\r\n            submitted: 0,\r\n            totalMarks: 0,\r\n            obtainedMarks: 0\r\n          };\r\n        }\r\n        \r\n        breakdown[assessment.type].weightage += assessment.weightage || 0;\r\n        breakdown[assessment.type].total += this.students.length;\r\n        \r\n        this.students.forEach(student => {\r\n          if (student.marks && student.marks[assessment.type]) {\r\n            breakdown[assessment.type].submitted++;\r\n            breakdown[assessment.type].totalMarks += student.marks[assessment.type].max_marks || 0;\r\n            breakdown[assessment.type].obtainedMarks += student.marks[assessment.type].obtained || 0;\r\n          }\r\n        });\r\n      });\r\n      \r\n      this.assessmentBreakdown = Object.values(breakdown).map(item => ({\r\n        ...item,\r\n        average: item.totalMarks > 0 ? Math.round((item.obtainedMarks / item.totalMarks) * 100) : 0\r\n      }));\r\n    },\r\n\r\n    async calculateCourseStats() {\r\n      const totalStudents = this.students.length;\r\n      const totalAssessments = this.uniqueAssessments.length;\r\n      \r\n      let totalMarks = 0;\r\n      let atRiskCount = 0;\r\n      \r\n      this.students.forEach(student => {\r\n        const finalMark = this.calculateStudentFinalMark(student);\r\n        totalMarks += finalMark;\r\n        if (finalMark < 50) atRiskCount++;\r\n      });\r\n      \r\n      this.courseStats = {\r\n        totalStudents,\r\n        totalAssessments,\r\n        classAverage: totalStudents > 0 ? Math.round(totalMarks / totalStudents) : 0,\r\n        atRiskStudents: atRiskCount\r\n      };\r\n    },\r\n\r\n    async loadStudentBreakdown() {\r\n      if (!this.selectedStudentId) {\r\n        this.studentBreakdown = null;\r\n        return;\r\n      }\r\n\r\n      const student = this.students.find(s => s.id == this.selectedStudentId);\r\n      if (!student) return;\r\n\r\n      const assessments = this.uniqueAssessments.map(assessment => {\r\n        const mark = student.marks?.[assessment.type] || null;\r\n        const classTotal = this.students.reduce((sum, s) => \r\n          sum + (s.marks?.[assessment.type]?.obtained || 0), 0);\r\n        const classAverage = this.students.length > 0 ? \r\n          Math.round(classTotal / this.students.length) : 0;\r\n\r\n        return {\r\n          id: assessment.id,\r\n          name: assessment.name,\r\n          type: assessment.type,\r\n          obtained: mark?.obtained || 0,\r\n          max_marks: mark?.max_marks || assessment.max_marks || 0,\r\n          percentage: mark ? Math.round((mark.obtained / mark.max_marks) * 100) : 0,\r\n          weighted: mark?.weighted || 0,\r\n          classAverage\r\n        };\r\n      });\r\n\r\n      const finalMark = this.calculateStudentFinalMark(student);\r\n      const grade = this.calculateGrade(finalMark);\r\n      const rank = this.calculateStudentRank(student);\r\n\r\n      // Analyze strengths and improvements\r\n      const strengths = this.analyzeStrengths(assessments);\r\n      const improvements = this.analyzeImprovements(assessments);\r\n\r\n      this.studentBreakdown = {\r\n        name: student.name,\r\n        finalMark,\r\n        grade,\r\n        rank,\r\n        assessments,\r\n        strengths,\r\n        improvements\r\n      };\r\n\r\n      this.$nextTick(() => {\r\n        this.createStudentTrendChart();\r\n      });\r\n    },\r\n\r\n    calculateStudentFinalMark(student) {\r\n      let totalWeighted = 0;\r\n      \r\n      Object.values(student.marks || {}).forEach(mark => {\r\n        totalWeighted += mark.weighted || 0;\r\n      });\r\n      \r\n      return Math.round(totalWeighted);\r\n    },\r\n\r\n    calculateGrade(mark) {\r\n      if (mark >= 80) return 'A';\r\n      if (mark >= 70) return 'B';\r\n      if (mark >= 60) return 'C';\r\n      if (mark >= 50) return 'D';\r\n      return 'F';\r\n    },\r\n\r\n    calculateStudentRank(targetStudent) {\r\n      const sortedStudents = [...this.students].sort((a, b) => \r\n        this.calculateStudentFinalMark(b) - this.calculateStudentFinalMark(a));\r\n      \r\n      return sortedStudents.findIndex(s => s.id === targetStudent.id) + 1;\r\n    },\r\n\r\n    analyzeStrengths(assessments) {\r\n      const strengths = [];\r\n      \r\n      assessments.forEach(assessment => {\r\n        if (assessment.percentage >= assessment.classAverage + 10) {\r\n          strengths.push(`${this.formatAssessmentType(assessment.type)} (${assessment.percentage}%)`);\r\n        }\r\n      });\r\n      \r\n      return strengths.length > 0 ? strengths : ['Consistent performance across assessments'];\r\n    },\r\n\r\n    analyzeImprovements(assessments) {\r\n      const improvements = [];\r\n      \r\n      assessments.forEach(assessment => {\r\n        if (assessment.percentage < assessment.classAverage - 10) {\r\n          improvements.push(`${this.formatAssessmentType(assessment.type)} (${assessment.percentage}%)`);\r\n        }\r\n      });\r\n      \r\n      return improvements.length > 0 ? improvements : ['Continue current study approach'];\r\n    },\r\n\r\n    createAssessmentChart() {\r\n      this.destroyCharts();\r\n      \r\n      const ctx = document.getElementById('assessmentChart');\r\n      if (!ctx) return;\r\n\r\n      this.assessmentChart = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: this.assessmentBreakdown.map(item => this.formatAssessmentType(item.type)),\r\n          datasets: [{\r\n            label: 'Average Score (%)',\r\n            data: this.assessmentBreakdown.map(item => item.average),\r\n            backgroundColor: 'rgba(54, 162, 235, 0.8)',\r\n            borderColor: 'rgba(54, 162, 235, 1)',\r\n            borderWidth: 1\r\n          }, {\r\n            label: 'Weightage (%)',\r\n            data: this.assessmentBreakdown.map(item => item.weightage),\r\n            backgroundColor: 'rgba(255, 99, 132, 0.8)',\r\n            borderColor: 'rgba(255, 99, 132, 1)',\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n\r\n    createStudentTrendChart() {\r\n      const ctx = document.getElementById('studentTrendChart');\r\n      if (!ctx || !this.studentBreakdown) return;\r\n\r\n      this.studentTrendChart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: this.studentBreakdown.assessments.map(a => a.name),\r\n          datasets: [{\r\n            label: 'Student Score',\r\n            data: this.studentBreakdown.assessments.map(a => a.percentage),\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n            tension: 0.1\r\n          }, {\r\n            label: 'Class Average',\r\n            data: this.studentBreakdown.assessments.map(a => a.classAverage),\r\n            borderColor: 'rgba(255, 159, 64, 1)',\r\n            backgroundColor: 'rgba(255, 159, 64, 0.2)',\r\n            tension: 0.1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n\r\n    destroyCharts() {\r\n      if (this.assessmentChart) {\r\n        this.assessmentChart.destroy();\r\n        this.assessmentChart = null;\r\n      }\r\n      if (this.studentTrendChart) {\r\n        this.studentTrendChart.destroy();\r\n        this.studentTrendChart = null;\r\n      }\r\n    },\r\n\r\n    filterBreakdown() {\r\n      // Implementation for filtering by assessment type\r\n      this.filteredStudentMarks = this.students;\r\n    },\r\n\r\n    toggleView(mode) {\r\n      this.viewMode = mode;\r\n    },\r\n\r\n    async exportBreakdown() {\r\n      // Implementation for exporting detailed breakdown\r\n      console.log('Exporting breakdown...');\r\n    },\r\n\r\n    async refreshData() {\r\n      await this.loadCourseData();\r\n    },\r\n\r\n    clearData() {\r\n      this.students = [];\r\n      this.courseStats = null;\r\n      this.assessmentBreakdown = [];\r\n      this.studentBreakdown = null;\r\n      this.uniqueAssessments = [];\r\n      this.filteredStudentMarks = [];\r\n      this.destroyCharts();\r\n    },\r\n\r\n    // Utility methods\r\n    getStudentInitials(name) {\r\n      return name.split(' ').map(n => n.charAt(0)).join('').toUpperCase();\r\n    },\r\n\r\n    formatAssessmentType(type) {\r\n      return type.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\r\n    },\r\n\r\n    getAssessmentBadgeClass(type) {\r\n      const classes = {\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-primary',\r\n        'midterm': 'bg-warning text-dark',\r\n        'final_exam': 'bg-danger',\r\n        'project': 'bg-success'\r\n      };\r\n      return classes[type] || 'bg-secondary';\r\n    },\r\n\r\n    getAssessmentProgressClass(type) {\r\n      const classes = {\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-primary',\r\n        'midterm': 'bg-warning',\r\n        'final_exam': 'bg-danger',\r\n        'project': 'bg-success'\r\n      };\r\n      return classes[type] || 'bg-secondary';\r\n    },\r\n\r\n    getScoreClass(percentage) {\r\n      if (percentage >= 80) return 'text-success fw-bold';\r\n      if (percentage >= 70) return 'text-info fw-bold';\r\n      if (percentage >= 60) return 'text-warning fw-bold';\r\n      if (percentage >= 50) return 'text-primary';\r\n      return 'text-danger fw-bold';\r\n    },\r\n\r\n    getGradeBadgeClass(grade) {\r\n      const classes = {\r\n        'A': 'bg-success',\r\n        'B': 'bg-info',\r\n        'C': 'bg-warning text-dark',\r\n        'D': 'bg-primary',\r\n        'F': 'bg-danger'\r\n      };\r\n      return classes[grade] || 'bg-secondary';\r\n    },\r\n\r\n    getPerformanceStatus(studentScore, classAverage) {\r\n      if (studentScore >= classAverage + 10) return 'Excellent';\r\n      if (studentScore >= classAverage) return 'Above Average';\r\n      if (studentScore >= classAverage - 10) return 'Average';\r\n      return 'Needs Improvement';\r\n    },\r\n\r\n    getPerformanceStatusClass(studentScore, classAverage) {\r\n      if (studentScore >= classAverage + 10) return 'bg-success';\r\n      if (studentScore >= classAverage) return 'bg-info';\r\n      if (studentScore >= classAverage - 10) return 'bg-warning text-dark';\r\n      return 'bg-danger';\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.mark-breakdown h1 {\r\n  color: #2c3e50;\r\n  font-weight: 700;\r\n}\r\n\r\n.stat-card {\r\n  transition: transform 0.2s ease;\r\n  border-radius: 10px;\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.avatar {\r\n  width: 40px;\r\n  height: 40px;\r\n  background: linear-gradient(45deg, #007bff, #0056b3);\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n  font-weight: bold;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.metric-box {\r\n  padding: 1rem;\r\n  border-radius: 8px;\r\n  background: linear-gradient(135deg, #f8f9fa, #e9ecef);\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  border: none;\r\n  border-radius: 10px;\r\n}\r\n\r\n.table th {\r\n  font-weight: 600;\r\n  border-top: none;\r\n}\r\n\r\n.table td {\r\n  vertical-align: middle;\r\n}\r\n\r\n.badge-lg {\r\n  font-size: 1rem;\r\n  padding: 0.5rem 0.75rem;\r\n}\r\n\r\n.badge-sm {\r\n  font-size: 0.7rem;\r\n}\r\n\r\n.btn-group .btn.active {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n\r\ncanvas {\r\n  max-height: 300px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}