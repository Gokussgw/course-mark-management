{"ast":null,"code":"import _regenerator from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _toConsumableArray from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url.to-json.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { mapGetters } from 'vuex';\nimport AssessmentChart from '@/components/charts/AssessmentChart.vue';\nimport MarkDistributionChart from '@/components/charts/MarkDistributionChart.vue';\nimport * as bootstrap from 'bootstrap';\nexport default {\n  name: 'LecturerDashboard',\n  components: {\n    AssessmentChart: AssessmentChart,\n    MarkDistributionChart: MarkDistributionChart\n  },\n  data: function data() {\n    return {\n      courses: [],\n      assessments: [],\n      marks: [],\n      selectedAssessment: null,\n      notification: {\n        title: '',\n        message: '',\n        includeMarks: true\n      },\n      markDistribution: {\n        gradeA: 4,\n        gradeB: 7,\n        gradeC: 10,\n        gradeD: 5,\n        gradeF: 2\n      },\n      recentActivities: [{\n        title: 'Marks Updated',\n        description: 'You updated marks for Database Systems assignment',\n        time: '2 hours ago',\n        icon: 'fas fa-pen text-primary'\n      }, {\n        title: 'New Assessment Added',\n        description: 'Web Development - Midterm Exam',\n        time: '1 day ago',\n        icon: 'fas fa-plus-circle text-success'\n      }, {\n        title: 'Student Request',\n        description: 'John Smith requested a mark review',\n        time: '2 days ago',\n        icon: 'fas fa-question-circle text-warning'\n      }],\n      newCourse: {\n        code: '',\n        name: '',\n        semester: '',\n        academic_year: ''\n      },\n      editingCourse: null,\n      isEditMode: false,\n      courseToDelete: null\n    };\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapGetters(['isLoading'])), mapGetters('auth', ['getUser'])), {}, {\n    upcomingAssessments: function upcomingAssessments() {\n      return this.assessments.filter(function (assessment) {\n        return !assessment.is_graded;\n      }).sort(function (a, b) {\n        return new Date(a.date) - new Date(b.date);\n      }).slice(0, 5);\n    }\n  }),\n  created: function created() {\n    this.loadData();\n  },\n  methods: {\n    loadData: function loadData() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n        var courseIds, _iterator, _step, courseId, courseAssessments, _t, _t2;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.n) {\n            case 0:\n              _context.p = 0;\n              _context.n = 1;\n              return _this.$store.dispatch('courses/fetchCourses', {\n                lecturerId: _this.getUser.id\n              });\n            case 1:\n              _this.courses = _context.v;\n              // Fetch assessments for all courses\n              courseIds = _this.courses.map(function (course) {\n                return course.id;\n              });\n              _iterator = _createForOfIteratorHelper(courseIds);\n              _context.p = 2;\n              _iterator.s();\n            case 3:\n              if ((_step = _iterator.n()).done) {\n                _context.n = 6;\n                break;\n              }\n              courseId = _step.value;\n              _context.n = 4;\n              return _this.$store.dispatch('assessments/fetchAssessments', {\n                courseId: courseId\n              });\n            case 4:\n              courseAssessments = _context.v;\n              _this.assessments = [].concat(_toConsumableArray(_this.assessments), _toConsumableArray(courseAssessments));\n            case 5:\n              _context.n = 3;\n              break;\n            case 6:\n              _context.n = 8;\n              break;\n            case 7:\n              _context.p = 7;\n              _t = _context.v;\n              _iterator.e(_t);\n            case 8:\n              _context.p = 8;\n              _iterator.f();\n              return _context.f(8);\n            case 9:\n              _context.n = 11;\n              break;\n            case 10:\n              _context.p = 10;\n              _t2 = _context.v;\n              console.error('Error loading dashboard data:', _t2);\n            case 11:\n              return _context.a(2);\n          }\n        }, _callee, null, [[2, 7, 8, 9], [0, 10]]);\n      }))();\n    },\n    getAssessmentCountForCourse: function getAssessmentCountForCourse(courseId) {\n      return this.assessments.filter(function (a) {\n        return a.course_id === courseId;\n      }).length;\n    },\n    getCourseNameById: function getCourseNameById(courseId) {\n      var course = this.courses.find(function (c) {\n        return c.id === courseId;\n      });\n      return course ? \"\".concat(course.code, \" - \").concat(course.name) : 'Unknown Course';\n    },\n    getAssessmentTypeBadgeClass: function getAssessmentTypeBadgeClass(type) {\n      switch (type) {\n        case 'quiz':\n          return 'bg-info';\n        case 'assignment':\n          return 'bg-primary';\n        case 'midterm':\n          return 'bg-warning';\n        case 'final_exam':\n          return 'bg-danger';\n        default:\n          return 'bg-secondary';\n      }\n    },\n    formatDate: function formatDate(dateString) {\n      if (!dateString) return 'Not scheduled';\n      var date = new Date(dateString);\n      return date.toLocaleDateString('en-GB', {\n        day: 'numeric',\n        month: 'short',\n        year: 'numeric'\n      });\n    },\n    isPending: function isPending() {\n      // Simple logic to determine if an assessment is pending\n      // In a real app, this would check if all students have marks for this assessment\n      return true;\n    },\n    openAddCourseModal: function openAddCourseModal() {\n      // Reset the form for adding new course\n      this.newCourse = {\n        code: '',\n        name: '',\n        semester: '',\n        academic_year: ''\n      };\n      this.isEditMode = false;\n      this.editingCourse = null;\n\n      // Open the modal using Bootstrap's JavaScript\n      var modal = new bootstrap.Modal(document.getElementById('addCourseModal'));\n      modal.show();\n    },\n    editCourse: function editCourse(course) {\n      // Populate the form with course data for editing\n      this.newCourse = {\n        code: course.code,\n        name: course.name,\n        semester: course.semester || '',\n        academic_year: course.academic_year || ''\n      };\n      this.isEditMode = true;\n      this.editingCourse = course;\n\n      // Open the modal using Bootstrap's JavaScript\n      var modal = new bootstrap.Modal(document.getElementById('addCourseModal'));\n      modal.show();\n    },\n    saveCourse: function saveCourse() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var courseData, modalElement, modal, _t3;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              _context2.p = 0;\n              if (!_this2.isEditMode) {\n                _context2.n = 2;\n                break;\n              }\n              _context2.n = 1;\n              return _this2.$store.dispatch('courses/updateCourse', {\n                courseId: _this2.editingCourse.id,\n                courseData: _this2.newCourse\n              });\n            case 1:\n              _this2.$store.dispatch('showToast', {\n                message: 'Course updated successfully!',\n                type: 'success'\n              });\n              _context2.n = 4;\n              break;\n            case 2:\n              // Create new course\n              courseData = _objectSpread(_objectSpread({}, _this2.newCourse), {}, {\n                lecturer_id: _this2.getUser.id\n              });\n              _context2.n = 3;\n              return _this2.$store.dispatch('courses/createCourse', courseData);\n            case 3:\n              _this2.$store.dispatch('showToast', {\n                message: 'Course created successfully!',\n                type: 'success'\n              });\n            case 4:\n              // Close the modal\n              modalElement = document.getElementById('addCourseModal');\n              modal = bootstrap.Modal.getInstance(modalElement);\n              modal.hide();\n\n              // Reload courses\n              _this2.loadData();\n              _context2.n = 6;\n              break;\n            case 5:\n              _context2.p = 5;\n              _t3 = _context2.v;\n              console.error('Error saving course:', _t3);\n              _this2.$store.dispatch('showToast', {\n                message: 'Error saving course. Please try again.',\n                type: 'error'\n              });\n            case 6:\n              return _context2.a(2);\n          }\n        }, _callee2, null, [[0, 5]]);\n      }))();\n    },\n    confirmDeleteCourse: function confirmDeleteCourse(course) {\n      this.courseToDelete = course;\n\n      // Open the delete confirmation modal\n      var modal = new bootstrap.Modal(document.getElementById('deleteCourseModal'));\n      modal.show();\n    },\n    deleteCourse: function deleteCourse() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {\n        var modalElement, modal, _t4;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.n) {\n            case 0:\n              _context3.p = 0;\n              _context3.n = 1;\n              return _this3.$store.dispatch('courses/deleteCourse', _this3.courseToDelete.id);\n            case 1:\n              // Close the modal\n              modalElement = document.getElementById('deleteCourseModal');\n              modal = bootstrap.Modal.getInstance(modalElement);\n              modal.hide();\n              _this3.$store.dispatch('showToast', {\n                message: 'Course deleted successfully!',\n                type: 'success'\n              });\n\n              // Reload courses\n              _this3.loadData();\n\n              // Clear the course to delete\n              _this3.courseToDelete = null;\n              _context3.n = 3;\n              break;\n            case 2:\n              _context3.p = 2;\n              _t4 = _context3.v;\n              console.error('Error deleting course:', _t4);\n              _this3.$store.dispatch('showToast', {\n                message: 'Error deleting course. Please try again.',\n                type: 'error'\n              });\n            case 3:\n              return _context3.a(2);\n          }\n        }, _callee3, null, [[0, 2]]);\n      }))();\n    },\n    addCourse: function addCourse() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.n) {\n            case 0:\n              _context4.n = 1;\n              return _this4.saveCourse();\n            case 1:\n              return _context4.a(2);\n          }\n        }, _callee4);\n      }))();\n    },\n    exportCoursesToCSV: function exportCoursesToCSV() {\n      var _this5 = this;\n      if (!this.courses.length) {\n        alert('No courses to export');\n        return;\n      }\n\n      // Convert courses data to CSV format\n      var headers = ['ID', 'Code', 'Name', 'Semester', 'Academic Year', 'Number of Assessments'];\n      var csvContent = headers.join(',') + '\\n';\n      this.courses.forEach(function (course) {\n        var assessmentCount = _this5.getAssessmentCountForCourse(course.id);\n        var row = [course.id, course.code, \"\\\"\".concat(course.name, \"\\\"\"),\n        // Quotes to handle commas in names\n        course.semester || 'Not specified', course.academic_year || 'Not specified', assessmentCount];\n        csvContent += row.join(',') + '\\n';\n      });\n\n      // Create and trigger download\n      this.downloadCSV(csvContent, 'courses.csv');\n    },\n    exportAssessmentsToCSV: function exportAssessmentsToCSV() {\n      var _this6 = this;\n      if (!this.assessments.length) {\n        alert('No assessments to export');\n        return;\n      }\n\n      // Convert assessments data to CSV format\n      var headers = ['ID', 'Course', 'Name', 'Type', 'Date', 'Max Mark', 'Weightage', 'Status'];\n      var csvContent = headers.join(',') + '\\n';\n      this.assessments.forEach(function (assessment) {\n        var row = [assessment.id, \"\\\"\".concat(_this6.getCourseNameById(assessment.course_id), \"\\\"\"), \"\\\"\".concat(assessment.name, \"\\\"\"), assessment.type, assessment.date || 'Not scheduled', assessment.max_mark, \"\".concat(assessment.weightage, \"%\"), _this6.isPending(assessment) ? 'Pending' : 'Completed'];\n        csvContent += row.join(',') + '\\n';\n      });\n\n      // Create and trigger download\n      this.downloadCSV(csvContent, 'assessments.csv');\n    },\n    downloadCSV: function downloadCSV(csvContent, fileName) {\n      // Create a Blob with the CSV content\n      var blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n      });\n      var url = URL.createObjectURL(blob);\n\n      // Create a temporary link and trigger download\n      var link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', fileName);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    },\n    openNotificationModal: function openNotificationModal(assessment) {\n      // Set the selected assessment\n      this.selectedAssessment = assessment;\n\n      // Pre-fill notification fields\n      var courseName = this.getCourseNameById(assessment.course_id);\n      this.notification = {\n        title: \"\".concat(assessment.name, \" Update\"),\n        message: \"Dear Students,\\n\\nThe marks for \".concat(assessment.name, \" in \").concat(courseName, \" have been updated. Please login to view your results.\\n\\nRegards,\\n\").concat(this.getUser.name),\n        includeMarks: true\n      };\n\n      // Open the modal\n      var modal = new bootstrap.Modal(document.getElementById('notifyStudentsModal'));\n      modal.show();\n    },\n    sendNotification: function sendNotification() {\n      var _this7 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {\n        var newActivity, modalElement, modal, _t5;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.n) {\n            case 0:\n              _context5.p = 0;\n              _context5.n = 1;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 1000);\n              });\n            case 1:\n              // Show success message\n              alert(\"Notification sent to students in \".concat(_this7.getCourseNameById(_this7.selectedAssessment.course_id)));\n\n              // Add to recent activities\n              newActivity = {\n                title: 'Students Notified',\n                description: \"\".concat(_this7.notification.title, \" - \").concat(_this7.getCourseNameById(_this7.selectedAssessment.course_id)),\n                time: 'Just now',\n                icon: 'fas fa-bell text-success'\n              };\n              _this7.recentActivities.unshift(newActivity);\n              if (_this7.recentActivities.length > 5) {\n                _this7.recentActivities.pop();\n              }\n\n              // Close the modal\n              modalElement = document.getElementById('notifyStudentsModal');\n              modal = bootstrap.Modal.getInstance(modalElement);\n              modal.hide();\n              _context5.n = 3;\n              break;\n            case 2:\n              _context5.p = 2;\n              _t5 = _context5.v;\n              console.error('Error sending notification:', _t5);\n              alert('Failed to send notification. Please try again.');\n            case 3:\n              return _context5.a(2);\n          }\n        }, _callee5, null, [[0, 2]]);\n      }))();\n    },\n    logout: function logout() {\n      if (confirm('Are you sure you want to logout?')) {\n        this.$store.dispatch('auth/logout');\n        this.$router.push('/login');\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","AssessmentChart","MarkDistributionChart","bootstrap","name","components","data","courses","assessments","marks","selectedAssessment","notification","title","message","includeMarks","markDistribution","gradeA","gradeB","gradeC","gradeD","gradeF","recentActivities","description","time","icon","newCourse","code","semester","academic_year","editingCourse","isEditMode","courseToDelete","computed","_objectSpread","upcomingAssessments","filter","assessment","is_graded","sort","a","b","Date","date","slice","created","loadData","methods","_this","_asyncToGenerator","_regenerator","m","_callee","courseIds","_iterator","_step","courseId","courseAssessments","_t","_t2","w","_context","n","p","$store","dispatch","lecturerId","getUser","id","v","map","course","_createForOfIteratorHelper","s","done","value","concat","_toConsumableArray","e","f","console","error","getAssessmentCountForCourse","course_id","length","getCourseNameById","find","c","getAssessmentTypeBadgeClass","type","formatDate","dateString","toLocaleDateString","day","month","year","isPending","openAddCourseModal","modal","Modal","document","getElementById","show","editCourse","saveCourse","_this2","_callee2","courseData","modalElement","_t3","_context2","lecturer_id","getInstance","hide","confirmDeleteCourse","deleteCourse","_this3","_callee3","_t4","_context3","addCourse","_this4","_callee4","_context4","exportCoursesToCSV","_this5","alert","headers","csvContent","join","forEach","assessmentCount","row","downloadCSV","exportAssessmentsToCSV","_this6","max_mark","weightage","fileName","blob","Blob","url","URL","createObjectURL","link","createElement","href","setAttribute","body","appendChild","click","removeChild","openNotificationModal","courseName","sendNotification","_this7","_callee5","newActivity","_t5","_context5","Promise","resolve","setTimeout","unshift","pop","logout","confirm","$router","push"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\NEW\\course-mark-management\\frontend\\src\\views\\lecturer\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard\">\r\n    <!-- Dashboard Header -->\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <h1 class=\"mb-1\">Lecturer Dashboard</h1>\r\n        <p class=\"text-muted mb-0\">Welcome back, {{ getUser.name }}</p>\r\n      </div>\r\n      <div class=\"d-flex align-items-center gap-3\">\r\n        <router-link \r\n          to=\"/lecturer/marks\" \r\n          class=\"btn btn-success\"\r\n          title=\"Manage Marks\"\r\n        >\r\n          <i class=\"fas fa-graduation-cap me-2\"></i>Manage Marks\r\n        </router-link>\r\n        <router-link \r\n          to=\"/lecturer/feedback\" \r\n          class=\"btn btn-info\"\r\n          title=\"Student Feedback\"\r\n        >\r\n          <i class=\"fas fa-comments me-2\"></i>Student Feedback\r\n        </router-link>\r\n        <div class=\"user-info text-end\">\r\n          <small class=\"text-muted d-block\">{{ getUser.email }}</small>\r\n          <small class=\"badge bg-primary\">{{ getUser.role }}</small>\r\n        </div>\r\n        <button class=\"btn btn-outline-danger\" @click=\"logout\" title=\"Logout\">\r\n          <i class=\"fas fa-sign-out-alt me-2\"></i>Logout\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"row\">\r\n      <div class=\"col-md-6 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-body\">\r\n            <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n              <h5 class=\"card-title mb-0\">My Courses</h5>\r\n              <div class=\"btn-group\">\r\n                <button class=\"btn btn-success btn-sm\" @click=\"openAddCourseModal\">\r\n                  <i class=\"fas fa-plus me-2\"></i>Add Course\r\n                </button>\r\n                <button class=\"btn btn-outline-secondary btn-sm\" @click=\"exportCoursesToCSV\">\r\n                  <i class=\"fas fa-file-export me-2\"></i>Export CSV\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <p class=\"card-text text-muted\">Manage and view courses you are teaching this semester</p>\r\n            \r\n            <div v-if=\"isLoading\" class=\"text-center\">\r\n              <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div v-else-if=\"courses.length === 0\" class=\"text-center py-4\">\r\n              <i class=\"fas fa-book-open text-muted mb-3\" style=\"font-size: 3rem;\"></i>\r\n              <h6 class=\"text-muted\">No courses yet</h6>\r\n              <p class=\"text-muted small\">Start by creating your first course to manage assessments and student marks.</p>\r\n              <button class=\"btn btn-primary\" @click=\"openAddCourseModal\">\r\n                <i class=\"fas fa-plus-circle me-2\"></i> Create Your First Course\r\n              </button>\r\n            </div>\r\n            \r\n            <div v-else class=\"list-group\">\r\n              <div v-for=\"course in courses\" :key=\"course.id\" class=\"list-group-item\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div class=\"flex-grow-1\">\r\n                    <router-link \r\n                      :to=\"`/lecturer/course/${course.id}`\" \r\n                      class=\"text-decoration-none\"\r\n                    >\r\n                      <strong>{{ course.code }}</strong> - {{ course.name }}\r\n                      <div class=\"text-muted small\">\r\n                        {{ course.semester || 'No semester' }} | {{ course.academic_year || 'No year' }}\r\n                      </div>\r\n                    </router-link>\r\n                  </div>\r\n                  <div class=\"d-flex align-items-center gap-2\">\r\n                    <span class=\"badge bg-primary rounded-pill\">\r\n                      4 components\r\n                    </span>\r\n                    <div class=\"btn-group\" role=\"group\">\r\n                      <router-link \r\n                        :to=\"`/lecturer/course/${course.id}/enrollments`\" \r\n                        class=\"btn btn-sm btn-outline-info\"\r\n                        title=\"Manage Enrollments\"\r\n                      >\r\n                        <i class=\"fas fa-users\"></i>\r\n                      </router-link>\r\n                      <router-link \r\n                        :to=\"`/lecturer/course/${course.id}/marks`\" \r\n                        class=\"btn btn-sm btn-outline-success\"\r\n                        title=\"Manage Marks\"\r\n                      >\r\n                        <i class=\"fas fa-graduation-cap\"></i>\r\n                      </router-link>\r\n                      <router-link \r\n                        :to=\"`/lecturer/breakdown/${course.id}`\" \r\n                        class=\"btn btn-sm btn-outline-warning\"\r\n                        title=\"View Mark Breakdown\"\r\n                      >\r\n                        <i class=\"fas fa-chart-bar\"></i>\r\n                      </router-link>\r\n                      <button \r\n                        class=\"btn btn-sm btn-outline-primary\" \r\n                        @click=\"editCourse(course)\"\r\n                        title=\"Edit Course\"\r\n                      >\r\n                        <i class=\"fas fa-edit\"></i>\r\n                      </button>\r\n                      <button \r\n                        class=\"btn btn-sm btn-outline-danger\" \r\n                        @click=\"confirmDeleteCourse(course)\"\r\n                        title=\"Delete Course\"\r\n                      >\r\n                        <i class=\"fas fa-trash\"></i>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"col-md-6 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Recent Activity</h5>\r\n            <p class=\"card-text text-muted mb-4\">Latest updates and actions</p>\r\n            \r\n            <div class=\"timeline\">\r\n              <div class=\"timeline-item\" v-for=\"(activity, index) in recentActivities\" :key=\"index\">\r\n                <div class=\"timeline-item-icon\">\r\n                  <i :class=\"activity.icon\"></i>\r\n                </div>\r\n                <div class=\"timeline-item-content\">\r\n                  <h6>{{ activity.title }}</h6>\r\n                  <p class=\"text-muted mb-0\">{{ activity.description }}</p>\r\n                  <small class=\"text-muted\">{{ activity.time }}</small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Analytics Charts Row -->\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Component Types</h5>\r\n            <p class=\"card-text text-muted mb-3\">Standard component weightage distribution</p>\r\n            <ComponentChart :components=\"standardComponents\" :height=\"250\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"col-md-6 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Mark Distribution</h5>\r\n            <p class=\"card-text text-muted mb-3\">Overview of student performance</p>\r\n            <MarkDistributionChart :mark-data=\"markDistribution\" :height=\"250\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 mb-4\">\r\n        <div class=\"card\">\r\n          <div class=\"card-body\">\r\n            <div class=\"d-flex justify-content-between align-items-center mb-2\">\r\n              <h5 class=\"card-title mb-0\">Component Overview</h5>\r\n              <button class=\"btn btn-sm btn-success\" @click=\"exportMarksToCSV\">\r\n                <i class=\"fas fa-file-export me-2\"></i>Export Marks\r\n              </button>\r\n            </div>\r\n            <p class=\"card-text text-muted mb-4\">Current status of component marks across all courses</p>\r\n            \r\n            <div v-if=\"isLoading\" class=\"text-center\">\r\n              <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <table v-else class=\"table table-hover\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Course</th>\r\n                  <th>Component</th>\r\n                  <th>Weightage</th>\r\n                  <th>Completed</th>\r\n                  <th>Average</th>\r\n                  <th>Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr v-for=\"component in courseComponents\" :key=\"`${component.course_id}-${component.type}`\">\r\n                  <td>{{ getCourseNameById(component.course_id) }}</td>\r\n                  <td>\r\n                    <span class=\"badge\" :class=\"getComponentTypeBadgeClass(component.type)\">\r\n                      {{ component.name }}\r\n                    </span>\r\n                  </td>\r\n                  <td>{{ component.weightage }}%</td>\r\n                  <td>\r\n                    <span class=\"badge\" :class=\"component.completion_rate >= 80 ? 'bg-success' : component.completion_rate >= 50 ? 'bg-warning' : 'bg-danger'\">\r\n                      {{ component.completed }}/{{ component.total }} ({{ component.completion_rate }}%)\r\n                    </span>\r\n                  </td>\r\n                  <td>\r\n                    <span :class=\"getMarkClass(component.average)\">\r\n                      {{ component.average }}%\r\n                    </span>\r\n                  </td>\r\n                  <td>\r\n                    <div class=\"btn-group btn-group-sm\" role=\"group\">\r\n                      <router-link :to=\"`/lecturer/course/${component.course_id}/marks`\" class=\"btn btn-outline-primary\" :title=\"`Manage ${component.name} marks`\">\r\n                        <i class=\"fas fa-edit\"></i>\r\n                      </router-link>\r\n                      <router-link :to=\"`/lecturer/breakdown/${component.course_id}`\" class=\"btn btn-outline-info\" title=\"View detailed breakdown\">\r\n                        <i class=\"fas fa-chart-bar\"></i>\r\n                      </router-link>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n                \r\n                <tr v-if=\"courseComponents.length === 0\">\r\n                  <td colspan=\"6\" class=\"text-center\">No component data available</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Add/Edit Course Modal -->\r\n    <div class=\"modal fade\" id=\"addCourseModal\" tabindex=\"-1\" aria-labelledby=\"addCourseModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"addCourseModalLabel\">\r\n              {{ isEditMode ? 'Edit Course' : 'Add New Course' }}\r\n            </h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <form @submit.prevent=\"saveCourse\">\r\n              <div class=\"mb-3\">\r\n                <label for=\"courseCode\" class=\"form-label\">Course Code</label>\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control\" \r\n                  id=\"courseCode\" \r\n                  v-model=\"newCourse.code\" \r\n                  required\r\n                  placeholder=\"e.g., CS101\"\r\n                >\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label for=\"courseName\" class=\"form-label\">Course Name</label>\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control\" \r\n                  id=\"courseName\" \r\n                  v-model=\"newCourse.name\" \r\n                  required\r\n                  placeholder=\"e.g., Introduction to Computer Science\"\r\n                >\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"mb-3\">\r\n                    <label for=\"semester\" class=\"form-label\">Semester</label>\r\n                    <select class=\"form-control\" id=\"semester\" v-model=\"newCourse.semester\">\r\n                      <option value=\"\">Select Semester</option>\r\n                      <option value=\"Fall\">Fall</option>\r\n                      <option value=\"Spring\">Spring</option>\r\n                      <option value=\"Summer\">Summer</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"mb-3\">\r\n                    <label for=\"academicYear\" class=\"form-label\">Academic Year</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-control\" \r\n                      id=\"academicYear\" \r\n                      v-model=\"newCourse.academic_year\"\r\n                      placeholder=\"e.g., 2025-2026\"\r\n                    >\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"d-flex justify-content-end gap-2\">\r\n                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n                <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"isLoading\">\r\n                  <span v-if=\"isLoading\" class=\"spinner-border spinner-border-sm me-2\"></span>\r\n                  {{ isEditMode ? 'Update Course' : 'Save Course' }}\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Delete Course Confirmation Modal -->\r\n    <div class=\"modal fade\" id=\"deleteCourseModal\" tabindex=\"-1\" aria-labelledby=\"deleteCourseModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"deleteCourseModalLabel\">Confirm Delete Course</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <div v-if=\"courseToDelete\">\r\n              <div class=\"alert alert-warning\">\r\n                <i class=\"fas fa-exclamation-triangle me-2\"></i>\r\n                <strong>Warning:</strong> This action cannot be undone.\r\n              </div>\r\n              <p>Are you sure you want to delete the following course?</p>\r\n              <div class=\"card\">\r\n                <div class=\"card-body\">\r\n                  <h6 class=\"card-title\">{{ courseToDelete.code }} - {{ courseToDelete.name }}</h6>\r\n                  <p class=\"card-text text-muted small\">\r\n                    {{ courseToDelete.semester || 'No semester' }} | {{ courseToDelete.academic_year || 'No year' }}\r\n                  </p>\r\n                  <p class=\"card-text\">\r\n                    <span class=\"badge bg-primary\">\r\n                      {{ getAssessmentCountForCourse(courseToDelete.id) }} assessments\r\n                    </span>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <p class=\"text-danger mt-3\">\r\n                <strong>Note:</strong> Deleting this course will also remove all associated assessments and marks.\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n            <button \r\n              type=\"button\" \r\n              class=\"btn btn-danger\" \r\n              @click=\"deleteCourse\"\r\n              :disabled=\"isLoading\"\r\n            >\r\n              <span v-if=\"isLoading\" class=\"spinner-border spinner-border-sm me-2\"></span>\r\n              Delete Course\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Notify Students Modal -->\r\n    <div class=\"modal fade\" id=\"notifyStudentsModal\" tabindex=\"-1\" aria-labelledby=\"notifyStudentsModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"notifyStudentsModalLabel\">Notify Students</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <div v-if=\"selectedAssessment\">\r\n              <p><strong>Course:</strong> {{ getCourseNameById(selectedAssessment.course_id) }}</p>\r\n              <p><strong>Assessment:</strong> {{ selectedAssessment.name }} ({{ selectedAssessment.type }})</p>\r\n              \r\n              <form @submit.prevent=\"sendNotification\">\r\n                <div class=\"mb-3\">\r\n                  <label for=\"notificationTitle\" class=\"form-label\">Notification Title</label>\r\n                  <input type=\"text\" class=\"form-control\" id=\"notificationTitle\" v-model=\"notification.title\" required>\r\n                </div>\r\n                <div class=\"mb-3\">\r\n                  <label for=\"notificationMessage\" class=\"form-label\">Message</label>\r\n                  <textarea class=\"form-control\" id=\"notificationMessage\" rows=\"4\" v-model=\"notification.message\" required></textarea>\r\n                </div>\r\n                <div class=\"form-check mb-3\">\r\n                  <input class=\"form-check-input\" type=\"checkbox\" id=\"includeMarks\" v-model=\"notification.includeMarks\">\r\n                  <label class=\"form-check-label\" for=\"includeMarks\">\r\n                    Include marks in notification\r\n                  </label>\r\n                </div>\r\n                <button type=\"submit\" class=\"btn btn-primary\">Send Notification</button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex';\r\nimport AssessmentChart from '@/components/charts/AssessmentChart.vue';\r\nimport MarkDistributionChart from '@/components/charts/MarkDistributionChart.vue';\r\nimport * as bootstrap from 'bootstrap';\r\n\r\nexport default {\r\n  name: 'LecturerDashboard',\r\n  components: {\r\n    AssessmentChart,\r\n    MarkDistributionChart\r\n  },\r\n  data() {\r\n    return {\r\n      courses: [],\r\n      assessments: [],\r\n      marks: [],\r\n      selectedAssessment: null,\r\n      notification: {\r\n        title: '',\r\n        message: '',\r\n        includeMarks: true\r\n      },\r\n      markDistribution: {\r\n        gradeA: 4,\r\n        gradeB: 7,\r\n        gradeC: 10,\r\n        gradeD: 5,\r\n        gradeF: 2\r\n      },\r\n      recentActivities: [\r\n        {\r\n          title: 'Marks Updated',\r\n          description: 'You updated marks for Database Systems assignment',\r\n          time: '2 hours ago',\r\n          icon: 'fas fa-pen text-primary'\r\n        },\r\n        {\r\n          title: 'New Assessment Added',\r\n          description: 'Web Development - Midterm Exam',\r\n          time: '1 day ago',\r\n          icon: 'fas fa-plus-circle text-success'\r\n        },\r\n        {\r\n          title: 'Student Request',\r\n          description: 'John Smith requested a mark review',\r\n          time: '2 days ago',\r\n          icon: 'fas fa-question-circle text-warning'\r\n        }\r\n      ],\r\n      newCourse: {\r\n        code: '',\r\n        name: '',\r\n        semester: '',\r\n        academic_year: ''\r\n      },\r\n      editingCourse: null,\r\n      isEditMode: false,\r\n      courseToDelete: null\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters(['isLoading']),\r\n    ...mapGetters('auth', ['getUser']),\r\n    \r\n    upcomingAssessments() {\r\n      return this.assessments\r\n        .filter(assessment => !assessment.is_graded)\r\n        .sort((a, b) => new Date(a.date) - new Date(b.date))\r\n        .slice(0, 5);\r\n    }\r\n  },\r\n  created() {\r\n    this.loadData();\r\n  },\r\n  methods: {\r\n    async loadData() {\r\n      try {\r\n        // Fetch courses for the current lecturer\r\n        this.courses = await this.$store.dispatch('courses/fetchCourses', {\r\n          lecturerId: this.getUser.id\r\n        });\r\n        \r\n        // Fetch assessments for all courses\r\n        const courseIds = this.courses.map(course => course.id);\r\n        \r\n        for (const courseId of courseIds) {\r\n          const courseAssessments = await this.$store.dispatch('assessments/fetchAssessments', {\r\n            courseId\r\n          });\r\n          this.assessments = [...this.assessments, ...courseAssessments];\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading dashboard data:', error);\r\n      }\r\n    },\r\n    \r\n    getAssessmentCountForCourse(courseId) {\r\n      return this.assessments.filter(a => a.course_id === courseId).length;\r\n    },\r\n    \r\n    getCourseNameById(courseId) {\r\n      const course = this.courses.find(c => c.id === courseId);\r\n      return course ? `${course.code} - ${course.name}` : 'Unknown Course';\r\n    },\r\n    \r\n    getAssessmentTypeBadgeClass(type) {\r\n      switch (type) {\r\n        case 'quiz': return 'bg-info';\r\n        case 'assignment': return 'bg-primary';\r\n        case 'midterm': return 'bg-warning';\r\n        case 'final_exam': return 'bg-danger';\r\n        default: return 'bg-secondary';\r\n      }\r\n    },\r\n    \r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not scheduled';\r\n      \r\n      const date = new Date(dateString);\r\n      return date.toLocaleDateString('en-GB', {\r\n        day: 'numeric',\r\n        month: 'short',\r\n        year: 'numeric'\r\n      });\r\n    },\r\n    \r\n    isPending() {\r\n      // Simple logic to determine if an assessment is pending\r\n      // In a real app, this would check if all students have marks for this assessment\r\n      return true;\r\n    },\r\n    \r\n    openAddCourseModal() {\r\n      // Reset the form for adding new course\r\n      this.newCourse = {\r\n        code: '',\r\n        name: '',\r\n        semester: '',\r\n        academic_year: ''\r\n      };\r\n      this.isEditMode = false;\r\n      this.editingCourse = null;\r\n      \r\n      // Open the modal using Bootstrap's JavaScript\r\n      const modal = new bootstrap.Modal(document.getElementById('addCourseModal'));\r\n      modal.show();\r\n    },\r\n\r\n    editCourse(course) {\r\n      // Populate the form with course data for editing\r\n      this.newCourse = {\r\n        code: course.code,\r\n        name: course.name,\r\n        semester: course.semester || '',\r\n        academic_year: course.academic_year || ''\r\n      };\r\n      this.isEditMode = true;\r\n      this.editingCourse = course;\r\n      \r\n      // Open the modal using Bootstrap's JavaScript\r\n      const modal = new bootstrap.Modal(document.getElementById('addCourseModal'));\r\n      modal.show();\r\n    },\r\n\r\n    async saveCourse() {\r\n      try {\r\n        if (this.isEditMode) {\r\n          // Update existing course\r\n          await this.$store.dispatch('courses/updateCourse', {\r\n            courseId: this.editingCourse.id,\r\n            courseData: this.newCourse\r\n          });\r\n          this.$store.dispatch('showToast', { \r\n            message: 'Course updated successfully!', \r\n            type: 'success' \r\n          });\r\n        } else {\r\n          // Create new course\r\n          const courseData = {\r\n            ...this.newCourse,\r\n            lecturer_id: this.getUser.id\r\n          };\r\n          await this.$store.dispatch('courses/createCourse', courseData);\r\n          this.$store.dispatch('showToast', { \r\n            message: 'Course created successfully!', \r\n            type: 'success' \r\n          });\r\n        }\r\n        \r\n        // Close the modal\r\n        const modalElement = document.getElementById('addCourseModal');\r\n        const modal = bootstrap.Modal.getInstance(modalElement);\r\n        modal.hide();\r\n        \r\n        // Reload courses\r\n        this.loadData();\r\n      } catch (error) {\r\n        console.error('Error saving course:', error);\r\n        this.$store.dispatch('showToast', { \r\n          message: 'Error saving course. Please try again.', \r\n          type: 'error' \r\n        });\r\n      }\r\n    },\r\n\r\n    confirmDeleteCourse(course) {\r\n      this.courseToDelete = course;\r\n      \r\n      // Open the delete confirmation modal\r\n      const modal = new bootstrap.Modal(document.getElementById('deleteCourseModal'));\r\n      modal.show();\r\n    },\r\n\r\n    async deleteCourse() {\r\n      try {\r\n        await this.$store.dispatch('courses/deleteCourse', this.courseToDelete.id);\r\n        \r\n        // Close the modal\r\n        const modalElement = document.getElementById('deleteCourseModal');\r\n        const modal = bootstrap.Modal.getInstance(modalElement);\r\n        modal.hide();\r\n        \r\n        this.$store.dispatch('showToast', { \r\n          message: 'Course deleted successfully!', \r\n          type: 'success' \r\n        });\r\n        \r\n        // Reload courses\r\n        this.loadData();\r\n        \r\n        // Clear the course to delete\r\n        this.courseToDelete = null;\r\n      } catch (error) {\r\n        console.error('Error deleting course:', error);\r\n        this.$store.dispatch('showToast', { \r\n          message: 'Error deleting course. Please try again.', \r\n          type: 'error' \r\n        });\r\n      }\r\n    },\r\n\r\n    async addCourse() {\r\n      // This method is deprecated in favor of saveCourse\r\n      await this.saveCourse();\r\n    },\r\n    \r\n    exportCoursesToCSV() {\r\n      if (!this.courses.length) {\r\n        alert('No courses to export');\r\n        return;\r\n      }\r\n      \r\n      // Convert courses data to CSV format\r\n      const headers = ['ID', 'Code', 'Name', 'Semester', 'Academic Year', 'Number of Assessments'];\r\n      let csvContent = headers.join(',') + '\\n';\r\n      \r\n      this.courses.forEach(course => {\r\n        const assessmentCount = this.getAssessmentCountForCourse(course.id);\r\n        const row = [\r\n          course.id,\r\n          course.code,\r\n          `\"${course.name}\"`,  // Quotes to handle commas in names\r\n          course.semester || 'Not specified',\r\n          course.academic_year || 'Not specified',\r\n          assessmentCount\r\n        ];\r\n        csvContent += row.join(',') + '\\n';\r\n      });\r\n      \r\n      // Create and trigger download\r\n      this.downloadCSV(csvContent, 'courses.csv');\r\n    },\r\n    \r\n    exportAssessmentsToCSV() {\r\n      if (!this.assessments.length) {\r\n        alert('No assessments to export');\r\n        return;\r\n      }\r\n      \r\n      // Convert assessments data to CSV format\r\n      const headers = ['ID', 'Course', 'Name', 'Type', 'Date', 'Max Mark', 'Weightage', 'Status'];\r\n      let csvContent = headers.join(',') + '\\n';\r\n      \r\n      this.assessments.forEach(assessment => {\r\n        const row = [\r\n          assessment.id,\r\n          `\"${this.getCourseNameById(assessment.course_id)}\"`,\r\n          `\"${assessment.name}\"`,\r\n          assessment.type,\r\n          assessment.date || 'Not scheduled',\r\n          assessment.max_mark,\r\n          `${assessment.weightage}%`,\r\n          this.isPending(assessment) ? 'Pending' : 'Completed'\r\n        ];\r\n        csvContent += row.join(',') + '\\n';\r\n      });\r\n      \r\n      // Create and trigger download\r\n      this.downloadCSV(csvContent, 'assessments.csv');\r\n    },\r\n    \r\n    downloadCSV(csvContent, fileName) {\r\n      // Create a Blob with the CSV content\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      const url = URL.createObjectURL(blob);\r\n      \r\n      // Create a temporary link and trigger download\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', fileName);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    },\r\n    \r\n    openNotificationModal(assessment) {\r\n      // Set the selected assessment\r\n      this.selectedAssessment = assessment;\r\n      \r\n      // Pre-fill notification fields\r\n      const courseName = this.getCourseNameById(assessment.course_id);\r\n      this.notification = {\r\n        title: `${assessment.name} Update`,\r\n        message: `Dear Students,\\n\\nThe marks for ${assessment.name} in ${courseName} have been updated. Please login to view your results.\\n\\nRegards,\\n${this.getUser.name}`,\r\n        includeMarks: true\r\n      };\r\n      \r\n      // Open the modal\r\n      const modal = new bootstrap.Modal(document.getElementById('notifyStudentsModal'));\r\n      modal.show();\r\n    },\r\n    \r\n    async sendNotification() {\r\n      try {\r\n        // In a real implementation, this would make an API call to send notifications\r\n        // to all students enrolled in the course with the assessment\r\n        \r\n        // Simulate API call\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        \r\n        // Show success message\r\n        alert(`Notification sent to students in ${this.getCourseNameById(this.selectedAssessment.course_id)}`);\r\n        \r\n        // Add to recent activities\r\n        const newActivity = {\r\n          title: 'Students Notified',\r\n          description: `${this.notification.title} - ${this.getCourseNameById(this.selectedAssessment.course_id)}`,\r\n          time: 'Just now',\r\n          icon: 'fas fa-bell text-success'\r\n        };\r\n        this.recentActivities.unshift(newActivity);\r\n        if (this.recentActivities.length > 5) {\r\n          this.recentActivities.pop();\r\n        }\r\n        \r\n        // Close the modal\r\n        const modalElement = document.getElementById('notifyStudentsModal');\r\n        const modal = bootstrap.Modal.getInstance(modalElement);\r\n        modal.hide();\r\n      } catch (error) {\r\n        console.error('Error sending notification:', error);\r\n        alert('Failed to send notification. Please try again.');\r\n      }\r\n    },\r\n\r\n    logout() {\r\n      if (confirm('Are you sure you want to logout?')) {\r\n        this.$store.dispatch('auth/logout');\r\n        this.$router.push('/login');\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard h1 {\r\n  color: #2c3e50;\r\n  font-weight: 700;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  border: none;\r\n  border-radius: 10px;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.card-title {\r\n  color: #2c3e50;\r\n  font-weight: 600;\r\n}\r\n\r\n.list-group-item {\r\n  border-left: 0;\r\n  border-right: 0;\r\n  padding: 15px;\r\n  transition: background-color 0.2s ease;\r\n}\r\n\r\n.list-group-item:first-child {\r\n  border-top: 0;\r\n}\r\n\r\n.list-group-item:last-child {\r\n  border-bottom: 0;\r\n}\r\n\r\n.timeline {\r\n  position: relative;\r\n  padding-left: 30px;\r\n}\r\n\r\n.timeline-item {\r\n  position: relative;\r\n  margin-bottom: 25px;\r\n}\r\n\r\n.timeline-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.timeline-item:before {\r\n  content: '';\r\n  position: absolute;\r\n  left: -30px;\r\n  top: 0;\r\n  bottom: -25px;\r\n  width: 2px;\r\n  background-color: #e9ecef;\r\n}\r\n\r\n.timeline-item:last-child:before {\r\n  bottom: 0;\r\n}\r\n\r\n.timeline-item-icon {\r\n  position: absolute;\r\n  left: -39px;\r\n  top: 0;\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 50%;\r\n  background-color: #ffffff;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1;\r\n}\r\n\r\n.timeline-item-icon i {\r\n  font-size: 14px;\r\n}\r\n\r\n.timeline-item-content h6 {\r\n  margin-bottom: 5px;\r\n  font-weight: 600;\r\n}\r\n\r\n.badge {\r\n  padding: 6px 10px;\r\n  font-weight: 500;\r\n  text-transform: capitalize;\r\n}\r\n\r\n.table th {\r\n  font-weight: 600;\r\n  color: #2c3e50;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}