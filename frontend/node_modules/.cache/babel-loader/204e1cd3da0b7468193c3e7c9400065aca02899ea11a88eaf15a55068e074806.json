{"ast":null,"code":"import axios from 'axios';\nexport default {\n  namespaced: true,\n  state: {\n    courses: [],\n    course: null\n  },\n  getters: {\n    getAllCourses: state => state.courses,\n    getCourse: state => state.course\n  },\n  mutations: {\n    SET_COURSES(state, courses) {\n      state.courses = courses;\n    },\n    SET_COURSE(state, course) {\n      state.course = course;\n    },\n    ADD_COURSE(state, course) {\n      state.courses.push(course);\n    },\n    UPDATE_COURSE(state, updatedCourse) {\n      const index = state.courses.findIndex(c => c.id === updatedCourse.id);\n      if (index !== -1) {\n        state.courses.splice(index, 1, updatedCourse);\n      }\n      if (state.course && state.course.id === updatedCourse.id) {\n        state.course = updatedCourse;\n      }\n    },\n    DELETE_COURSE(state, courseId) {\n      state.courses = state.courses.filter(c => c.id !== courseId);\n      if (state.course && state.course.id === courseId) {\n        state.course = null;\n      }\n    }\n  },\n  actions: {\n    async fetchCourses({\n      commit,\n      dispatch\n    }, filter = {}) {\n      try {\n        dispatch('setLoading', true, {\n          root: true\n        });\n        let url = '/api/courses';\n        const params = {};\n        if (filter.lecturerId) {\n          params.lecturer_id = filter.lecturerId;\n        }\n        const response = await axios.get(url, {\n          params\n        });\n        commit('SET_COURSES', response.data);\n        return response.data;\n      } catch (error) {\n        const errorMsg = error.response?.data?.error || 'Failed to fetch courses';\n        dispatch('setError', errorMsg, {\n          root: true\n        });\n        throw new Error(errorMsg);\n      } finally {\n        dispatch('setLoading', false, {\n          root: true\n        });\n      }\n    },\n    async fetchCourse({\n      commit,\n      dispatch\n    }, courseId) {\n      try {\n        dispatch('setLoading', true, {\n          root: true\n        });\n        const response = await axios.get(`/api/courses/${courseId}`);\n        commit('SET_COURSE', response.data);\n        return response.data;\n      } catch (error) {\n        const errorMsg = error.response?.data?.error || 'Failed to fetch course';\n        dispatch('setError', errorMsg, {\n          root: true\n        });\n        throw new Error(errorMsg);\n      } finally {\n        dispatch('setLoading', false, {\n          root: true\n        });\n      }\n    },\n    async createCourse({\n      commit,\n      dispatch\n    }, courseData) {\n      try {\n        dispatch('setLoading', true, {\n          root: true\n        });\n        const response = await axios.post('/api/courses', courseData);\n        // Fetch the newly created course with complete data\n        const newCourseId = response.data.courseId;\n        const newCourseResponse = await axios.get(`/api/courses/${newCourseId}`);\n        commit('ADD_COURSE', newCourseResponse.data);\n        dispatch('showToast', {\n          message: 'Course created successfully',\n          type: 'success'\n        }, {\n          root: true\n        });\n        return newCourseResponse.data;\n      } catch (error) {\n        const errorMsg = error.response?.data?.error || 'Failed to create course';\n        dispatch('setError', errorMsg, {\n          root: true\n        });\n        throw new Error(errorMsg);\n      } finally {\n        dispatch('setLoading', false, {\n          root: true\n        });\n      }\n    },\n    async updateCourse({\n      commit,\n      dispatch\n    }, {\n      courseId,\n      courseData\n    }) {\n      try {\n        dispatch('setLoading', true, {\n          root: true\n        });\n        await axios.put(`/api/courses/${courseId}`, courseData);\n        // Fetch the updated course\n        const response = await axios.get(`/api/courses/${courseId}`);\n        commit('UPDATE_COURSE', response.data);\n        dispatch('showToast', {\n          message: 'Course updated successfully',\n          type: 'success'\n        }, {\n          root: true\n        });\n        return response.data;\n      } catch (error) {\n        const errorMsg = error.response?.data?.error || 'Failed to update course';\n        dispatch('setError', errorMsg, {\n          root: true\n        });\n        throw new Error(errorMsg);\n      } finally {\n        dispatch('setLoading', false, {\n          root: true\n        });\n      }\n    },\n    async deleteCourse({\n      commit,\n      dispatch\n    }, courseId) {\n      try {\n        dispatch('setLoading', true, {\n          root: true\n        });\n        await axios.delete(`/api/courses/${courseId}`);\n        commit('DELETE_COURSE', courseId);\n        dispatch('showToast', {\n          message: 'Course deleted successfully',\n          type: 'success'\n        }, {\n          root: true\n        });\n        return true;\n      } catch (error) {\n        const errorMsg = error.response?.data?.error || 'Failed to delete course';\n        dispatch('setError', errorMsg, {\n          root: true\n        });\n        throw new Error(errorMsg);\n      } finally {\n        dispatch('setLoading', false, {\n          root: true\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","namespaced","state","courses","course","getters","getAllCourses","getCourse","mutations","SET_COURSES","SET_COURSE","ADD_COURSE","push","UPDATE_COURSE","updatedCourse","index","findIndex","c","id","splice","DELETE_COURSE","courseId","filter","actions","fetchCourses","commit","dispatch","root","url","params","lecturerId","lecturer_id","response","get","data","error","errorMsg","Error","fetchCourse","createCourse","courseData","post","newCourseId","newCourseResponse","message","type","updateCourse","put","deleteCourse","delete"],"sources":["C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/src/store/modules/courses.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    courses: [],\r\n    course: null\r\n  },\r\n  getters: {\r\n    getAllCourses: state => state.courses,\r\n    getCourse: state => state.course\r\n  },\r\n  mutations: {\r\n    SET_COURSES(state, courses) {\r\n      state.courses = courses;\r\n    },\r\n    SET_COURSE(state, course) {\r\n      state.course = course;\r\n    },\r\n    ADD_COURSE(state, course) {\r\n      state.courses.push(course);\r\n    },\r\n    UPDATE_COURSE(state, updatedCourse) {\r\n      const index = state.courses.findIndex(c => c.id === updatedCourse.id);\r\n      if (index !== -1) {\r\n        state.courses.splice(index, 1, updatedCourse);\r\n      }\r\n      if (state.course && state.course.id === updatedCourse.id) {\r\n        state.course = updatedCourse;\r\n      }\r\n    },\r\n    DELETE_COURSE(state, courseId) {\r\n      state.courses = state.courses.filter(c => c.id !== courseId);\r\n      if (state.course && state.course.id === courseId) {\r\n        state.course = null;\r\n      }\r\n    }\r\n  },\r\n  actions: {\r\n    async fetchCourses({ commit, dispatch }, filter = {}) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        let url = '/api/courses';\r\n        const params = {};\r\n        \r\n        if (filter.lecturerId) {\r\n          params.lecturer_id = filter.lecturerId;\r\n        }\r\n        \r\n        const response = await axios.get(url, { params });\r\n        commit('SET_COURSES', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch courses';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async fetchCourse({ commit, dispatch }, courseId) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.get(`/api/courses/${courseId}`);\r\n        commit('SET_COURSE', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch course';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async createCourse({ commit, dispatch }, courseData) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.post('/api/courses', courseData);\r\n        // Fetch the newly created course with complete data\r\n        const newCourseId = response.data.courseId;\r\n        const newCourseResponse = await axios.get(`/api/courses/${newCourseId}`);\r\n        \r\n        commit('ADD_COURSE', newCourseResponse.data);\r\n        dispatch('showToast', {\r\n          message: 'Course created successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return newCourseResponse.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to create course';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async updateCourse({ commit, dispatch }, { courseId, courseData }) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        await axios.put(`/api/courses/${courseId}`, courseData);\r\n        // Fetch the updated course\r\n        const response = await axios.get(`/api/courses/${courseId}`);\r\n        \r\n        commit('UPDATE_COURSE', response.data);\r\n        dispatch('showToast', {\r\n          message: 'Course updated successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to update course';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async deleteCourse({ commit, dispatch }, courseId) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        await axios.delete(`/api/courses/${courseId}`);\r\n        \r\n        commit('DELETE_COURSE', courseId);\r\n        dispatch('showToast', {\r\n          message: 'Course deleted successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return true;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to delete course';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}