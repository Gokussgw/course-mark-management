{"ast":null,"code":"import { mapState, mapGetters, mapActions } from 'vuex';\nexport default {\n  name: 'StudentDetail',\n  data() {\n    return {\n      studentId: null,\n      courseId: null,\n      studentNotes: [],\n      selectedMark: null,\n      editMarkForm: {\n        mark: 0,\n        remarks: ''\n      },\n      noteForm: {\n        title: '',\n        content: '',\n        notify_student: false\n      },\n      editingNote: null\n    };\n  },\n  computed: {\n    ...mapState({\n      isLoading: state => state.loading,\n      course: state => state.courses.course,\n      student: state => state.users.user,\n      assessments: state => state.assessments.assessments,\n      marks: state => state.marks.marks\n    }),\n    ...mapGetters({\n      getCourseAssessments: 'assessments/getCourseAssessments'\n    }),\n    courseAssessments() {\n      if (!this.courseId) return [];\n      return this.getCourseAssessments(this.courseId) || [];\n    },\n    studentMarks() {\n      if (!this.student) return [];\n      return this.marks.filter(mark => mark.student_id === this.studentId && (!this.courseId || mark.course_id === parseInt(this.courseId)));\n    },\n    totalAssessments() {\n      return this.courseAssessments.length;\n    },\n    completedAssessments() {\n      return this.studentMarks.length;\n    },\n    overallMark() {\n      if (!this.studentMarks.length) return 0;\n      let weightedSum = 0;\n      let totalWeight = 0;\n      this.studentMarks.forEach(mark => {\n        const percentage = this.calculatePercentage(mark.mark, mark.max_mark);\n        weightedSum += percentage * mark.weightage;\n        totalWeight += parseInt(mark.weightage);\n      });\n      if (totalWeight === 0) return 0;\n      return Math.round(weightedSum / totalWeight);\n    },\n    advisorName() {\n      return this.student?.advisor_name || 'Not assigned';\n    }\n  },\n  async created() {\n    this.studentId = parseInt(this.$route.params.id);\n    this.courseId = this.$route.query.courseId;\n    try {\n      // Fetch student details\n      await this.fetchUser(this.studentId);\n      if (this.courseId) {\n        // Fetch course details if a specific course is selected\n        await this.fetchCourse(this.courseId);\n\n        // Fetch assessments for this course\n        await this.fetchAssessments({\n          courseId: this.courseId\n        });\n      }\n\n      // Fetch marks for this student\n      await this.fetchMarks({\n        studentId: this.studentId,\n        courseId: this.courseId\n      });\n\n      // Fetch notes for this student\n      await this.fetchStudentNotes();\n    } catch (error) {\n      console.error('Error loading student details:', error);\n    }\n  },\n  methods: {\n    ...mapActions({\n      fetchUser: 'users/fetchUser',\n      fetchCourse: 'courses/fetchCourse',\n      fetchAssessments: 'assessments/fetchAssessments',\n      fetchMarks: 'marks/fetchMarks',\n      updateMark: 'marks/updateMark'\n    }),\n    formatDate(dateString) {\n      if (!dateString) return 'Not specified';\n      return new Date(dateString).toLocaleDateString();\n    },\n    calculatePercentage(mark, maxMark) {\n      if (!maxMark) return 0;\n      return Math.round(mark / maxMark * 100);\n    },\n    getProgressBarClass(percentage) {\n      if (percentage >= 70) return 'bg-success';\n      if (percentage >= 50) return 'bg-warning';\n      return 'bg-danger';\n    },\n    getAssessmentTypeBadgeClass(type) {\n      const types = {\n        'exam': 'bg-danger',\n        'midterm': 'bg-warning',\n        'quiz': 'bg-info',\n        'assignment': 'bg-success',\n        'project': 'bg-primary',\n        'lab': 'bg-secondary'\n      };\n      return types[type.toLowerCase()] || 'bg-secondary';\n    },\n    calculateGrade(percentage) {\n      if (percentage >= 90) return 'A+';\n      if (percentage >= 80) return 'A';\n      if (percentage >= 75) return 'B+';\n      if (percentage >= 70) return 'B';\n      if (percentage >= 65) return 'C+';\n      if (percentage >= 60) return 'C';\n      if (percentage >= 55) return 'D+';\n      if (percentage >= 50) return 'D';\n      return 'F';\n    },\n    getGradeClass(percentage) {\n      if (percentage >= 70) return 'text-success fw-bold';\n      if (percentage >= 50) return 'text-warning';\n      return 'text-danger';\n    },\n    editMark(mark) {\n      this.selectedMark = mark;\n      this.editMarkForm = {\n        mark: mark.mark,\n        remarks: mark.remarks || ''\n      };\n\n      // In a real implementation, we would use Bootstrap's modal methods\n      // $('#editMarkModal').modal('show');\n    },\n    async saveMarkChanges() {\n      if (!this.selectedMark) return;\n      try {\n        await this.updateMark({\n          id: this.selectedMark.id,\n          mark: this.editMarkForm.mark,\n          remarks: this.editMarkForm.remarks\n        });\n\n        // Close modal\n        // $('#editMarkModal').modal('hide');\n\n        this.$store.dispatch('showToast', {\n          message: 'Mark updated successfully',\n          type: 'success'\n        });\n        this.selectedMark = null;\n      } catch (error) {\n        console.error('Error updating mark:', error);\n      }\n    },\n    async fetchStudentNotes() {\n      try {\n        // This would be replaced with an actual API call in a complete implementation\n        // For now, we'll use some sample data\n        this.studentNotes = [{\n          id: 1,\n          title: 'Excellent Progress',\n          content: 'Student has shown significant improvement in recent assessments.',\n          author: 'Dr. Smith',\n          created_at: '2023-07-15',\n          icon: 'fas fa-thumbs-up'\n        }, {\n          id: 2,\n          title: 'Attendance Concern',\n          content: 'Student has missed multiple lab sessions. Please follow up.',\n          author: 'Prof. Johnson',\n          created_at: '2023-07-10',\n          icon: 'fas fa-exclamation-triangle'\n        }];\n      } catch (error) {\n        console.error('Error fetching student notes:', error);\n      }\n    },\n    openAddNoteModal() {\n      this.editingNote = null;\n      this.noteForm = {\n        title: '',\n        content: '',\n        notify_student: false\n      };\n\n      // In a real implementation, we would use Bootstrap's modal methods\n      // $('#noteModal').modal('show');\n    },\n    editNote(note) {\n      this.editingNote = note;\n      this.noteForm = {\n        title: note.title,\n        content: note.content,\n        notify_student: false\n      };\n\n      // In a real implementation, we would use Bootstrap's modal methods\n      // $('#noteModal').modal('show');\n    },\n    async saveNoteChanges() {\n      try {\n        if (this.editingNote) {\n          // Update existing note\n          const index = this.studentNotes.findIndex(note => note.id === this.editingNote.id);\n          if (index !== -1) {\n            this.studentNotes[index] = {\n              ...this.editingNote,\n              title: this.noteForm.title,\n              content: this.noteForm.content,\n              updated_at: new Date().toISOString().split('T')[0]\n            };\n          }\n          this.$store.dispatch('showToast', {\n            message: 'Note updated successfully',\n            type: 'success'\n          });\n        } else {\n          // Add new note\n          const newNote = {\n            id: Date.now(),\n            // Temporary ID for demo\n            title: this.noteForm.title,\n            content: this.noteForm.content,\n            author: 'You',\n            created_at: new Date().toISOString().split('T')[0],\n            icon: 'fas fa-comment-alt'\n          };\n          this.studentNotes.unshift(newNote);\n          this.$store.dispatch('showToast', {\n            message: 'Note added successfully',\n            type: 'success'\n          });\n        }\n\n        // Close modal\n        // $('#noteModal').modal('hide');\n\n        this.editingNote = null;\n      } catch (error) {\n        console.error('Error saving note:', error);\n      }\n    },\n    async deleteNote(note) {\n      if (!confirm(`Are you sure you want to delete the note \"${note.title}\"?`)) return;\n      try {\n        this.studentNotes = this.studentNotes.filter(n => n.id !== note.id);\n        this.$store.dispatch('showToast', {\n          message: 'Note deleted successfully',\n          type: 'success'\n        });\n      } catch (error) {\n        console.error('Error deleting note:', error);\n      }\n    },\n    exportStudentData() {\n      // This would initiate a download of student data in CSV format\n      // Implementation would need to call an API endpoint\n      this.$store.dispatch('showToast', {\n        message: 'Exporting student data...',\n        type: 'info'\n      });\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapGetters","mapActions","name","data","studentId","courseId","studentNotes","selectedMark","editMarkForm","mark","remarks","noteForm","title","content","notify_student","editingNote","computed","isLoading","state","loading","course","courses","student","users","user","assessments","marks","getCourseAssessments","courseAssessments","studentMarks","filter","student_id","course_id","parseInt","totalAssessments","length","completedAssessments","overallMark","weightedSum","totalWeight","forEach","percentage","calculatePercentage","max_mark","weightage","Math","round","advisorName","advisor_name","created","$route","params","id","query","fetchUser","fetchCourse","fetchAssessments","fetchMarks","fetchStudentNotes","error","console","methods","updateMark","formatDate","dateString","Date","toLocaleDateString","maxMark","getProgressBarClass","getAssessmentTypeBadgeClass","type","types","toLowerCase","calculateGrade","getGradeClass","editMark","saveMarkChanges","$store","dispatch","message","author","created_at","icon","openAddNoteModal","editNote","note","saveNoteChanges","index","findIndex","updated_at","toISOString","split","newNote","now","unshift","deleteNote","confirm","n","exportStudentData"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\StudentDetail.vue"],"sourcesContent":["<template>\r\n  <div class=\"student-detail\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/lecturer/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item\" v-if=\"course\">\r\n              <router-link :to=\"`/lecturer/course/${course.id}`\">\r\n                {{ course.code }} - {{ course.name }}\r\n              </router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              {{ student ? student.name : 'Student Details' }}\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">\r\n          <span v-if=\"student\">{{ student.name }}</span>\r\n          <span v-else>Student Details</span>\r\n        </h1>\r\n        <p class=\"text-muted\" v-if=\"student\">\r\n          {{ student.email }} | Student ID: {{ student.student_id || 'N/A' }}\r\n        </p>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-outline-primary\" @click=\"exportStudentData\">\r\n          <i class=\"fas fa-file-export me-2\"></i> Export Data\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"!student\" class=\"alert alert-danger\">\r\n      Student not found or you don't have access to this student's information.\r\n    </div>\r\n\r\n    <div v-else class=\"row\">\r\n      <div class=\"col-md-4 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Student Information</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"text-center mb-4\">\r\n              <div class=\"avatar-placeholder\">\r\n                <i class=\"fas fa-user fa-3x text-muted\"></i>\r\n              </div>\r\n              <h4 class=\"mt-3\">{{ student.name }}</h4>\r\n              <p class=\"text-muted mb-1\">{{ student.email }}</p>\r\n              <p class=\"badge bg-primary\">{{ student.role }}</p>\r\n            </div>\r\n\r\n            <table class=\"table table-sm\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>Student ID:</th>\r\n                  <td>{{ student.student_id || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Department:</th>\r\n                  <td>{{ student.department || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Year:</th>\r\n                  <td>{{ student.year || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Advisor:</th>\r\n                  <td>{{ advisorName || 'Not assigned' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Joined:</th>\r\n                  <td>{{ formatDate(student.created_at) }}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-8 mb-4\">\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n            <h5 class=\"mb-0\">Course Progress</h5>\r\n            <div v-if=\"course\">\r\n              <span class=\"text-muted\">Course: </span>\r\n              <strong>{{ course.code }} - {{ course.name }}</strong>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"!course\" class=\"text-center py-3\">\r\n              <p>No specific course selected. Showing overall performance.</p>\r\n            </div>\r\n            \r\n            <div v-if=\"studentMarks.length === 0\" class=\"text-center py-3\">\r\n              <p>No assessment marks recorded for this student yet.</p>\r\n            </div>\r\n            <div v-else>\r\n              <div class=\"mb-4\">\r\n                <h6>Overall Progress</h6>\r\n                <div class=\"d-flex justify-content-between mb-1\">\r\n                  <span>Current Mark: <strong>{{ overallMark }}%</strong></span>\r\n                  <span>{{ completedAssessments }} of {{ totalAssessments }} assessments completed</span>\r\n                </div>\r\n                <div class=\"progress\" style=\"height: 20px;\">\r\n                  <div \r\n                    class=\"progress-bar\" \r\n                    :class=\"getProgressBarClass(overallMark)\"\r\n                    role=\"progressbar\" \r\n                    :style=\"`width: ${overallMark}%`\"\r\n                    :aria-valuenow=\"overallMark\" \r\n                    aria-valuemin=\"0\" \r\n                    aria-valuemax=\"100\">\r\n                    {{ overallMark }}%\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"table-responsive\">\r\n                <table class=\"table table-hover\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Assessment</th>\r\n                      <th>Type</th>\r\n                      <th>Weight</th>\r\n                      <th>Mark</th>\r\n                      <th>Grade</th>\r\n                      <th>Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr v-for=\"mark in studentMarks\" :key=\"mark.id\">\r\n                      <td>{{ mark.assessment_name }}</td>\r\n                      <td>\r\n                        <span class=\"badge\" :class=\"getAssessmentTypeBadgeClass(mark.assessment_type)\">\r\n                          {{ mark.assessment_type }}\r\n                        </span>\r\n                      </td>\r\n                      <td>{{ mark.weightage }}%</td>\r\n                      <td>\r\n                        <strong>{{ mark.mark }}</strong> / {{ mark.max_mark }}\r\n                        <div class=\"small text-muted\">\r\n                          ({{ calculatePercentage(mark.mark, mark.max_mark) }}%)\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <span :class=\"getGradeClass(calculatePercentage(mark.mark, mark.max_mark))\">\r\n                          {{ calculateGrade(calculatePercentage(mark.mark, mark.max_mark)) }}\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <button \r\n                          class=\"btn btn-sm btn-outline-primary\" \r\n                          @click=\"editMark(mark)\"\r\n                        >\r\n                          <i class=\"fas fa-edit\"></i> Edit\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n            <h5 class=\"mb-0\">Feedback & Notes</h5>\r\n            <button class=\"btn btn-sm btn-primary\" @click=\"openAddNoteModal\">\r\n              <i class=\"fas fa-plus-circle me-1\"></i> Add Note\r\n            </button>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"studentNotes.length === 0\" class=\"text-center py-3\">\r\n              <p>No feedback or notes have been added for this student yet.</p>\r\n            </div>\r\n            <div v-else class=\"timeline\">\r\n              <div class=\"timeline-item\" v-for=\"(note, index) in studentNotes\" :key=\"index\">\r\n                <div class=\"timeline-item-icon\">\r\n                  <i :class=\"note.icon || 'fas fa-comment-alt'\"></i>\r\n                </div>\r\n                <div class=\"timeline-item-content\">\r\n                  <div class=\"d-flex justify-content-between align-items-start\">\r\n                    <h6>{{ note.title || 'Feedback' }}</h6>\r\n                    <div class=\"btn-group btn-group-sm\">\r\n                      <button class=\"btn btn-link text-secondary p-0\" @click=\"editNote(note)\">\r\n                        <i class=\"fas fa-edit\"></i>\r\n                      </button>\r\n                      <button class=\"btn btn-link text-danger p-0 ms-2\" @click=\"deleteNote(note)\">\r\n                        <i class=\"fas fa-trash\"></i>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                  <p>{{ note.content }}</p>\r\n                  <small class=\"text-muted\">\r\n                    {{ note.author || 'You' }} - {{ formatDate(note.created_at) }}\r\n                  </small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Edit Mark Modal -->\r\n    <div class=\"modal fade\" id=\"editMarkModal\" tabindex=\"-1\" aria-labelledby=\"editMarkModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"editMarkModalLabel\">Edit Mark</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <div v-if=\"selectedMark\">\r\n              <div class=\"mb-3\">\r\n                <label for=\"markInput\" class=\"form-label\">Mark for {{ selectedMark.assessment_name }}</label>\r\n                <div class=\"input-group\">\r\n                  <input \r\n                    type=\"number\" \r\n                    class=\"form-control\" \r\n                    id=\"markInput\" \r\n                    v-model.number=\"editMarkForm.mark\" \r\n                    :min=\"0\" \r\n                    :max=\"selectedMark.max_mark\"\r\n                  >\r\n                  <span class=\"input-group-text\">/ {{ selectedMark.max_mark }}</span>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label for=\"remarkInput\" class=\"form-label\">Feedback (optional)</label>\r\n                <textarea \r\n                  class=\"form-control\" \r\n                  id=\"remarkInput\" \r\n                  v-model=\"editMarkForm.remarks\" \r\n                  rows=\"3\"\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"saveMarkChanges\">Save Changes</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Add/Edit Note Modal -->\r\n    <div class=\"modal fade\" id=\"noteModal\" tabindex=\"-1\" aria-labelledby=\"noteModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"noteModalLabel\">{{ editingNote ? 'Edit Note' : 'Add Note' }}</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <div class=\"mb-3\">\r\n              <label for=\"noteTitle\" class=\"form-label\">Title</label>\r\n              <input \r\n                type=\"text\" \r\n                class=\"form-control\" \r\n                id=\"noteTitle\" \r\n                v-model=\"noteForm.title\" \r\n                placeholder=\"e.g., Attendance Issue, Good Progress\"\r\n              >\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <label for=\"noteContent\" class=\"form-label\">Content</label>\r\n              <textarea \r\n                class=\"form-control\" \r\n                id=\"noteContent\" \r\n                v-model=\"noteForm.content\" \r\n                rows=\"4\"\r\n                placeholder=\"Enter your note or feedback here...\"\r\n              ></textarea>\r\n            </div>\r\n            <div class=\"mb-3 form-check\">\r\n              <input type=\"checkbox\" class=\"form-check-input\" id=\"notifyStudent\" v-model=\"noteForm.notify_student\">\r\n              <label class=\"form-check-label\" for=\"notifyStudent\">Notify student</label>\r\n              <small class=\"text-muted d-block\">If checked, the student will be notified about this note.</small>\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"saveNoteChanges\">Save</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'StudentDetail',\r\n  data() {\r\n    return {\r\n      studentId: null,\r\n      courseId: null,\r\n      studentNotes: [],\r\n      selectedMark: null,\r\n      editMarkForm: {\r\n        mark: 0,\r\n        remarks: ''\r\n      },\r\n      noteForm: {\r\n        title: '',\r\n        content: '',\r\n        notify_student: false\r\n      },\r\n      editingNote: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      isLoading: state => state.loading,\r\n      course: state => state.courses.course,\r\n      student: state => state.users.user,\r\n      assessments: state => state.assessments.assessments,\r\n      marks: state => state.marks.marks\r\n    }),\r\n    ...mapGetters({\r\n      getCourseAssessments: 'assessments/getCourseAssessments'\r\n    }),\r\n    courseAssessments() {\r\n      if (!this.courseId) return [];\r\n      return this.getCourseAssessments(this.courseId) || [];\r\n    },\r\n    studentMarks() {\r\n      if (!this.student) return [];\r\n      \r\n      return this.marks.filter(mark => \r\n        mark.student_id === this.studentId && \r\n        (!this.courseId || mark.course_id === parseInt(this.courseId))\r\n      );\r\n    },\r\n    totalAssessments() {\r\n      return this.courseAssessments.length;\r\n    },\r\n    completedAssessments() {\r\n      return this.studentMarks.length;\r\n    },\r\n    overallMark() {\r\n      if (!this.studentMarks.length) return 0;\r\n      \r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      this.studentMarks.forEach(mark => {\r\n        const percentage = this.calculatePercentage(mark.mark, mark.max_mark);\r\n        weightedSum += percentage * mark.weightage;\r\n        totalWeight += parseInt(mark.weightage);\r\n      });\r\n      \r\n      if (totalWeight === 0) return 0;\r\n      return Math.round(weightedSum / totalWeight);\r\n    },\r\n    advisorName() {\r\n      return this.student?.advisor_name || 'Not assigned';\r\n    }\r\n  },\r\n  async created() {\r\n    this.studentId = parseInt(this.$route.params.id);\r\n    this.courseId = this.$route.query.courseId;\r\n    \r\n    try {\r\n      // Fetch student details\r\n      await this.fetchUser(this.studentId);\r\n      \r\n      if (this.courseId) {\r\n        // Fetch course details if a specific course is selected\r\n        await this.fetchCourse(this.courseId);\r\n        \r\n        // Fetch assessments for this course\r\n        await this.fetchAssessments({ courseId: this.courseId });\r\n      }\r\n      \r\n      // Fetch marks for this student\r\n      await this.fetchMarks({ \r\n        studentId: this.studentId,\r\n        courseId: this.courseId\r\n      });\r\n      \r\n      // Fetch notes for this student\r\n      await this.fetchStudentNotes();\r\n    } catch (error) {\r\n      console.error('Error loading student details:', error);\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchUser: 'users/fetchUser',\r\n      fetchCourse: 'courses/fetchCourse',\r\n      fetchAssessments: 'assessments/fetchAssessments',\r\n      fetchMarks: 'marks/fetchMarks',\r\n      updateMark: 'marks/updateMark'\r\n    }),\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not specified';\r\n      return new Date(dateString).toLocaleDateString();\r\n    },\r\n    calculatePercentage(mark, maxMark) {\r\n      if (!maxMark) return 0;\r\n      return Math.round((mark / maxMark) * 100);\r\n    },\r\n    getProgressBarClass(percentage) {\r\n      if (percentage >= 70) return 'bg-success';\r\n      if (percentage >= 50) return 'bg-warning';\r\n      return 'bg-danger';\r\n    },\r\n    getAssessmentTypeBadgeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    calculateGrade(percentage) {\r\n      if (percentage >= 90) return 'A+';\r\n      if (percentage >= 80) return 'A';\r\n      if (percentage >= 75) return 'B+';\r\n      if (percentage >= 70) return 'B';\r\n      if (percentage >= 65) return 'C+';\r\n      if (percentage >= 60) return 'C';\r\n      if (percentage >= 55) return 'D+';\r\n      if (percentage >= 50) return 'D';\r\n      return 'F';\r\n    },\r\n    getGradeClass(percentage) {\r\n      if (percentage >= 70) return 'text-success fw-bold';\r\n      if (percentage >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    editMark(mark) {\r\n      this.selectedMark = mark;\r\n      this.editMarkForm = {\r\n        mark: mark.mark,\r\n        remarks: mark.remarks || ''\r\n      };\r\n      \r\n      // In a real implementation, we would use Bootstrap's modal methods\r\n      // $('#editMarkModal').modal('show');\r\n    },\r\n    async saveMarkChanges() {\r\n      if (!this.selectedMark) return;\r\n      \r\n      try {\r\n        await this.updateMark({\r\n          id: this.selectedMark.id,\r\n          mark: this.editMarkForm.mark,\r\n          remarks: this.editMarkForm.remarks\r\n        });\r\n        \r\n        // Close modal\r\n        // $('#editMarkModal').modal('hide');\r\n        \r\n        this.$store.dispatch('showToast', {\r\n          message: 'Mark updated successfully',\r\n          type: 'success'\r\n        });\r\n        \r\n        this.selectedMark = null;\r\n      } catch (error) {\r\n        console.error('Error updating mark:', error);\r\n      }\r\n    },\r\n    async fetchStudentNotes() {\r\n      try {\r\n        // This would be replaced with an actual API call in a complete implementation\r\n        // For now, we'll use some sample data\r\n        this.studentNotes = [\r\n          {\r\n            id: 1,\r\n            title: 'Excellent Progress',\r\n            content: 'Student has shown significant improvement in recent assessments.',\r\n            author: 'Dr. Smith',\r\n            created_at: '2023-07-15',\r\n            icon: 'fas fa-thumbs-up'\r\n          },\r\n          {\r\n            id: 2,\r\n            title: 'Attendance Concern',\r\n            content: 'Student has missed multiple lab sessions. Please follow up.',\r\n            author: 'Prof. Johnson',\r\n            created_at: '2023-07-10',\r\n            icon: 'fas fa-exclamation-triangle'\r\n          }\r\n        ];\r\n      } catch (error) {\r\n        console.error('Error fetching student notes:', error);\r\n      }\r\n    },\r\n    openAddNoteModal() {\r\n      this.editingNote = null;\r\n      this.noteForm = {\r\n        title: '',\r\n        content: '',\r\n        notify_student: false\r\n      };\r\n      \r\n      // In a real implementation, we would use Bootstrap's modal methods\r\n      // $('#noteModal').modal('show');\r\n    },\r\n    editNote(note) {\r\n      this.editingNote = note;\r\n      this.noteForm = {\r\n        title: note.title,\r\n        content: note.content,\r\n        notify_student: false\r\n      };\r\n      \r\n      // In a real implementation, we would use Bootstrap's modal methods\r\n      // $('#noteModal').modal('show');\r\n    },\r\n    async saveNoteChanges() {\r\n      try {\r\n        if (this.editingNote) {\r\n          // Update existing note\r\n          const index = this.studentNotes.findIndex(note => note.id === this.editingNote.id);\r\n          if (index !== -1) {\r\n            this.studentNotes[index] = {\r\n              ...this.editingNote,\r\n              title: this.noteForm.title,\r\n              content: this.noteForm.content,\r\n              updated_at: new Date().toISOString().split('T')[0]\r\n            };\r\n          }\r\n          \r\n          this.$store.dispatch('showToast', {\r\n            message: 'Note updated successfully',\r\n            type: 'success'\r\n          });\r\n        } else {\r\n          // Add new note\r\n          const newNote = {\r\n            id: Date.now(), // Temporary ID for demo\r\n            title: this.noteForm.title,\r\n            content: this.noteForm.content,\r\n            author: 'You',\r\n            created_at: new Date().toISOString().split('T')[0],\r\n            icon: 'fas fa-comment-alt'\r\n          };\r\n          \r\n          this.studentNotes.unshift(newNote);\r\n          \r\n          this.$store.dispatch('showToast', {\r\n            message: 'Note added successfully',\r\n            type: 'success'\r\n          });\r\n        }\r\n        \r\n        // Close modal\r\n        // $('#noteModal').modal('hide');\r\n        \r\n        this.editingNote = null;\r\n      } catch (error) {\r\n        console.error('Error saving note:', error);\r\n      }\r\n    },\r\n    async deleteNote(note) {\r\n      if (!confirm(`Are you sure you want to delete the note \"${note.title}\"?`)) return;\r\n      \r\n      try {\r\n        this.studentNotes = this.studentNotes.filter(n => n.id !== note.id);\r\n        \r\n        this.$store.dispatch('showToast', {\r\n          message: 'Note deleted successfully',\r\n          type: 'success'\r\n        });\r\n      } catch (error) {\r\n        console.error('Error deleting note:', error);\r\n      }\r\n    },\r\n    exportStudentData() {\r\n      // This would initiate a download of student data in CSV format\r\n      // Implementation would need to call an API endpoint\r\n      this.$store.dispatch('showToast', {\r\n        message: 'Exporting student data...',\r\n        type: 'info'\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.student-detail h1 {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n}\r\n\r\n.avatar-placeholder {\r\n  width: 80px;\r\n  height: 80px;\r\n  border-radius: 50%;\r\n  background-color: #f8f9fa;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 0 auto;\r\n  border: 1px solid #dee2e6;\r\n}\r\n\r\n/* Timeline styling for notes */\r\n.timeline {\r\n  position: relative;\r\n  padding-left: 40px;\r\n}\r\n\r\n.timeline-item {\r\n  position: relative;\r\n  margin-bottom: 20px;\r\n  padding-bottom: 20px;\r\n  border-bottom: 1px solid #e9ecef;\r\n}\r\n\r\n.timeline-item:last-child {\r\n  border-bottom: none;\r\n  padding-bottom: 0;\r\n}\r\n\r\n.timeline-item:before {\r\n  content: \"\";\r\n  position: absolute;\r\n  left: -30px;\r\n  top: 0;\r\n  height: 100%;\r\n  width: 2px;\r\n  background-color: #e9ecef;\r\n}\r\n\r\n.timeline-item:last-child:before {\r\n  height: 50%;\r\n}\r\n\r\n.timeline-item-icon {\r\n  position: absolute;\r\n  left: -38px;\r\n  top: 0;\r\n  width: 16px;\r\n  height: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #fff;\r\n  border: 2px solid #007bff;\r\n  border-radius: 50%;\r\n}\r\n\r\n.timeline-item-icon i {\r\n  font-size: 8px;\r\n  color: #007bff;\r\n}\r\n</style>\r\n"],"mappings":"AA+SA,SAASA,QAAQ,EAAEC,UAAU,EAAEC,UAAS,QAAS,MAAK;AAEtD,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,IAAI;MACfC,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE,IAAI;MAClBC,YAAY,EAAE;QACZC,IAAI,EAAE,CAAC;QACPC,OAAO,EAAE;MACX,CAAC;MACDC,QAAQ,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE,EAAE;QACXC,cAAc,EAAE;MAClB,CAAC;MACDC,WAAW,EAAE;IACf;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGjB,QAAQ,CAAC;MACVkB,SAAS,EAAEC,KAAI,IAAKA,KAAK,CAACC,OAAO;MACjCC,MAAM,EAAEF,KAAI,IAAKA,KAAK,CAACG,OAAO,CAACD,MAAM;MACrCE,OAAO,EAAEJ,KAAI,IAAKA,KAAK,CAACK,KAAK,CAACC,IAAI;MAClCC,WAAW,EAAEP,KAAI,IAAKA,KAAK,CAACO,WAAW,CAACA,WAAW;MACnDC,KAAK,EAAER,KAAI,IAAKA,KAAK,CAACQ,KAAK,CAACA;IAC9B,CAAC,CAAC;IACF,GAAG1B,UAAU,CAAC;MACZ2B,oBAAoB,EAAE;IACxB,CAAC,CAAC;IACFC,iBAAiBA,CAAA,EAAG;MAClB,IAAI,CAAC,IAAI,CAACvB,QAAQ,EAAE,OAAO,EAAE;MAC7B,OAAO,IAAI,CAACsB,oBAAoB,CAAC,IAAI,CAACtB,QAAQ,KAAK,EAAE;IACvD,CAAC;IACDwB,YAAYA,CAAA,EAAG;MACb,IAAI,CAAC,IAAI,CAACP,OAAO,EAAE,OAAO,EAAE;MAE5B,OAAO,IAAI,CAACI,KAAK,CAACI,MAAM,CAACrB,IAAG,IAC1BA,IAAI,CAACsB,UAAS,KAAM,IAAI,CAAC3B,SAAQ,KAChC,CAAC,IAAI,CAACC,QAAO,IAAKI,IAAI,CAACuB,SAAQ,KAAMC,QAAQ,CAAC,IAAI,CAAC5B,QAAQ,CAAC,CAC/D,CAAC;IACH,CAAC;IACD6B,gBAAgBA,CAAA,EAAG;MACjB,OAAO,IAAI,CAACN,iBAAiB,CAACO,MAAM;IACtC,CAAC;IACDC,oBAAoBA,CAAA,EAAG;MACrB,OAAO,IAAI,CAACP,YAAY,CAACM,MAAM;IACjC,CAAC;IACDE,WAAWA,CAAA,EAAG;MACZ,IAAI,CAAC,IAAI,CAACR,YAAY,CAACM,MAAM,EAAE,OAAO,CAAC;MAEvC,IAAIG,WAAU,GAAI,CAAC;MACnB,IAAIC,WAAU,GAAI,CAAC;MAEnB,IAAI,CAACV,YAAY,CAACW,OAAO,CAAC/B,IAAG,IAAK;QAChC,MAAMgC,UAAS,GAAI,IAAI,CAACC,mBAAmB,CAACjC,IAAI,CAACA,IAAI,EAAEA,IAAI,CAACkC,QAAQ,CAAC;QACrEL,WAAU,IAAKG,UAAS,GAAIhC,IAAI,CAACmC,SAAS;QAC1CL,WAAU,IAAKN,QAAQ,CAACxB,IAAI,CAACmC,SAAS,CAAC;MACzC,CAAC,CAAC;MAEF,IAAIL,WAAU,KAAM,CAAC,EAAE,OAAO,CAAC;MAC/B,OAAOM,IAAI,CAACC,KAAK,CAACR,WAAU,GAAIC,WAAW,CAAC;IAC9C,CAAC;IACDQ,WAAWA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACzB,OAAO,EAAE0B,YAAW,IAAK,cAAc;IACrD;EACF,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI,CAAC7C,SAAQ,GAAI6B,QAAQ,CAAC,IAAI,CAACiB,MAAM,CAACC,MAAM,CAACC,EAAE,CAAC;IAChD,IAAI,CAAC/C,QAAO,GAAI,IAAI,CAAC6C,MAAM,CAACG,KAAK,CAAChD,QAAQ;IAE1C,IAAI;MACF;MACA,MAAM,IAAI,CAACiD,SAAS,CAAC,IAAI,CAAClD,SAAS,CAAC;MAEpC,IAAI,IAAI,CAACC,QAAQ,EAAE;QACjB;QACA,MAAM,IAAI,CAACkD,WAAW,CAAC,IAAI,CAAClD,QAAQ,CAAC;;QAErC;QACA,MAAM,IAAI,CAACmD,gBAAgB,CAAC;UAAEnD,QAAQ,EAAE,IAAI,CAACA;QAAS,CAAC,CAAC;MAC1D;;MAEA;MACA,MAAM,IAAI,CAACoD,UAAU,CAAC;QACpBrD,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBC,QAAQ,EAAE,IAAI,CAACA;MACjB,CAAC,CAAC;;MAEF;MACA,MAAM,IAAI,CAACqD,iBAAiB,CAAC,CAAC;IAChC,EAAE,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC;EACDE,OAAO,EAAE;IACP,GAAG5D,UAAU,CAAC;MACZqD,SAAS,EAAE,iBAAiB;MAC5BC,WAAW,EAAE,qBAAqB;MAClCC,gBAAgB,EAAE,8BAA8B;MAChDC,UAAU,EAAE,kBAAkB;MAC9BK,UAAU,EAAE;IACd,CAAC,CAAC;IACFC,UAAUA,CAACC,UAAU,EAAE;MACrB,IAAI,CAACA,UAAU,EAAE,OAAO,eAAe;MACvC,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACE,kBAAkB,CAAC,CAAC;IAClD,CAAC;IACDxB,mBAAmBA,CAACjC,IAAI,EAAE0D,OAAO,EAAE;MACjC,IAAI,CAACA,OAAO,EAAE,OAAO,CAAC;MACtB,OAAOtB,IAAI,CAACC,KAAK,CAAErC,IAAG,GAAI0D,OAAO,GAAI,GAAG,CAAC;IAC3C,CAAC;IACDC,mBAAmBA,CAAC3B,UAAU,EAAE;MAC9B,IAAIA,UAAS,IAAK,EAAE,EAAE,OAAO,YAAY;MACzC,IAAIA,UAAS,IAAK,EAAE,EAAE,OAAO,YAAY;MACzC,OAAO,WAAW;IACpB,CAAC;IACD4B,2BAA2BA,CAACC,IAAI,EAAE;MAChC,MAAMC,KAAI,GAAI;QACZ,MAAM,EAAE,WAAW;QACnB,SAAS,EAAE,YAAY;QACvB,MAAM,EAAE,SAAS;QACjB,YAAY,EAAE,YAAY;QAC1B,SAAS,EAAE,YAAY;QACvB,KAAK,EAAE;MACT,CAAC;MACD,OAAOA,KAAK,CAACD,IAAI,CAACE,WAAW,CAAC,CAAC,KAAK,cAAc;IACpD,CAAC;IACDC,cAAcA,CAAChC,UAAU,EAAE;MACzB,IAAIA,UAAS,IAAK,EAAE,EAAE,OAAO,IAAI;MACjC,IAAIA,UAAS,IAAK,EAAE,EAAE,OAAO,GAAG;MAChC,IAAIA,UAAS,IAAK,EAAE,EAAE,OAAO,IAAI;MACjC,IAAIA,UAAS,IAAK,EAAE,EAAE,OAAO,GAAG;MAChC,IAAIA,UAAS,IAAK,EAAE,EAAE,OAAO,IAAI;MACjC,IAAIA,UAAS,IAAK,EAAE,EAAE,OAAO,GAAG;MAChC,IAAIA,UAAS,IAAK,EAAE,EAAE,OAAO,IAAI;MACjC,IAAIA,UAAS,IAAK,EAAE,EAAE,OAAO,GAAG;MAChC,OAAO,GAAG;IACZ,CAAC;IACDiC,aAAaA,CAACjC,UAAU,EAAE;MACxB,IAAIA,UAAS,IAAK,EAAE,EAAE,OAAO,sBAAsB;MACnD,IAAIA,UAAS,IAAK,EAAE,EAAE,OAAO,cAAc;MAC3C,OAAO,aAAa;IACtB,CAAC;IACDkC,QAAQA,CAAClE,IAAI,EAAE;MACb,IAAI,CAACF,YAAW,GAAIE,IAAI;MACxB,IAAI,CAACD,YAAW,GAAI;QAClBC,IAAI,EAAEA,IAAI,CAACA,IAAI;QACfC,OAAO,EAAED,IAAI,CAACC,OAAM,IAAK;MAC3B,CAAC;;MAED;MACA;IACF,CAAC;IACD,MAAMkE,eAAeA,CAAA,EAAG;MACtB,IAAI,CAAC,IAAI,CAACrE,YAAY,EAAE;MAExB,IAAI;QACF,MAAM,IAAI,CAACuD,UAAU,CAAC;UACpBV,EAAE,EAAE,IAAI,CAAC7C,YAAY,CAAC6C,EAAE;UACxB3C,IAAI,EAAE,IAAI,CAACD,YAAY,CAACC,IAAI;UAC5BC,OAAO,EAAE,IAAI,CAACF,YAAY,CAACE;QAC7B,CAAC,CAAC;;QAEF;QACA;;QAEA,IAAI,CAACmE,MAAM,CAACC,QAAQ,CAAC,WAAW,EAAE;UAChCC,OAAO,EAAE,2BAA2B;UACpCT,IAAI,EAAE;QACR,CAAC,CAAC;QAEF,IAAI,CAAC/D,YAAW,GAAI,IAAI;MAC1B,EAAE,OAAOoD,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACD,MAAMD,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF;QACA;QACA,IAAI,CAACpD,YAAW,GAAI,CAClB;UACE8C,EAAE,EAAE,CAAC;UACLxC,KAAK,EAAE,oBAAoB;UAC3BC,OAAO,EAAE,kEAAkE;UAC3EmE,MAAM,EAAE,WAAW;UACnBC,UAAU,EAAE,YAAY;UACxBC,IAAI,EAAE;QACR,CAAC,EACD;UACE9B,EAAE,EAAE,CAAC;UACLxC,KAAK,EAAE,oBAAoB;UAC3BC,OAAO,EAAE,6DAA6D;UACtEmE,MAAM,EAAE,eAAe;UACvBC,UAAU,EAAE,YAAY;UACxBC,IAAI,EAAE;QACR,EACD;MACH,EAAE,OAAOvB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IACDwB,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAACpE,WAAU,GAAI,IAAI;MACvB,IAAI,CAACJ,QAAO,GAAI;QACdC,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE,EAAE;QACXC,cAAc,EAAE;MAClB,CAAC;;MAED;MACA;IACF,CAAC;IACDsE,QAAQA,CAACC,IAAI,EAAE;MACb,IAAI,CAACtE,WAAU,GAAIsE,IAAI;MACvB,IAAI,CAAC1E,QAAO,GAAI;QACdC,KAAK,EAAEyE,IAAI,CAACzE,KAAK;QACjBC,OAAO,EAAEwE,IAAI,CAACxE,OAAO;QACrBC,cAAc,EAAE;MAClB,CAAC;;MAED;MACA;IACF,CAAC;IACD,MAAMwE,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,IAAI,IAAI,CAACvE,WAAW,EAAE;UACpB;UACA,MAAMwE,KAAI,GAAI,IAAI,CAACjF,YAAY,CAACkF,SAAS,CAACH,IAAG,IAAKA,IAAI,CAACjC,EAAC,KAAM,IAAI,CAACrC,WAAW,CAACqC,EAAE,CAAC;UAClF,IAAImC,KAAI,KAAM,CAAC,CAAC,EAAE;YAChB,IAAI,CAACjF,YAAY,CAACiF,KAAK,IAAI;cACzB,GAAG,IAAI,CAACxE,WAAW;cACnBH,KAAK,EAAE,IAAI,CAACD,QAAQ,CAACC,KAAK;cAC1BC,OAAO,EAAE,IAAI,CAACF,QAAQ,CAACE,OAAO;cAC9B4E,UAAU,EAAE,IAAIxB,IAAI,CAAC,CAAC,CAACyB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YACnD,CAAC;UACH;UAEA,IAAI,CAACd,MAAM,CAACC,QAAQ,CAAC,WAAW,EAAE;YAChCC,OAAO,EAAE,2BAA2B;YACpCT,IAAI,EAAE;UACR,CAAC,CAAC;QACJ,OAAO;UACL;UACA,MAAMsB,OAAM,GAAI;YACdxC,EAAE,EAAEa,IAAI,CAAC4B,GAAG,CAAC,CAAC;YAAE;YAChBjF,KAAK,EAAE,IAAI,CAACD,QAAQ,CAACC,KAAK;YAC1BC,OAAO,EAAE,IAAI,CAACF,QAAQ,CAACE,OAAO;YAC9BmE,MAAM,EAAE,KAAK;YACbC,UAAU,EAAE,IAAIhB,IAAI,CAAC,CAAC,CAACyB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAClDT,IAAI,EAAE;UACR,CAAC;UAED,IAAI,CAAC5E,YAAY,CAACwF,OAAO,CAACF,OAAO,CAAC;UAElC,IAAI,CAACf,MAAM,CAACC,QAAQ,CAAC,WAAW,EAAE;YAChCC,OAAO,EAAE,yBAAyB;YAClCT,IAAI,EAAE;UACR,CAAC,CAAC;QACJ;;QAEA;QACA;;QAEA,IAAI,CAACvD,WAAU,GAAI,IAAI;MACzB,EAAE,OAAO4C,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C;IACF,CAAC;IACD,MAAMoC,UAAUA,CAACV,IAAI,EAAE;MACrB,IAAI,CAACW,OAAO,CAAC,6CAA6CX,IAAI,CAACzE,KAAK,IAAI,CAAC,EAAE;MAE3E,IAAI;QACF,IAAI,CAACN,YAAW,GAAI,IAAI,CAACA,YAAY,CAACwB,MAAM,CAACmE,CAAA,IAAKA,CAAC,CAAC7C,EAAC,KAAMiC,IAAI,CAACjC,EAAE,CAAC;QAEnE,IAAI,CAACyB,MAAM,CAACC,QAAQ,CAAC,WAAW,EAAE;UAChCC,OAAO,EAAE,2BAA2B;UACpCT,IAAI,EAAE;QACR,CAAC,CAAC;MACJ,EAAE,OAAOX,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACDuC,iBAAiBA,CAAA,EAAG;MAClB;MACA;MACA,IAAI,CAACrB,MAAM,CAACC,QAAQ,CAAC,WAAW,EAAE;QAChCC,OAAO,EAAE,2BAA2B;QACpCT,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}