{"ast":null,"code":"import _regenerator from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'MarkSimulation',\n  data: function data() {\n    return {\n      courseId: null,\n      isLoading: true,\n      course: null,\n      assessments: [],\n      performance: null,\n      simulatedMarks: {},\n      // assessment_type -> simulated_mark\n      requiredMarks: {\n        pass: 0,\n        distinction: 0,\n        a_grade: 0\n      },\n      error: null\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters(\"auth\", [\"getUser\"])), {}, {\n    userId: function userId() {\n      return this.getUser ? this.getUser.id : null;\n    },\n    sortedAssessments: function sortedAssessments() {\n      return _toConsumableArray(this.assessments).sort(function (a, b) {\n        // Sort by weightage (highest first)\n        return b.weightage - a.weightage;\n      });\n    },\n    currentOverallMark: function currentOverallMark() {\n      return this.performance ? this.performance.overall_percentage : 0;\n    },\n    simulatedOverallMark: function simulatedOverallMark() {\n      var _this = this;\n      var weightedSum = 0;\n      var totalWeight = 0;\n      this.assessments.forEach(function (assessment) {\n        var simulatedMark = _this.simulatedMarks[assessment.assessment_type];\n        var actualMark = parseFloat(assessment.mark) || 0;\n        var weight = parseFloat(assessment.weightage);\n\n        // Use simulated mark if available, otherwise use actual mark\n        var markToUse = simulatedMark !== undefined ? simulatedMark : actualMark;\n        var percentage = _this.calculatePercentage(markToUse, parseFloat(assessment.max_mark));\n        weightedSum += percentage * weight;\n        totalWeight += weight;\n      });\n      if (totalWeight === 0) return 0;\n      return Math.round(weightedSum / totalWeight);\n    },\n    simulatedGrade: function simulatedGrade() {\n      return this.calculateGrade(this.simulatedOverallMark);\n    },\n    simulatedGPA: function simulatedGPA() {\n      return this.calculateGPA(this.simulatedOverallMark);\n    },\n    markChange: function markChange() {\n      return this.simulatedOverallMark - this.currentOverallMark;\n    },\n    getSimulatedMarkClass: function getSimulatedMarkClass() {\n      if (this.simulatedOverallMark >= 80) return 'text-success';\n      if (this.simulatedOverallMark >= 70) return 'text-primary';\n      if (this.simulatedOverallMark >= 60) return 'text-warning';\n      return 'text-danger';\n    },\n    getSimulatedGradeBadgeClass: function getSimulatedGradeBadgeClass() {\n      var grade = this.simulatedGrade;\n      if (['A+', 'A', 'A-'].includes(grade)) return 'bg-success';\n      if (['B+', 'B', 'B-'].includes(grade)) return 'bg-primary';\n      if (['C+', 'C', 'C-'].includes(grade)) return 'bg-warning';\n      if (['D+', 'D'].includes(grade)) return 'bg-orange';\n      return 'bg-danger';\n    },\n    getCurrentMarkClass: function getCurrentMarkClass() {\n      if (this.currentOverallMark >= 80) return 'text-success';\n      if (this.currentOverallMark >= 70) return 'text-primary';\n      if (this.currentOverallMark >= 60) return 'text-warning';\n      return 'text-danger';\n    },\n    getMarkChangeClass: function getMarkChangeClass() {\n      if (this.markChange > 0) return 'text-success';\n      if (this.markChange < 0) return 'text-danger';\n      return 'text-muted';\n    },\n    unassessedItems: function unassessedItems() {\n      var _this2 = this;\n      return this.assessments.filter(function (assessment) {\n        return assessment.mark_id === null || _this2.isSimulatedAssessment(assessment.assessment_type);\n      });\n    },\n    totalRemainingWeight: function totalRemainingWeight() {\n      return this.unassessedItems.reduce(function (sum, assessment) {\n        return sum + parseFloat(assessment.weightage);\n      }, 0);\n    }\n  }),\n  created: function created() {\n    var _this3 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            _this3.courseId = parseInt(_this3.$route.params.id);\n            console.log('MarkSimulation created, getUser:', _this3.getUser);\n\n            // Wait a bit for authentication to be ready, then try to load data\n            setTimeout(function () {\n              console.log('After timeout, getUser:', _this3.getUser);\n              if (_this3.getUser) {\n                _this3.loadCourseData();\n              } else {\n                _this3.error = 'Please log in to access the grade simulator';\n                _this3.isLoading = false;\n              }\n            }, 100);\n          case 1:\n            return _context.a(2);\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    loadCourseData: function loadCourseData() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var requestData, response, errorText, data, _t;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              _this4.isLoading = true;\n              _this4.error = null;\n              if (_this4.userId) {\n                _context2.n = 1;\n                break;\n              }\n              _this4.error = 'User not authenticated';\n              _this4.isLoading = false;\n              return _context2.a(2);\n            case 1:\n              _context2.p = 1;\n              requestData = {\n                student_id: _this4.userId,\n                course_id: _this4.courseId\n              };\n              _context2.n = 2;\n              return fetch('http://localhost:8000/api/marks/student_course_detail', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(requestData)\n              });\n            case 2:\n              response = _context2.v;\n              if (response.ok) {\n                _context2.n = 4;\n                break;\n              }\n              _context2.n = 3;\n              return response.text();\n            case 3:\n              errorText = _context2.v;\n              throw new Error(\"HTTP error! status: \".concat(response.status, \", body: \").concat(errorText));\n            case 4:\n              _context2.n = 5;\n              return response.json();\n            case 5:\n              data = _context2.v;\n              if (data.success) {\n                _this4.course = data.course;\n                _this4.assessments = data.assessments;\n                _this4.performance = data.performance;\n\n                // Initialize simulation\n                _this4.initializeSimulation();\n                _this4.calculateRequiredMarks();\n              } else {\n                _this4.error = data.error || 'Failed to load course data';\n              }\n              _context2.n = 7;\n              break;\n            case 6:\n              _context2.p = 6;\n              _t = _context2.v;\n              console.error('Error loading course data:', _t);\n              _this4.error = 'Failed to load course data. Please try again later.';\n            case 7:\n              _context2.p = 7;\n              _this4.isLoading = false;\n              return _context2.f(7);\n            case 8:\n              return _context2.a(2);\n          }\n        }, _callee2, null, [[1, 6, 7, 8]]);\n      }))();\n    },\n    formatDate: function formatDate(dateString) {\n      if (!dateString) return 'Not set';\n      return new Date(dateString).toLocaleDateString();\n    },\n    hasMarkForAssessment: function hasMarkForAssessment(assessmentId) {\n      return this.studentMarks.some(function (mark) {\n        return mark.assessment_id === parseInt(assessmentId);\n      });\n    },\n    getMarkForAssessment: function getMarkForAssessment(assessmentId) {\n      return this.studentMarks.find(function (mark) {\n        return mark.assessment_id === parseInt(assessmentId);\n      });\n    },\n    isSimulatedAssessment: function isSimulatedAssessment(assessmentId) {\n      return assessmentId in this.simulatedMarks;\n    },\n    calculatePercentage: function calculatePercentage(mark, maxMark) {\n      if (!maxMark) return 0;\n      return Math.round(mark / maxMark * 100);\n    },\n    getAssessmentTypeBadgeClass: function getAssessmentTypeBadgeClass(type) {\n      var types = {\n        'exam': 'bg-danger',\n        'midterm': 'bg-warning',\n        'quiz': 'bg-info',\n        'assignment': 'bg-success',\n        'project': 'bg-primary',\n        'lab': 'bg-secondary'\n      };\n      return types[type.toLowerCase()] || 'bg-secondary';\n    },\n    getAssessmentStatus: function getAssessmentStatus(assessment) {\n      // Check if it has a real mark\n      if (this.hasMarkForAssessment(assessment.id) && !this.isSimulatedAssessment(assessment.id)) {\n        return 'Completed';\n      }\n\n      // Check if it has a simulated mark\n      if (this.isSimulatedAssessment(assessment.id)) {\n        return 'Simulated';\n      }\n      var today = new Date();\n      var dueDate = assessment.due_date ? new Date(assessment.due_date) : null;\n      if (!dueDate) return 'Upcoming';\n      if (dueDate < today) {\n        return 'Overdue';\n      }\n      if (dueDate.getTime() - today.getTime() < 7 * 24 * 60 * 60 * 1000) {\n        return 'Upcoming';\n      }\n      return 'Scheduled';\n    },\n    getStatusBadge: function getStatusBadge(assessment) {\n      var status = this.getAssessmentStatus(assessment);\n      var badges = {\n        'Completed': 'bg-success',\n        'Simulated': 'bg-info',\n        'Overdue': 'bg-danger',\n        'Upcoming': 'bg-warning',\n        'Scheduled': 'bg-secondary'\n      };\n      return badges[status] || 'bg-secondary';\n    },\n    calculateGrade: function calculateGrade(percentage) {\n      if (percentage >= 90) return 'A+';\n      if (percentage >= 80) return 'A';\n      if (percentage >= 75) return 'B+';\n      if (percentage >= 70) return 'B';\n      if (percentage >= 65) return 'C+';\n      if (percentage >= 60) return 'C';\n      if (percentage >= 55) return 'D+';\n      if (percentage >= 50) return 'D';\n      return 'F';\n    },\n    initializeSimulation: function initializeSimulation() {\n      var _this5 = this;\n      this.simulatedMarks = {};\n\n      // For assessments without marks, initialize with empty values\n      this.courseAssessments.forEach(function (assessment) {\n        if (!_this5.hasMarkForAssessment(assessment.id)) {\n          _this5.simulatedMarks[assessment.id] = undefined;\n        }\n      });\n    },\n    resetSimulation: function resetSimulation() {\n      this.initializeSimulation();\n      this.calculateRequiredMarks();\n    },\n    updateSimulation: function updateSimulation() {\n      this.calculateRequiredMarks();\n    },\n    calculateRequiredMarks: function calculateRequiredMarks() {\n      var _this6 = this;\n      // Calculate how much is needed on remaining assessments to achieve target grades\n\n      // First, get the current contribution from real and simulated marks\n      var currentWeightedSum = 0;\n      var assessedWeight = 0;\n\n      // Include actual marks (that aren't being simulated)\n      this.studentMarks.forEach(function (mark) {\n        if (_this6.isSimulatedAssessment(mark.assessment_id)) return;\n        var assessment = _this6.courseAssessments.find(function (a) {\n          return a.id === mark.assessment_id;\n        });\n        if (!assessment) return;\n        var percentage = _this6.calculatePercentage(mark.mark, assessment.max_mark);\n        currentWeightedSum += percentage * assessment.weightage;\n        assessedWeight += assessment.weightage;\n      });\n\n      // Include simulated marks that have values\n      var _loop = function _loop(assessmentId) {\n          var mark = _this6.simulatedMarks[assessmentId];\n          if (mark === undefined) return 0; // continue\n          var assessment = _this6.courseAssessments.find(function (a) {\n            return a.id === parseInt(assessmentId);\n          });\n          if (!assessment) return 0; // continue\n          var percentage = _this6.calculatePercentage(mark, assessment.max_mark);\n          currentWeightedSum += percentage * assessment.weightage;\n          assessedWeight += assessment.weightage;\n        },\n        _ret;\n      for (var assessmentId in this.simulatedMarks) {\n        _ret = _loop(assessmentId);\n        if (_ret === 0) continue;\n      }\n\n      // Calculate remaining unassessed weight\n      var unassessedWeight = 0;\n      this.courseAssessments.forEach(function (assessment) {\n        var assessmentId = assessment.id;\n        if (!_this6.hasMarkForAssessment(assessmentId) && !(assessmentId in _this6.simulatedMarks && _this6.simulatedMarks[assessmentId] !== undefined)) {\n          unassessedWeight += assessment.weightage;\n        }\n      });\n\n      // Calculate required marks for different grade thresholds\n      var totalWeight = 100; // Assuming total is 100%\n\n      // For passing grade (50%)\n      var requiredForPass = (50 * totalWeight - currentWeightedSum) / unassessedWeight;\n      this.requiredMarks.pass = unassessedWeight > 0 ? Math.round(requiredForPass) : 0;\n\n      // For distinction grade (70%)\n      var requiredForDistinction = (70 * totalWeight - currentWeightedSum) / unassessedWeight;\n      this.requiredMarks.distinction = unassessedWeight > 0 ? Math.round(requiredForDistinction) : 0;\n    },\n    formatRequiredMark: function formatRequiredMark(value) {\n      if (value <= 0) return 'Already achieved';\n      if (value > 100) return 'Not possible';\n      return \"\".concat(value, \"% needed\");\n    },\n    applyPreset: function applyPreset(preset) {\n      var _this7 = this;\n      // Apply preset values to all simulated assessments\n      var presetValue = 0;\n      switch (preset) {\n        case 'best':\n          presetValue = 90;\n          break;\n        case 'good':\n          presetValue = 75;\n          break;\n        case 'average':\n          presetValue = 65;\n          break;\n        case 'minimal':\n          presetValue = 50;\n          break;\n      }\n\n      // Apply the preset percentage to all unassessed items\n      this.courseAssessments.forEach(function (assessment) {\n        if (!_this7.hasMarkForAssessment(assessment.id)) {\n          // Calculate the actual mark value based on the percentage and max mark\n          var markValue = Math.round(presetValue / 100 * assessment.max_mark);\n          _this7.simulatedMarks[assessment.id] = markValue;\n        }\n      });\n      this.calculateRequiredMarks();\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","name","data","courseId","isLoading","course","assessments","performance","simulatedMarks","requiredMarks","pass","distinction","a_grade","error","computed","_objectSpread","userId","getUser","id","sortedAssessments","_toConsumableArray","sort","a","b","weightage","currentOverallMark","overall_percentage","simulatedOverallMark","_this","weightedSum","totalWeight","forEach","assessment","simulatedMark","assessment_type","actualMark","parseFloat","mark","weight","markToUse","undefined","percentage","calculatePercentage","max_mark","Math","round","simulatedGrade","calculateGrade","simulatedGPA","calculateGPA","markChange","getSimulatedMarkClass","getSimulatedGradeBadgeClass","grade","includes","getCurrentMarkClass","getMarkChangeClass","unassessedItems","_this2","filter","mark_id","isSimulatedAssessment","totalRemainingWeight","reduce","sum","created","_this3","_asyncToGenerator","_regenerator","m","_callee","w","_context","n","parseInt","$route","params","console","log","setTimeout","loadCourseData","methods","_this4","_callee2","requestData","response","errorText","_t","_context2","p","student_id","course_id","fetch","method","headers","body","JSON","stringify","v","ok","text","Error","concat","status","json","success","initializeSimulation","calculateRequiredMarks","f","formatDate","dateString","Date","toLocaleDateString","hasMarkForAssessment","assessmentId","studentMarks","some","assessment_id","getMarkForAssessment","find","maxMark","getAssessmentTypeBadgeClass","type","types","toLowerCase","getAssessmentStatus","today","dueDate","due_date","getTime","getStatusBadge","badges","_this5","courseAssessments","resetSimulation","updateSimulation","_this6","currentWeightedSum","assessedWeight","_loop","_ret","unassessedWeight","requiredForPass","requiredForDistinction","formatRequiredMark","value","applyPreset","preset","_this7","presetValue","markValue"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\NEW\\course-mark-management\\frontend\\src\\views\\student\\MarkSimulation.vue"],"sourcesContent":["<template>\r\n  <div class=\"mark-simulation\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/student/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link :to=\"`/student/course/${courseId}`\">\r\n                {{ course?.code }} - {{ course?.name }}\r\n              </router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Grade Simulator\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">Grade Simulator</h1>\r\n        <p class=\"text-muted\">\r\n          {{ course?.code }} | {{ course?.name }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"!course\" class=\"alert alert-danger\">\r\n      Course not found or you don't have access to this course.\r\n    </div>\r\n\r\n    <div v-else class=\"row\">\r\n      <div class=\"col-md-8 mb-4\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Assessment Marks</h5>\r\n            <p class=\"text-muted small mb-0\">\r\n              Enter hypothetical marks for assessments to simulate your final grade\r\n            </p>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"alert alert-info mb-4\">\r\n              <i class=\"fas fa-info-circle me-2\"></i>\r\n              Enter the marks you expect to get for assessments that haven't been graded yet. Your actual marks are pre-filled where available.\r\n            </div>\r\n\r\n            <div class=\"table-responsive\">\r\n              <table class=\"table table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Assessment</th>\r\n                    <th>Type</th>\r\n                    <th>Weight</th>\r\n                    <th>Status</th>\r\n                    <th>Mark</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr v-for=\"assessment in sortedAssessments\" :key=\"assessment.id\">\r\n                    <td>\r\n                      <strong>{{ assessment.name }}</strong>\r\n                    </td>\r\n                    <td>\r\n                      <span class=\"badge\" :class=\"getAssessmentTypeBadgeClass(assessment.type)\">\r\n                        {{ assessment.type }}\r\n                      </span>\r\n                    </td>\r\n                    <td>{{ assessment.weightage }}%</td>\r\n                    <td>\r\n                      <span \r\n                        class=\"badge\" \r\n                        :class=\"getStatusBadge(assessment)\"\r\n                      >\r\n                        {{ getAssessmentStatus(assessment) }}\r\n                      </span>\r\n                    </td>\r\n                    <td style=\"width: 180px;\">\r\n                      <div v-if=\"hasMarkForAssessment(assessment.id) && !isSimulatedAssessment(assessment.id)\">\r\n                        <div class=\"input-group input-group-sm disabled\">\r\n                          <input \r\n                            type=\"number\" \r\n                            class=\"form-control bg-light\"\r\n                            :value=\"getMarkForAssessment(assessment.id).mark\"\r\n                            disabled\r\n                          >\r\n                          <span class=\"input-group-text\">/ {{ assessment.max_mark }}</span>\r\n                        </div>\r\n                        <small class=\"text-muted\">Actual mark ({{ calculatePercentage(getMarkForAssessment(assessment.id).mark, assessment.max_mark) }}%)</small>\r\n                      </div>\r\n                      <div v-else>\r\n                        <div class=\"input-group input-group-sm\">\r\n                          <input \r\n                            type=\"number\" \r\n                            class=\"form-control\"\r\n                            v-model.number=\"simulatedMarks[assessment.id]\"\r\n                            :min=\"0\" \r\n                            :max=\"assessment.max_mark\"\r\n                            @input=\"updateSimulation\"\r\n                          >\r\n                          <span class=\"input-group-text\">/ {{ assessment.max_mark }}</span>\r\n                        </div>\r\n                        <small class=\"text-muted\" v-if=\"simulatedMarks[assessment.id] !== undefined\">\r\n                          Simulated ({{ calculatePercentage(simulatedMarks[assessment.id], assessment.max_mark) }}%)\r\n                        </small>\r\n                        <small class=\"text-muted\" v-else>\r\n                          Enter expected mark\r\n                        </small>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div class=\"d-flex justify-content-end mt-3\">\r\n              <button class=\"btn btn-outline-secondary me-2\" @click=\"resetSimulation\">\r\n                Reset Simulation\r\n              </button>\r\n              <div class=\"dropdown\">\r\n                <button \r\n                  class=\"btn btn-outline-primary dropdown-toggle\" \r\n                  type=\"button\" \r\n                  id=\"presetDropdown\" \r\n                  data-bs-toggle=\"dropdown\" \r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Apply Preset\r\n                </button>\r\n                <ul class=\"dropdown-menu\" aria-labelledby=\"presetDropdown\">\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('best')\">Best Case (90%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('good')\">Good Case (75%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('average')\">Average Case (65%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('minimal')\">Minimal Pass (50%)</a></li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-4 mb-4\">\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Simulation Results</h5>\r\n          </div>\r\n          <div class=\"card-body text-center\">\r\n            <div class=\"mb-4\">\r\n              <div class=\"display-4 fw-bold\" :class=\"getSimulatedMarkClass\">\r\n                {{ simulatedOverallMark }}%\r\n              </div>\r\n              <div class=\"badge fs-6 my-2\" :class=\"getSimulatedGradeBadgeClass\">\r\n                {{ simulatedGrade }}\r\n              </div>\r\n              <p class=\"text-muted\">Projected Final Grade</p>\r\n            </div>\r\n            \r\n            <hr class=\"my-4\">\r\n            \r\n            <div class=\"comparison mb-3\">\r\n              <div class=\"row\">\r\n                <div class=\"col-6 text-start\">\r\n                  <p class=\"mb-1 small text-muted\">Current Mark</p>\r\n                  <h4 :class=\"getCurrentMarkClass\">{{ currentOverallMark }}%</h4>\r\n                </div>\r\n                <div class=\"col-6 text-end\">\r\n                  <p class=\"mb-1 small text-muted\">Change</p>\r\n                  <h4 :class=\"getMarkChangeClass\">\r\n                    {{ markChange > 0 ? '+' : '' }}{{ markChange }}%\r\n                  </h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"progress mb-3\" style=\"height: 10px;\">\r\n              <div \r\n                class=\"progress-bar bg-danger\" \r\n                role=\"progressbar\" \r\n                :style=\"`width: 50%`\"\r\n                aria-valuenow=\"50\" \r\n                aria-valuemin=\"0\" \r\n                aria-valuemax=\"100\">\r\n              </div>\r\n            </div>\r\n            <div class=\"d-flex justify-content-between\">\r\n              <small>Fail</small>\r\n              <small>Pass</small>\r\n              <small>Distinction</small>\r\n            </div>\r\n            \r\n            <div \r\n              class=\"position-indicator\" \r\n              :style=\"`left: ${Math.min(Math.max(simulatedOverallMark, 0), 100)}%`\"\r\n            >\r\n              <i class=\"fas fa-caret-down\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Required Marks</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <p class=\"text-muted small mb-3\">\r\n              Marks required on remaining assessments to achieve these grades:\r\n            </p>\r\n            \r\n            <div class=\"required-mark-row\">\r\n              <div class=\"d-flex justify-content-between mb-2\">\r\n                <span class=\"badge bg-success\">Distinction (70%+)</span>\r\n                <span \r\n                  :class=\"{ 'text-success': requiredMarks.distinction <= 100, 'text-danger': requiredMarks.distinction > 100 }\"\r\n                >\r\n                  {{ formatRequiredMark(requiredMarks.distinction) }}\r\n                </span>\r\n              </div>\r\n              <div class=\"progress mb-3\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-success\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${Math.min(requiredMarks.distinction, 100)}%`\"\r\n                  :aria-valuenow=\"Math.min(requiredMarks.distinction, 100)\"\r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"required-mark-row\">\r\n              <div class=\"d-flex justify-content-between mb-2\">\r\n                <span class=\"badge bg-warning\">Pass (50%+)</span>\r\n                <span\r\n                  :class=\"{ 'text-success': requiredMarks.pass <= 100, 'text-danger': requiredMarks.pass > 100 }\"\r\n                >\r\n                  {{ formatRequiredMark(requiredMarks.pass) }}\r\n                </span>\r\n              </div>\r\n              <div class=\"progress mb-3\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-warning\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${Math.min(requiredMarks.pass, 100)}%`\"\r\n                  :aria-valuenow=\"Math.min(requiredMarks.pass, 100)\"\r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"alert alert-secondary mt-3 small\">\r\n              <i class=\"fas fa-info-circle me-2\"></i>\r\n              These calculations show the average mark needed on all remaining assessments to achieve the target grade.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  name: 'MarkSimulation',\r\n  data() {\r\n    return {\r\n      courseId: null,\r\n      isLoading: true,\r\n      course: null,\r\n      assessments: [],\r\n      performance: null,\r\n      simulatedMarks: {}, // assessment_type -> simulated_mark\r\n      requiredMarks: {\r\n        pass: 0,\r\n        distinction: 0,\r\n        a_grade: 0\r\n      },\r\n      error: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(\"auth\", [\"getUser\"]),\r\n    userId() {\r\n      return this.getUser ? this.getUser.id : null;\r\n    },\r\n    sortedAssessments() {\r\n      return [...this.assessments].sort((a, b) => {\r\n        // Sort by weightage (highest first)\r\n        return b.weightage - a.weightage;\r\n      });\r\n    },\r\n    currentOverallMark() {\r\n      return this.performance ? this.performance.overall_percentage : 0;\r\n    },\r\n    simulatedOverallMark() {\r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      this.assessments.forEach(assessment => {\r\n        const simulatedMark = this.simulatedMarks[assessment.assessment_type];\r\n        const actualMark = parseFloat(assessment.mark) || 0;\r\n        const weight = parseFloat(assessment.weightage);\r\n        \r\n        // Use simulated mark if available, otherwise use actual mark\r\n        const markToUse = simulatedMark !== undefined ? simulatedMark : actualMark;\r\n        \r\n        const percentage = this.calculatePercentage(markToUse, parseFloat(assessment.max_mark));\r\n        weightedSum += percentage * weight;\r\n        totalWeight += weight;\r\n      });\r\n      \r\n      if (totalWeight === 0) return 0;\r\n      return Math.round(weightedSum / totalWeight);\r\n    },\r\n    simulatedGrade() {\r\n      return this.calculateGrade(this.simulatedOverallMark);\r\n    },\r\n    simulatedGPA() {\r\n      return this.calculateGPA(this.simulatedOverallMark);\r\n    },\r\n    markChange() {\r\n      return this.simulatedOverallMark - this.currentOverallMark;\r\n    },\r\n    getSimulatedMarkClass() {\r\n      if (this.simulatedOverallMark >= 80) return 'text-success';\r\n      if (this.simulatedOverallMark >= 70) return 'text-primary';\r\n      if (this.simulatedOverallMark >= 60) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getSimulatedGradeBadgeClass() {\r\n      const grade = this.simulatedGrade;\r\n      if (['A+', 'A', 'A-'].includes(grade)) return 'bg-success';\r\n      if (['B+', 'B', 'B-'].includes(grade)) return 'bg-primary';\r\n      if (['C+', 'C', 'C-'].includes(grade)) return 'bg-warning';\r\n      if (['D+', 'D'].includes(grade)) return 'bg-orange';\r\n      return 'bg-danger';\r\n    },\r\n    getCurrentMarkClass() {\r\n      if (this.currentOverallMark >= 80) return 'text-success';\r\n      if (this.currentOverallMark >= 70) return 'text-primary';\r\n      if (this.currentOverallMark >= 60) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getMarkChangeClass() {\r\n      if (this.markChange > 0) return 'text-success';\r\n      if (this.markChange < 0) return 'text-danger';\r\n      return 'text-muted';\r\n    },\r\n    unassessedItems() {\r\n      return this.assessments.filter(assessment => \r\n        assessment.mark_id === null || this.isSimulatedAssessment(assessment.assessment_type)\r\n      );\r\n    },\r\n    totalRemainingWeight() {\r\n      return this.unassessedItems.reduce((sum, assessment) => \r\n        sum + parseFloat(assessment.weightage), 0\r\n      );\r\n    }\r\n  },\r\n  async created() {\r\n    this.courseId = parseInt(this.$route.params.id);\r\n    \r\n    console.log('MarkSimulation created, getUser:', this.getUser);\r\n    \r\n    // Wait a bit for authentication to be ready, then try to load data\r\n    setTimeout(() => {\r\n      console.log('After timeout, getUser:', this.getUser);\r\n      if (this.getUser) {\r\n        this.loadCourseData();\r\n      } else {\r\n        this.error = 'Please log in to access the grade simulator';\r\n        this.isLoading = false;\r\n      }\r\n    }, 100);\r\n  },\r\n  methods: {\r\n    async loadCourseData() {\r\n      this.isLoading = true;\r\n      this.error = null;\r\n      \r\n      if (!this.userId) {\r\n        this.error = 'User not authenticated';\r\n        this.isLoading = false;\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        const requestData = {\r\n          student_id: this.userId,\r\n          course_id: this.courseId\r\n        };\r\n        \r\n        const response = await fetch('http://localhost:8000/api/marks/student_course_detail', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(requestData)\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorText = await response.text();\r\n          throw new Error(`HTTP error! status: ${response.status}, body: ${errorText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        \r\n        if (data.success) {\r\n          this.course = data.course;\r\n          this.assessments = data.assessments;\r\n          this.performance = data.performance;\r\n          \r\n          // Initialize simulation\r\n          this.initializeSimulation();\r\n          this.calculateRequiredMarks();\r\n        } else {\r\n          this.error = data.error || 'Failed to load course data';\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading course data:', error);\r\n        this.error = 'Failed to load course data. Please try again later.';\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not set';\r\n      return new Date(dateString).toLocaleDateString();\r\n    },\r\n    hasMarkForAssessment(assessmentId) {\r\n      return this.studentMarks.some(mark => mark.assessment_id === parseInt(assessmentId));\r\n    },\r\n    getMarkForAssessment(assessmentId) {\r\n      return this.studentMarks.find(mark => mark.assessment_id === parseInt(assessmentId));\r\n    },\r\n    isSimulatedAssessment(assessmentId) {\r\n      return assessmentId in this.simulatedMarks;\r\n    },\r\n    calculatePercentage(mark, maxMark) {\r\n      if (!maxMark) return 0;\r\n      return Math.round((mark / maxMark) * 100);\r\n    },\r\n    getAssessmentTypeBadgeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    getAssessmentStatus(assessment) {\r\n      // Check if it has a real mark\r\n      if (this.hasMarkForAssessment(assessment.id) && !this.isSimulatedAssessment(assessment.id)) {\r\n        return 'Completed';\r\n      }\r\n      \r\n      // Check if it has a simulated mark\r\n      if (this.isSimulatedAssessment(assessment.id)) {\r\n        return 'Simulated';\r\n      }\r\n      \r\n      const today = new Date();\r\n      const dueDate = assessment.due_date ? new Date(assessment.due_date) : null;\r\n      \r\n      if (!dueDate) return 'Upcoming';\r\n      \r\n      if (dueDate < today) {\r\n        return 'Overdue';\r\n      }\r\n      \r\n      if (dueDate.getTime() - today.getTime() < 7 * 24 * 60 * 60 * 1000) {\r\n        return 'Upcoming';\r\n      }\r\n      \r\n      return 'Scheduled';\r\n    },\r\n    getStatusBadge(assessment) {\r\n      const status = this.getAssessmentStatus(assessment);\r\n      \r\n      const badges = {\r\n        'Completed': 'bg-success',\r\n        'Simulated': 'bg-info',\r\n        'Overdue': 'bg-danger',\r\n        'Upcoming': 'bg-warning',\r\n        'Scheduled': 'bg-secondary'\r\n      };\r\n      \r\n      return badges[status] || 'bg-secondary';\r\n    },\r\n    calculateGrade(percentage) {\r\n      if (percentage >= 90) return 'A+';\r\n      if (percentage >= 80) return 'A';\r\n      if (percentage >= 75) return 'B+';\r\n      if (percentage >= 70) return 'B';\r\n      if (percentage >= 65) return 'C+';\r\n      if (percentage >= 60) return 'C';\r\n      if (percentage >= 55) return 'D+';\r\n      if (percentage >= 50) return 'D';\r\n      return 'F';\r\n    },\r\n    initializeSimulation() {\r\n      this.simulatedMarks = {};\r\n      \r\n      // For assessments without marks, initialize with empty values\r\n      this.courseAssessments.forEach(assessment => {\r\n        if (!this.hasMarkForAssessment(assessment.id)) {\r\n          this.simulatedMarks[assessment.id] = undefined;\r\n        }\r\n      });\r\n    },\r\n    resetSimulation() {\r\n      this.initializeSimulation();\r\n      this.calculateRequiredMarks();\r\n    },\r\n    updateSimulation() {\r\n      this.calculateRequiredMarks();\r\n    },\r\n    calculateRequiredMarks() {\r\n      // Calculate how much is needed on remaining assessments to achieve target grades\r\n      \r\n      // First, get the current contribution from real and simulated marks\r\n      let currentWeightedSum = 0;\r\n      let assessedWeight = 0;\r\n      \r\n      // Include actual marks (that aren't being simulated)\r\n      this.studentMarks.forEach(mark => {\r\n        if (this.isSimulatedAssessment(mark.assessment_id)) return;\r\n        \r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        currentWeightedSum += percentage * assessment.weightage;\r\n        assessedWeight += assessment.weightage;\r\n      });\r\n      \r\n      // Include simulated marks that have values\r\n      for (const assessmentId in this.simulatedMarks) {\r\n        const mark = this.simulatedMarks[assessmentId];\r\n        if (mark === undefined) continue;\r\n        \r\n        const assessment = this.courseAssessments.find(a => a.id === parseInt(assessmentId));\r\n        if (!assessment) continue;\r\n        \r\n        const percentage = this.calculatePercentage(mark, assessment.max_mark);\r\n        currentWeightedSum += percentage * assessment.weightage;\r\n        assessedWeight += assessment.weightage;\r\n      }\r\n      \r\n      // Calculate remaining unassessed weight\r\n      let unassessedWeight = 0;\r\n      this.courseAssessments.forEach(assessment => {\r\n        const assessmentId = assessment.id;\r\n        if (!this.hasMarkForAssessment(assessmentId) && \r\n            !(assessmentId in this.simulatedMarks && this.simulatedMarks[assessmentId] !== undefined)) {\r\n          unassessedWeight += assessment.weightage;\r\n        }\r\n      });\r\n      \r\n      // Calculate required marks for different grade thresholds\r\n      const totalWeight = 100; // Assuming total is 100%\r\n      \r\n      // For passing grade (50%)\r\n      const requiredForPass = (50 * totalWeight - currentWeightedSum) / unassessedWeight;\r\n      this.requiredMarks.pass = unassessedWeight > 0 ? Math.round(requiredForPass) : 0;\r\n      \r\n      // For distinction grade (70%)\r\n      const requiredForDistinction = (70 * totalWeight - currentWeightedSum) / unassessedWeight;\r\n      this.requiredMarks.distinction = unassessedWeight > 0 ? Math.round(requiredForDistinction) : 0;\r\n    },\r\n    formatRequiredMark(value) {\r\n      if (value <= 0) return 'Already achieved';\r\n      if (value > 100) return 'Not possible';\r\n      return `${value}% needed`;\r\n    },\r\n    applyPreset(preset) {\r\n      // Apply preset values to all simulated assessments\r\n      let presetValue = 0;\r\n      \r\n      switch(preset) {\r\n        case 'best':\r\n          presetValue = 90;\r\n          break;\r\n        case 'good':\r\n          presetValue = 75;\r\n          break;\r\n        case 'average':\r\n          presetValue = 65;\r\n          break;\r\n        case 'minimal':\r\n          presetValue = 50;\r\n          break;\r\n      }\r\n      \r\n      // Apply the preset percentage to all unassessed items\r\n      this.courseAssessments.forEach(assessment => {\r\n        if (!this.hasMarkForAssessment(assessment.id)) {\r\n          // Calculate the actual mark value based on the percentage and max mark\r\n          const markValue = Math.round((presetValue / 100) * assessment.max_mark);\r\n          this.simulatedMarks[assessment.id] = markValue;\r\n        }\r\n      });\r\n      \r\n      this.calculateRequiredMarks();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.mark-simulation h1 {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.progress {\r\n  border-radius: 0.25rem;\r\n  overflow: hidden;\r\n}\r\n\r\n.display-4 {\r\n  font-size: 3rem;\r\n}\r\n\r\n.position-indicator {\r\n  position: relative;\r\n  width: 0;\r\n  height: 0;\r\n  margin-top: -24px;\r\n  z-index: 2;\r\n  color: #343a40;\r\n  font-size: 1.5rem;\r\n  transform: translateX(-50%);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .display-4 {\r\n    font-size: 2.5rem;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}