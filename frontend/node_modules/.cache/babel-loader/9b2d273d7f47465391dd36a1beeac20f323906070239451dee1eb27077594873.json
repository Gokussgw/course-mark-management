{"ast":null,"code":"import _regenerator from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport { mapState } from 'vuex';\n// Uncomment in real implementation\n// import Chart from 'chart.js/auto'\n\nexport default {\n  name: 'CourseMarks',\n  data: function data() {\n    return {\n      courseId: null,\n      sortOrder: 'date',\n      performanceChart: null,\n      isLoading: true,\n      course: null,\n      assessments: [],\n      performance: null,\n      ranking: null,\n      error: null\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapState({\n    userId: function userId(state) {\n      return state.auth.userId;\n    }\n  })), {}, {\n    sortedAssessments: function sortedAssessments() {\n      var _this = this;\n      var assessments = _toConsumableArray(this.assessments);\n      switch (this.sortOrder) {\n        case 'name':\n          return assessments.sort(function (a, b) {\n            return a.assessment_name.localeCompare(b.assessment_name);\n          });\n        case 'weight':\n          return assessments.sort(function (a, b) {\n            return b.weightage - a.weightage;\n          });\n        case 'mark':\n          return assessments.sort(function (a, b) {\n            var markA = _this.calculatePercentage(a.mark, a.max_mark);\n            var markB = _this.calculatePercentage(b.mark, b.max_mark);\n            return markB - markA;\n          });\n        case 'date':\n        default:\n          return assessments.sort(function (a, b) {\n            if (!a.date) return 1;\n            if (!b.date) return -1;\n            return new Date(a.date) - new Date(b.date);\n          });\n      }\n    },\n    marks: function marks() {\n      var _this2 = this;\n      // Convert assessments to the expected format for backward compatibility\n      return this.assessments.map(function (assessment) {\n        return {\n          id: assessment.mark_id,\n          student_id: _this2.userId,\n          assessment_id: assessment.assessment_id,\n          mark: parseFloat(assessment.mark),\n          course_id: _this2.courseId,\n          remarks: null // Not available in current API\n        };\n      });\n    },\n    studentMarks: function studentMarks() {\n      return this.marks.filter(function (mark) {\n        return mark.mark > 0;\n      });\n    },\n    courseAssessments: function courseAssessments() {\n      // Convert API assessments to expected format\n      return this.assessments.map(function (assessment) {\n        return {\n          id: assessment.assessment_id,\n          name: assessment.assessment_name,\n          type: assessment.assessment_type,\n          weightage: parseFloat(assessment.weightage),\n          max_mark: parseFloat(assessment.max_mark),\n          due_date: assessment.date,\n          is_final_exam: assessment.is_final_exam\n        };\n      });\n    },\n    totalAssessments: function totalAssessments() {\n      return this.assessments.length;\n    },\n    completedAssessments: function completedAssessments() {\n      return this.assessments.filter(function (a) {\n        return a.mark > 0;\n      }).length;\n    },\n    completionPercentage: function completionPercentage() {\n      if (this.totalAssessments === 0) return 0;\n      return Math.round(this.completedAssessments / this.totalAssessments * 100);\n    },\n    overallMark: function overallMark() {\n      return this.performance ? this.performance.overall_percentage : 0;\n    },\n    overallGrade: function overallGrade() {\n      return this.calculateGrade(this.overallMark);\n    },\n    getOverallMarkClass: function getOverallMarkClass() {\n      if (this.overallMark >= 70) return 'text-success';\n      if (this.overallMark >= 50) return 'text-warning';\n      return 'text-danger';\n    },\n    getOverallGradeBadgeClass: function getOverallGradeBadgeClass() {\n      if (this.overallMark >= 70) return 'bg-success';\n      if (this.overallMark >= 50) return 'bg-warning';\n      return 'bg-danger';\n    }\n  }),\n  created: function created() {\n    var _this3 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            _this3.courseId = parseInt(_this3.$route.params.id);\n            _context.n = 1;\n            return _this3.loadCourseData();\n          case 1:\n            return _context.a(2);\n        }\n      }, _callee);\n    }))();\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n    // Initialize performance chart once data is loaded\n    this.$nextTick(function () {\n      if (_this4.marks.length >= 2) {\n        _this4.initPerformanceChart();\n      }\n    });\n  },\n  methods: {\n    loadCourseData: function loadCourseData() {\n      var _this5 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var response, data, _t;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              _this5.isLoading = true;\n              _this5.error = null;\n              _context2.p = 1;\n              _context2.n = 2;\n              return fetch('http://localhost:8080/api/marks/student_course_detail', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  student_id: _this5.userId,\n                  course_id: _this5.courseId\n                })\n              });\n            case 2:\n              response = _context2.v;\n              if (response.ok) {\n                _context2.n = 3;\n                break;\n              }\n              throw new Error(\"HTTP error! status: \".concat(response.status));\n            case 3:\n              _context2.n = 4;\n              return response.json();\n            case 4:\n              data = _context2.v;\n              if (data.success) {\n                _this5.course = data.course;\n                _this5.assessments = data.assessments;\n                _this5.performance = data.performance;\n                _this5.ranking = data.ranking;\n              } else {\n                _this5.error = data.error || 'Failed to load course data';\n              }\n              _context2.n = 6;\n              break;\n            case 5:\n              _context2.p = 5;\n              _t = _context2.v;\n              console.error('Error loading course data:', _t);\n              _this5.error = 'Failed to load course data. Please try again later.';\n            case 6:\n              _context2.p = 6;\n              _this5.isLoading = false;\n              return _context2.f(6);\n            case 7:\n              return _context2.a(2);\n          }\n        }, _callee2, null, [[1, 5, 6, 7]]);\n      }))();\n    },\n    formatDate: function formatDate(dateString) {\n      if (!dateString) return 'Not set';\n      return new Date(dateString).toLocaleDateString();\n    },\n    hasMarkForAssessment: function hasMarkForAssessment(assessmentId) {\n      var assessment = this.assessments.find(function (a) {\n        return a.assessment_id === assessmentId;\n      });\n      return assessment && assessment.mark > 0;\n    },\n    getMarkForAssessment: function getMarkForAssessment(assessmentId) {\n      var assessment = this.assessments.find(function (a) {\n        return a.assessment_id === assessmentId;\n      });\n      if (!assessment) return null;\n      return {\n        mark: parseFloat(assessment.mark),\n        remarks: null // Not available in current API\n      };\n    },\n    calculatePercentage: function calculatePercentage(mark, maxMark) {\n      if (!maxMark) return 0;\n      return Math.round(mark / maxMark * 100);\n    },\n    getAssessmentTypeClass: function getAssessmentTypeClass(type) {\n      var types = {\n        'final_exam': 'bg-danger',\n        'midterm': 'bg-warning',\n        'quiz': 'bg-info',\n        'assignment': 'bg-success',\n        'project': 'bg-primary',\n        'other': 'bg-secondary'\n      };\n      return types[type.toLowerCase()] || 'bg-secondary';\n    },\n    getAssessmentTypeBadgeClass: function getAssessmentTypeBadgeClass(type) {\n      var types = {\n        'final_exam': 'bg-danger',\n        'midterm': 'bg-warning',\n        'quiz': 'bg-info',\n        'assignment': 'bg-success',\n        'project': 'bg-primary',\n        'other': 'bg-secondary'\n      };\n      return types[type.toLowerCase()] || 'bg-secondary';\n    },\n    calculateGrade: function calculateGrade(percentage) {\n      if (percentage >= 90) return 'A+';\n      if (percentage >= 80) return 'A';\n      if (percentage >= 75) return 'B+';\n      if (percentage >= 70) return 'B';\n      if (percentage >= 65) return 'C+';\n      if (percentage >= 60) return 'C';\n      if (percentage >= 55) return 'D+';\n      if (percentage >= 50) return 'D';\n      return 'F';\n    },\n    getGradeClass: function getGradeClass(percentage) {\n      if (percentage >= 70) return 'text-success fw-bold';\n      if (percentage >= 50) return 'text-warning';\n      return 'text-danger';\n    },\n    sortMarks: function sortMarks(order) {\n      this.sortOrder = order;\n    },\n    downloadMarks: function downloadMarks() {\n      // This would initiate a download of marks in CSV format\n      // Implementation would need to call an API endpoint\n      this.$store.dispatch('showToast', {\n        message: 'Downloading marks...',\n        type: 'info'\n      });\n    },\n    initPerformanceChart: function initPerformanceChart() {\n      // This would be implemented with Chart.js in a real application\n      /* Uncomment in real implementation\r\n      const ctx = document.getElementById('performanceChart');\r\n      \r\n      // Sort marks by date\r\n      const sortedMarks = [...this.studentMarks].sort((a, b) => {\r\n        const assessmentA = this.courseAssessments.find(assessment => assessment.id === a.assessment_id);\r\n        const assessmentB = this.courseAssessments.find(assessment => assessment.id === b.assessment_id);\r\n        if (!assessmentA || !assessmentA.due_date) return -1;\r\n        if (!assessmentB || !assessmentB.due_date) return 1;\r\n        return new Date(assessmentA.due_date) - new Date(assessmentB.due_date);\r\n      });\r\n      \r\n      const labels = sortedMarks.map(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        return assessment ? assessment.name : 'Unknown';\r\n      });\r\n      \r\n      const data = sortedMarks.map(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return 0;\r\n        return this.calculatePercentage(mark.mark, assessment.max_mark);\r\n      });\r\n      \r\n      // Sample class averages (would come from API in real implementation)\r\n      const classAverages = sortedMarks.map(() => Math.floor(Math.random() * 30) + 50);\r\n      \r\n      this.performanceChart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Your Marks',\r\n              data: data,\r\n              borderColor: '#0d6efd',\r\n              backgroundColor: 'rgba(13, 110, 253, 0.1)',\r\n              borderWidth: 2,\r\n              tension: 0.1,\r\n              fill: true\r\n            },\r\n            {\r\n              label: 'Class Average',\r\n              data: classAverages,\r\n              borderColor: '#6c757d',\r\n              borderWidth: 2,\r\n              borderDash: [5, 5],\r\n              tension: 0.1,\r\n              fill: false\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              title: {\r\n                display: true,\r\n                text: 'Mark (%)'\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'top',\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  return `${context.dataset.label}: ${context.raw}%`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n      */\n    }\n  }\n};","map":{"version":3,"names":["mapState","name","data","courseId","sortOrder","performanceChart","isLoading","course","assessments","performance","ranking","error","computed","_objectSpread","userId","state","auth","sortedAssessments","_this","_toConsumableArray","sort","a","b","assessment_name","localeCompare","weightage","markA","calculatePercentage","mark","max_mark","markB","date","Date","marks","_this2","map","assessment","id","mark_id","student_id","assessment_id","parseFloat","course_id","remarks","studentMarks","filter","courseAssessments","type","assessment_type","due_date","is_final_exam","totalAssessments","length","completedAssessments","completionPercentage","Math","round","overallMark","overall_percentage","overallGrade","calculateGrade","getOverallMarkClass","getOverallGradeBadgeClass","created","_this3","_asyncToGenerator","_regenerator","m","_callee","w","_context","n","parseInt","$route","params","loadCourseData","mounted","_this4","$nextTick","initPerformanceChart","methods","_this5","_callee2","response","_t","_context2","p","fetch","method","headers","body","JSON","stringify","v","ok","Error","concat","status","json","success","console","f","formatDate","dateString","toLocaleDateString","hasMarkForAssessment","assessmentId","find","getMarkForAssessment","maxMark","getAssessmentTypeClass","types","toLowerCase","getAssessmentTypeBadgeClass","percentage","getGradeClass","sortMarks","order","downloadMarks","$store","dispatch","message"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\NEW\\course-mark-management\\frontend\\src\\views\\student\\CourseMarks.vue"],"sourcesContent":["<template>\r\n  <div class=\"course-marks\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/student/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              {{ course?.code }} - {{ course?.name }}\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">{{ course?.name }}</h1>\r\n        <p class=\"text-muted\">\r\n          {{ course?.code }} | {{ course?.semester || 'No semester specified' }}\r\n        </p>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-outline-primary\" @click=\"downloadMarks\">\r\n          <i class=\"fas fa-download me-2\"></i> Download\r\n        </button>\r\n        <router-link :to=\"`/student/simulation/${courseId}`\" class=\"btn btn-outline-primary\">\r\n          <i class=\"fas fa-calculator me-2\"></i> Grade Simulator\r\n        </router-link>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"error\" class=\"alert alert-danger\">\r\n      {{ error }}\r\n    </div>\r\n\r\n    <div v-else-if=\"!course\" class=\"alert alert-danger\">\r\n      Course not found or you don't have access to this course.\r\n    </div>\r\n\r\n    <div v-else class=\"row\">\r\n      <div class=\"col-md-4 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Course Summary</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"mb-4 text-center\">\r\n              <div class=\"display-4 fw-bold\" :class=\"getOverallMarkClass\">\r\n                {{ overallMark }}%\r\n              </div>\r\n              <p class=\"text-muted\">Overall Mark</p>\r\n              <div class=\"badge\" :class=\"getOverallGradeBadgeClass\">\r\n                {{ overallGrade }}\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"progress-info mb-3\">\r\n              <div class=\"d-flex justify-content-between align-items-center\">\r\n                <span>Course Completion</span>\r\n                <span class=\"text-muted\">{{ completionPercentage }}%</span>\r\n              </div>\r\n              <div class=\"progress\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-info\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${completionPercentage}%`\"\r\n                  :aria-valuenow=\"completionPercentage\" \r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n              <small class=\"text-muted\">\r\n                {{ completedAssessments }} of {{ totalAssessments }} assessments completed\r\n              </small>\r\n            </div>\r\n\r\n            <table class=\"table table-sm\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>Course:</th>\r\n                  <td>{{ course?.name }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Code:</th>\r\n                  <td>{{ course?.code }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Semester:</th>\r\n                  <td>{{ course?.semester || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Credits:</th>\r\n                  <td>{{ course?.credits || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Lecturer:</th>\r\n                  <td>{{ course?.lecturer_name || 'Not specified' }}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-8 mb-4\">\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n            <h5 class=\"mb-0\">Mark Breakdown</h5>\r\n            <div class=\"dropdown\">\r\n              <button \r\n                class=\"btn btn-sm btn-outline-secondary dropdown-toggle\" \r\n                type=\"button\" \r\n                id=\"sortDropdown\" \r\n                data-bs-toggle=\"dropdown\" \r\n                aria-expanded=\"false\"\r\n              >\r\n                Sort by\r\n              </button>\r\n              <ul class=\"dropdown-menu\" aria-labelledby=\"sortDropdown\">\r\n                <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"sortMarks('date')\">Date</a></li>\r\n                <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"sortMarks('name')\">Name</a></li>\r\n                <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"sortMarks('weight')\">Weightage</a></li>\r\n                <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"sortMarks('mark')\">Mark</a></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"marks.length === 0\" class=\"text-center py-4\">\r\n              <p>No marks have been recorded for this course yet.</p>\r\n              <div class=\"alert alert-info\">\r\n                <i class=\"fas fa-info-circle me-2\"></i>\r\n                Marks will appear here once your assessments have been graded.\r\n              </div>\r\n            </div>\r\n            <div v-else>\r\n              <div class=\"mb-4\">\r\n                <h6>Assessment Distribution</h6>\r\n                <div class=\"progress\" style=\"height: 30px;\">\r\n                  <div v-for=\"assessment in sortedAssessments\" \r\n                       :key=\"assessment.assessment_id\"\r\n                       class=\"progress-bar\" \r\n                       :class=\"getAssessmentTypeClass(assessment.type)\"\r\n                       :style=\"`width: ${assessment.weightage}%`\"\r\n                       :title=\"`${assessment.assessment_name} (${assessment.weightage}%)`\">\r\n                    {{ assessment.weightage }}%\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"table-responsive\">\r\n                <table class=\"table table-hover\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Assessment</th>\r\n                      <th>Type</th>\r\n                      <th>Weight</th>\r\n                      <th>Due Date</th>\r\n                      <th>Mark</th>\r\n                      <th>Grade</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <template v-for=\"assessment in sortedAssessments\" :key=\"assessment.assessment_id\">\r\n                      <tr>\r\n                        <td>\r\n                          <strong>{{ assessment.assessment_name }}</strong>\r\n                          <div v-if=\"assessment.description\" class=\"small text-muted\">\r\n                            {{ assessment.description }}\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <span class=\"badge\" :class=\"getAssessmentTypeBadgeClass(assessment.assessment_type)\">\r\n                            {{ assessment.assessment_type }}\r\n                          </span>\r\n                        </td>\r\n                        <td>{{ assessment.weightage }}%</td>\r\n                        <td>{{ formatDate(assessment.date) }}</td>\r\n                        <td>\r\n                          <template v-if=\"hasMarkForAssessment(assessment.assessment_id)\">\r\n                            <strong>{{ getMarkForAssessment(assessment.assessment_id).mark }}</strong> / {{ assessment.max_mark }}\r\n                            <div class=\"small text-muted\">\r\n                              ({{ calculatePercentage(getMarkForAssessment(assessment.assessment_id).mark, assessment.max_mark) }}%)\r\n                            </div>\r\n                          </template>\r\n                          <template v-else>\r\n                            <span class=\"text-muted\">Pending</span>\r\n                          </template>\r\n                        </td>\r\n                        <td>\r\n                          <template v-if=\"hasMarkForAssessment(assessment.assessment_id)\">\r\n                            <span :class=\"getGradeClass(calculatePercentage(getMarkForAssessment(assessment.assessment_id).mark, assessment.max_mark))\">\r\n                              {{ calculateGrade(calculatePercentage(getMarkForAssessment(assessment.assessment_id).mark, assessment.max_mark)) }}\r\n                            </span>\r\n                          </template>\r\n                          <template v-else>\r\n                            <span class=\"text-muted\">-</span>\r\n                          </template>\r\n                        </td>\r\n                      </tr>\r\n                      <tr v-if=\"hasMarkForAssessment(assessment.assessment_id) && getMarkForAssessment(assessment.assessment_id).remarks\" class=\"remarks-row\">\r\n                        <td colspan=\"6\" class=\"table-light\">\r\n                          <i class=\"fas fa-comment-alt me-2 text-muted\"></i>\r\n                          <span class=\"text-muted\">Feedback: </span>\r\n                          {{ getMarkForAssessment(assessment.assessment_id).remarks }}\r\n                        </td>\r\n                      </tr>\r\n                    </template>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Performance Analysis</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"marks.length < 2\" class=\"text-center py-4\">\r\n              <p>Not enough data to show performance analysis.</p>\r\n              <div class=\"alert alert-info\">\r\n                <i class=\"fas fa-info-circle me-2\"></i>\r\n                Performance trends will be displayed after more assessments are completed.\r\n              </div>\r\n            </div>\r\n            <div v-else>\r\n              <!-- This is where we would integrate a chart.js component -->\r\n              <div class=\"chart-container\" style=\"height: 250px;\">\r\n                <canvas id=\"performanceChart\"></canvas>\r\n              </div>\r\n              <div class=\"mt-3 text-center text-muted small\">\r\n                <i class=\"fas fa-info-circle me-1\"></i>\r\n                Chart shows your performance relative to class average (when available).\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from 'vuex'\r\n// Uncomment in real implementation\r\n// import Chart from 'chart.js/auto'\r\n\r\nexport default {\r\n  name: 'CourseMarks',\r\n  data() {\r\n    return {\r\n      courseId: null,\r\n      sortOrder: 'date',\r\n      performanceChart: null,\r\n      isLoading: true,\r\n      course: null,\r\n      assessments: [],\r\n      performance: null,\r\n      ranking: null,\r\n      error: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      userId: state => state.auth.userId\r\n    }),\r\n    sortedAssessments() {\r\n      const assessments = [...this.assessments];\r\n      \r\n      switch(this.sortOrder) {\r\n        case 'name':\r\n          return assessments.sort((a, b) => a.assessment_name.localeCompare(b.assessment_name));\r\n        case 'weight':\r\n          return assessments.sort((a, b) => b.weightage - a.weightage);\r\n        case 'mark':\r\n          return assessments.sort((a, b) => {\r\n            const markA = this.calculatePercentage(a.mark, a.max_mark);\r\n            const markB = this.calculatePercentage(b.mark, b.max_mark);\r\n            return markB - markA;\r\n          });\r\n        case 'date':\r\n        default:\r\n          return assessments.sort((a, b) => {\r\n            if (!a.date) return 1;\r\n            if (!b.date) return -1;\r\n            return new Date(a.date) - new Date(b.date);\r\n          });\r\n      }\r\n    },\r\n    marks() {\r\n      // Convert assessments to the expected format for backward compatibility\r\n      return this.assessments.map(assessment => ({\r\n        id: assessment.mark_id,\r\n        student_id: this.userId,\r\n        assessment_id: assessment.assessment_id,\r\n        mark: parseFloat(assessment.mark),\r\n        course_id: this.courseId,\r\n        remarks: null // Not available in current API\r\n      }));\r\n    },\r\n    studentMarks() {\r\n      return this.marks.filter(mark => mark.mark > 0);\r\n    },\r\n    courseAssessments() {\r\n      // Convert API assessments to expected format\r\n      return this.assessments.map(assessment => ({\r\n        id: assessment.assessment_id,\r\n        name: assessment.assessment_name,\r\n        type: assessment.assessment_type,\r\n        weightage: parseFloat(assessment.weightage),\r\n        max_mark: parseFloat(assessment.max_mark),\r\n        due_date: assessment.date,\r\n        is_final_exam: assessment.is_final_exam\r\n      }));\r\n    },\r\n    totalAssessments() {\r\n      return this.assessments.length;\r\n    },\r\n    completedAssessments() {\r\n      return this.assessments.filter(a => a.mark > 0).length;\r\n    },\r\n    completionPercentage() {\r\n      if (this.totalAssessments === 0) return 0;\r\n      return Math.round((this.completedAssessments / this.totalAssessments) * 100);\r\n    },\r\n    overallMark() {\r\n      return this.performance ? this.performance.overall_percentage : 0;\r\n    },\r\n    overallGrade() {\r\n      return this.calculateGrade(this.overallMark);\r\n    },\r\n    getOverallMarkClass() {\r\n      if (this.overallMark >= 70) return 'text-success';\r\n      if (this.overallMark >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getOverallGradeBadgeClass() {\r\n      if (this.overallMark >= 70) return 'bg-success';\r\n      if (this.overallMark >= 50) return 'bg-warning';\r\n      return 'bg-danger';\r\n    }\r\n  },\r\n  async created() {\r\n    this.courseId = parseInt(this.$route.params.id);\r\n    await this.loadCourseData();\r\n  },\r\n  mounted() {\r\n    // Initialize performance chart once data is loaded\r\n    this.$nextTick(() => {\r\n      if (this.marks.length >= 2) {\r\n        this.initPerformanceChart();\r\n      }\r\n    });\r\n  },\r\n  methods: {\r\n    async loadCourseData() {\r\n      this.isLoading = true;\r\n      this.error = null;\r\n      \r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/marks/student_course_detail', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            student_id: this.userId,\r\n            course_id: this.courseId\r\n          })\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        \r\n        if (data.success) {\r\n          this.course = data.course;\r\n          this.assessments = data.assessments;\r\n          this.performance = data.performance;\r\n          this.ranking = data.ranking;\r\n        } else {\r\n          this.error = data.error || 'Failed to load course data';\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading course data:', error);\r\n        this.error = 'Failed to load course data. Please try again later.';\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not set';\r\n      return new Date(dateString).toLocaleDateString();\r\n    },\r\n    hasMarkForAssessment(assessmentId) {\r\n      const assessment = this.assessments.find(a => a.assessment_id === assessmentId);\r\n      return assessment && assessment.mark > 0;\r\n    },\r\n    getMarkForAssessment(assessmentId) {\r\n      const assessment = this.assessments.find(a => a.assessment_id === assessmentId);\r\n      if (!assessment) return null;\r\n      return {\r\n        mark: parseFloat(assessment.mark),\r\n        remarks: null // Not available in current API\r\n      };\r\n    },\r\n    calculatePercentage(mark, maxMark) {\r\n      if (!maxMark) return 0;\r\n      return Math.round((mark / maxMark) * 100);\r\n    },\r\n    getAssessmentTypeClass(type) {\r\n      const types = {\r\n        'final_exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'other': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    getAssessmentTypeBadgeClass(type) {\r\n      const types = {\r\n        'final_exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'other': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    calculateGrade(percentage) {\r\n      if (percentage >= 90) return 'A+';\r\n      if (percentage >= 80) return 'A';\r\n      if (percentage >= 75) return 'B+';\r\n      if (percentage >= 70) return 'B';\r\n      if (percentage >= 65) return 'C+';\r\n      if (percentage >= 60) return 'C';\r\n      if (percentage >= 55) return 'D+';\r\n      if (percentage >= 50) return 'D';\r\n      return 'F';\r\n    },\r\n    getGradeClass(percentage) {\r\n      if (percentage >= 70) return 'text-success fw-bold';\r\n      if (percentage >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    sortMarks(order) {\r\n      this.sortOrder = order;\r\n    },\r\n    downloadMarks() {\r\n      // This would initiate a download of marks in CSV format\r\n      // Implementation would need to call an API endpoint\r\n      this.$store.dispatch('showToast', {\r\n        message: 'Downloading marks...',\r\n        type: 'info'\r\n      });\r\n    },\r\n    initPerformanceChart() {\r\n      // This would be implemented with Chart.js in a real application\r\n      /* Uncomment in real implementation\r\n      const ctx = document.getElementById('performanceChart');\r\n      \r\n      // Sort marks by date\r\n      const sortedMarks = [...this.studentMarks].sort((a, b) => {\r\n        const assessmentA = this.courseAssessments.find(assessment => assessment.id === a.assessment_id);\r\n        const assessmentB = this.courseAssessments.find(assessment => assessment.id === b.assessment_id);\r\n        if (!assessmentA || !assessmentA.due_date) return -1;\r\n        if (!assessmentB || !assessmentB.due_date) return 1;\r\n        return new Date(assessmentA.due_date) - new Date(assessmentB.due_date);\r\n      });\r\n      \r\n      const labels = sortedMarks.map(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        return assessment ? assessment.name : 'Unknown';\r\n      });\r\n      \r\n      const data = sortedMarks.map(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return 0;\r\n        return this.calculatePercentage(mark.mark, assessment.max_mark);\r\n      });\r\n      \r\n      // Sample class averages (would come from API in real implementation)\r\n      const classAverages = sortedMarks.map(() => Math.floor(Math.random() * 30) + 50);\r\n      \r\n      this.performanceChart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Your Marks',\r\n              data: data,\r\n              borderColor: '#0d6efd',\r\n              backgroundColor: 'rgba(13, 110, 253, 0.1)',\r\n              borderWidth: 2,\r\n              tension: 0.1,\r\n              fill: true\r\n            },\r\n            {\r\n              label: 'Class Average',\r\n              data: classAverages,\r\n              borderColor: '#6c757d',\r\n              borderWidth: 2,\r\n              borderDash: [5, 5],\r\n              tension: 0.1,\r\n              fill: false\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              title: {\r\n                display: true,\r\n                text: 'Mark (%)'\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'top',\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  return `${context.dataset.label}: ${context.raw}%`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n      */\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.course-marks h1 {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.progress {\r\n  border-radius: 0.25rem;\r\n  overflow: hidden;\r\n}\r\n\r\n.display-4 {\r\n  font-size: 3rem;\r\n}\r\n\r\n.remarks-row {\r\n  font-style: italic;\r\n  font-size: 0.9em;\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .display-4 {\r\n    font-size: 2.5rem;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}