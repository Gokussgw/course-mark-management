{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, normalizeStyle as _normalizeStyle } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"mark-simulation\"\n};\nvar _hoisted_2 = {\n  \"class\": \"d-flex justify-content-between align-items-center mb-4\"\n};\nvar _hoisted_3 = {\n  \"aria-label\": \"breadcrumb\"\n};\nvar _hoisted_4 = {\n  \"class\": \"breadcrumb\"\n};\nvar _hoisted_5 = {\n  \"class\": \"breadcrumb-item\"\n};\nvar _hoisted_6 = {\n  \"class\": \"breadcrumb-item\"\n};\nvar _hoisted_7 = {\n  \"class\": \"text-muted\"\n};\nvar _hoisted_8 = {\n  key: 0,\n  \"class\": \"text-center my-5\"\n};\nvar _hoisted_9 = {\n  key: 1,\n  \"class\": \"alert alert-danger\"\n};\nvar _hoisted_10 = {\n  key: 2,\n  \"class\": \"row\"\n};\nvar _hoisted_11 = {\n  \"class\": \"col-md-8 mb-4\"\n};\nvar _hoisted_12 = {\n  \"class\": \"card\"\n};\nvar _hoisted_13 = {\n  \"class\": \"card-body\"\n};\nvar _hoisted_14 = {\n  \"class\": \"table-responsive\"\n};\nvar _hoisted_15 = {\n  \"class\": \"table table-hover\"\n};\nvar _hoisted_16 = {\n  style: {\n    \"width\": \"180px\"\n  }\n};\nvar _hoisted_17 = {\n  key: 0\n};\nvar _hoisted_18 = {\n  \"class\": \"input-group input-group-sm disabled\"\n};\nvar _hoisted_19 = [\"value\"];\nvar _hoisted_20 = {\n  \"class\": \"input-group-text\"\n};\nvar _hoisted_21 = {\n  \"class\": \"text-muted\"\n};\nvar _hoisted_22 = {\n  key: 1\n};\nvar _hoisted_23 = {\n  \"class\": \"input-group input-group-sm\"\n};\nvar _hoisted_24 = [\"onUpdate:modelValue\", \"max\"];\nvar _hoisted_25 = {\n  \"class\": \"input-group-text\"\n};\nvar _hoisted_26 = {\n  key: 0,\n  \"class\": \"text-muted\"\n};\nvar _hoisted_27 = {\n  key: 1,\n  \"class\": \"text-muted\"\n};\nvar _hoisted_28 = {\n  \"class\": \"d-flex justify-content-end mt-3\"\n};\nvar _hoisted_29 = {\n  \"class\": \"dropdown\"\n};\nvar _hoisted_30 = {\n  \"class\": \"dropdown-menu\",\n  \"aria-labelledby\": \"presetDropdown\"\n};\nvar _hoisted_31 = {\n  \"class\": \"col-md-4 mb-4\"\n};\nvar _hoisted_32 = {\n  \"class\": \"card mb-4\"\n};\nvar _hoisted_33 = {\n  \"class\": \"card-body text-center\"\n};\nvar _hoisted_34 = {\n  \"class\": \"mb-4\"\n};\nvar _hoisted_35 = {\n  \"class\": \"comparison mb-3\"\n};\nvar _hoisted_36 = {\n  \"class\": \"row\"\n};\nvar _hoisted_37 = {\n  \"class\": \"col-6 text-start\"\n};\nvar _hoisted_38 = {\n  \"class\": \"col-6 text-end\"\n};\nvar _hoisted_39 = {\n  \"class\": \"card\"\n};\nvar _hoisted_40 = {\n  \"class\": \"card-body\"\n};\nvar _hoisted_41 = {\n  \"class\": \"required-mark-row\"\n};\nvar _hoisted_42 = {\n  \"class\": \"d-flex justify-content-between mb-2\"\n};\nvar _hoisted_43 = {\n  \"class\": \"progress mb-3\",\n  style: {\n    \"height\": \"8px\"\n  }\n};\nvar _hoisted_44 = [\"aria-valuenow\"];\nvar _hoisted_45 = {\n  \"class\": \"required-mark-row\"\n};\nvar _hoisted_46 = {\n  \"class\": \"d-flex justify-content-between mb-2\"\n};\nvar _hoisted_47 = {\n  \"class\": \"progress mb-3\",\n  style: {\n    \"height\": \"8px\"\n  }\n};\nvar _hoisted_48 = [\"aria-valuenow\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _ctx$course3, _ctx$course4;\n  var _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", null, [_createElementVNode(\"nav\", _hoisted_3, [_createElementVNode(\"ol\", _hoisted_4, [_createElementVNode(\"li\", _hoisted_5, [_createVNode(_component_router_link, {\n    to: \"/student/dashboard\"\n  }, {\n    \"default\": _withCtx(function () {\n      return _cache[6] || (_cache[6] = [_createTextVNode(\"Dashboard\")]);\n    }),\n    _: 1 /* STABLE */,\n    __: [6]\n  })]), _createElementVNode(\"li\", _hoisted_6, [_createVNode(_component_router_link, {\n    to: \"/student/course/\".concat($data.courseId)\n  }, {\n    \"default\": _withCtx(function () {\n      var _ctx$course, _ctx$course2;\n      return [_createTextVNode(_toDisplayString((_ctx$course = _ctx.course) === null || _ctx$course === void 0 ? void 0 : _ctx$course.code) + \" - \" + _toDisplayString((_ctx$course2 = _ctx.course) === null || _ctx$course2 === void 0 ? void 0 : _ctx$course2.name), 1 /* TEXT */)];\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"to\"])]), _cache[7] || (_cache[7] = _createElementVNode(\"li\", {\n    \"class\": \"breadcrumb-item active\",\n    \"aria-current\": \"page\"\n  }, \" Grade Simulator \", -1 /* CACHED */))])]), _cache[8] || (_cache[8] = _createElementVNode(\"h1\", {\n    \"class\": \"mb-2\"\n  }, \"Grade Simulator\", -1 /* CACHED */)), _createElementVNode(\"p\", _hoisted_7, _toDisplayString((_ctx$course3 = _ctx.course) === null || _ctx$course3 === void 0 ? void 0 : _ctx$course3.code) + \" | \" + _toDisplayString((_ctx$course4 = _ctx.course) === null || _ctx$course4 === void 0 ? void 0 : _ctx$course4.name), 1 /* TEXT */)])]), _ctx.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, _cache[9] || (_cache[9] = [_createElementVNode(\"div\", {\n    \"class\": \"spinner-border text-primary\",\n    role: \"status\"\n  }, [_createElementVNode(\"span\", {\n    \"class\": \"visually-hidden\"\n  }, \"Loading...\")], -1 /* CACHED */)]))) : !_ctx.course ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, \" Course not found or you don't have access to this course. \")) : (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, [_cache[13] || (_cache[13] = _createElementVNode(\"div\", {\n    \"class\": \"card-header bg-light\"\n  }, [_createElementVNode(\"h5\", {\n    \"class\": \"mb-0\"\n  }, \"Assessment Marks\"), _createElementVNode(\"p\", {\n    \"class\": \"text-muted small mb-0\"\n  }, \" Enter hypothetical marks for assessments to simulate your final grade \")], -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_13, [_cache[12] || (_cache[12] = _createElementVNode(\"div\", {\n    \"class\": \"alert alert-info mb-4\"\n  }, [_createElementVNode(\"i\", {\n    \"class\": \"fas fa-info-circle me-2\"\n  }), _createTextVNode(\" Enter the marks you expect to get for assessments that haven't been graded yet. Your actual marks are pre-filled where available. \")], -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"table\", _hoisted_15, [_cache[10] || (_cache[10] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Assessment\"), _createElementVNode(\"th\", null, \"Type\"), _createElementVNode(\"th\", null, \"Weight\"), _createElementVNode(\"th\", null, \"Status\"), _createElementVNode(\"th\", null, \"Mark\")])], -1 /* CACHED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.sortedAssessments, function (assessment) {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: assessment.id\n    }, [_createElementVNode(\"td\", null, [_createElementVNode(\"strong\", null, _toDisplayString(assessment.name), 1 /* TEXT */)]), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", {\n      \"class\": _normalizeClass([\"badge\", $options.getAssessmentTypeBadgeClass(assessment.type)])\n    }, _toDisplayString(assessment.type), 3 /* TEXT, CLASS */)]), _createElementVNode(\"td\", null, _toDisplayString(assessment.weightage) + \"%\", 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", {\n      \"class\": _normalizeClass([\"badge\", $options.getStatusBadge(assessment)])\n    }, _toDisplayString($options.getAssessmentStatus(assessment)), 3 /* TEXT, CLASS */)]), _createElementVNode(\"td\", _hoisted_16, [$options.hasMarkForAssessment(assessment.id) && !$options.isSimulatedAssessment(assessment.id) ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"input\", {\n      type: \"number\",\n      \"class\": \"form-control bg-light\",\n      value: $options.getMarkForAssessment(assessment.id).mark,\n      disabled: \"\"\n    }, null, 8 /* PROPS */, _hoisted_19), _createElementVNode(\"span\", _hoisted_20, \"/ \" + _toDisplayString(assessment.max_mark), 1 /* TEXT */)]), _createElementVNode(\"small\", _hoisted_21, \"Actual mark (\" + _toDisplayString($options.calculatePercentage($options.getMarkForAssessment(assessment.id).mark, assessment.max_mark)) + \"%)\", 1 /* TEXT */)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [_createElementVNode(\"div\", _hoisted_23, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"number\",\n      \"class\": \"form-control\",\n      \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n        return $data.simulatedMarks[assessment.id] = $event;\n      },\n      min: 0,\n      max: assessment.max_mark,\n      onInput: _cache[0] || (_cache[0] = function () {\n        return $options.updateSimulation && $options.updateSimulation.apply($options, arguments);\n      })\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_24), [[_vModelText, $data.simulatedMarks[assessment.id], void 0, {\n      number: true\n    }]]), _createElementVNode(\"span\", _hoisted_25, \"/ \" + _toDisplayString(assessment.max_mark), 1 /* TEXT */)]), $data.simulatedMarks[assessment.id] !== undefined ? (_openBlock(), _createElementBlock(\"small\", _hoisted_26, \" Simulated (\" + _toDisplayString($options.calculatePercentage($data.simulatedMarks[assessment.id], assessment.max_mark)) + \"%) \", 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"small\", _hoisted_27, \" Enter expected mark \"))]))])]);\n  }), 128 /* KEYED_FRAGMENT */))])])]), _createElementVNode(\"div\", _hoisted_28, [_createElementVNode(\"button\", {\n    \"class\": \"btn btn-outline-secondary me-2\",\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.resetSimulation && $options.resetSimulation.apply($options, arguments);\n    })\n  }, \" Reset Simulation \"), _createElementVNode(\"div\", _hoisted_29, [_cache[11] || (_cache[11] = _createElementVNode(\"button\", {\n    \"class\": \"btn btn-outline-primary dropdown-toggle\",\n    type: \"button\",\n    id: \"presetDropdown\",\n    \"data-bs-toggle\": \"dropdown\",\n    \"aria-expanded\": \"false\"\n  }, \" Apply Preset \", -1 /* CACHED */)), _createElementVNode(\"ul\", _hoisted_30, [_createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    \"class\": \"dropdown-item\",\n    href: \"#\",\n    onClick: _cache[2] || (_cache[2] = _withModifiers(function ($event) {\n      return $options.applyPreset('best');\n    }, [\"prevent\"]))\n  }, \"Best Case (90%)\")]), _createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    \"class\": \"dropdown-item\",\n    href: \"#\",\n    onClick: _cache[3] || (_cache[3] = _withModifiers(function ($event) {\n      return $options.applyPreset('good');\n    }, [\"prevent\"]))\n  }, \"Good Case (75%)\")]), _createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    \"class\": \"dropdown-item\",\n    href: \"#\",\n    onClick: _cache[4] || (_cache[4] = _withModifiers(function ($event) {\n      return $options.applyPreset('average');\n    }, [\"prevent\"]))\n  }, \"Average Case (65%)\")]), _createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    \"class\": \"dropdown-item\",\n    href: \"#\",\n    onClick: _cache[5] || (_cache[5] = _withModifiers(function ($event) {\n      return $options.applyPreset('minimal');\n    }, [\"prevent\"]))\n  }, \"Minimal Pass (50%)\")])])])])])])]), _createElementVNode(\"div\", _hoisted_31, [_createElementVNode(\"div\", _hoisted_32, [_cache[21] || (_cache[21] = _createElementVNode(\"div\", {\n    \"class\": \"card-header bg-light\"\n  }, [_createElementVNode(\"h5\", {\n    \"class\": \"mb-0\"\n  }, \"Simulation Results\")], -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_33, [_createElementVNode(\"div\", _hoisted_34, [_createElementVNode(\"div\", {\n    \"class\": _normalizeClass([\"display-4 fw-bold\", $options.getSimulatedMarkClass])\n  }, _toDisplayString($options.simulatedOverallMark) + \"% \", 3 /* TEXT, CLASS */), _createElementVNode(\"div\", {\n    \"class\": _normalizeClass([\"badge fs-6 my-2\", $options.getSimulatedGradeBadgeClass])\n  }, _toDisplayString($options.simulatedGrade), 3 /* TEXT, CLASS */), _cache[14] || (_cache[14] = _createElementVNode(\"p\", {\n    \"class\": \"text-muted\"\n  }, \"Projected Final Grade\", -1 /* CACHED */))]), _cache[18] || (_cache[18] = _createElementVNode(\"hr\", {\n    \"class\": \"my-4\"\n  }, null, -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_35, [_createElementVNode(\"div\", _hoisted_36, [_createElementVNode(\"div\", _hoisted_37, [_cache[15] || (_cache[15] = _createElementVNode(\"p\", {\n    \"class\": \"mb-1 small text-muted\"\n  }, \"Current Mark\", -1 /* CACHED */)), _createElementVNode(\"h4\", {\n    \"class\": _normalizeClass($options.getCurrentMarkClass)\n  }, _toDisplayString($options.currentOverallMark) + \"%\", 3 /* TEXT, CLASS */)]), _createElementVNode(\"div\", _hoisted_38, [_cache[16] || (_cache[16] = _createElementVNode(\"p\", {\n    \"class\": \"mb-1 small text-muted\"\n  }, \"Change\", -1 /* CACHED */)), _createElementVNode(\"h4\", {\n    \"class\": _normalizeClass($options.getMarkChangeClass)\n  }, _toDisplayString($options.markChange > 0 ? '+' : '') + _toDisplayString($options.markChange) + \"% \", 3 /* TEXT, CLASS */)])])]), _cache[19] || (_cache[19] = _createElementVNode(\"div\", {\n    \"class\": \"progress mb-3\",\n    style: {\n      \"height\": \"10px\"\n    }\n  }, [_createElementVNode(\"div\", {\n    \"class\": \"progress-bar bg-danger\",\n    role: \"progressbar\",\n    style: \"width: 50%\",\n    \"aria-valuenow\": \"50\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\"\n  })], -1 /* CACHED */)), _cache[20] || (_cache[20] = _createElementVNode(\"div\", {\n    \"class\": \"d-flex justify-content-between\"\n  }, [_createElementVNode(\"small\", null, \"Fail\"), _createElementVNode(\"small\", null, \"Pass\"), _createElementVNode(\"small\", null, \"Distinction\")], -1 /* CACHED */)), _createElementVNode(\"div\", {\n    \"class\": \"position-indicator\",\n    style: _normalizeStyle(\"left: \".concat(Math.min(Math.max($options.simulatedOverallMark, 0), 100), \"%\"))\n  }, _cache[17] || (_cache[17] = [_createElementVNode(\"i\", {\n    \"class\": \"fas fa-caret-down\"\n  }, null, -1 /* CACHED */)]), 4 /* STYLE */)])]), _createElementVNode(\"div\", _hoisted_39, [_cache[26] || (_cache[26] = _createElementVNode(\"div\", {\n    \"class\": \"card-header bg-light\"\n  }, [_createElementVNode(\"h5\", {\n    \"class\": \"mb-0\"\n  }, \"Required Marks\")], -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_40, [_cache[24] || (_cache[24] = _createElementVNode(\"p\", {\n    \"class\": \"text-muted small mb-3\"\n  }, \" Marks required on remaining assessments to achieve these grades: \", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_41, [_createElementVNode(\"div\", _hoisted_42, [_cache[22] || (_cache[22] = _createElementVNode(\"span\", {\n    \"class\": \"badge bg-success\"\n  }, \"Distinction (70%+)\", -1 /* CACHED */)), _createElementVNode(\"span\", {\n    \"class\": _normalizeClass({\n      'text-success': $data.requiredMarks.distinction <= 100,\n      'text-danger': $data.requiredMarks.distinction > 100\n    })\n  }, _toDisplayString($options.formatRequiredMark($data.requiredMarks.distinction)), 3 /* TEXT, CLASS */)]), _createElementVNode(\"div\", _hoisted_43, [_createElementVNode(\"div\", {\n    \"class\": \"progress-bar bg-success\",\n    role: \"progressbar\",\n    style: _normalizeStyle(\"width: \".concat(Math.min($data.requiredMarks.distinction, 100), \"%\")),\n    \"aria-valuenow\": Math.min($data.requiredMarks.distinction, 100),\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\"\n  }, null, 12 /* STYLE, PROPS */, _hoisted_44)])]), _createElementVNode(\"div\", _hoisted_45, [_createElementVNode(\"div\", _hoisted_46, [_cache[23] || (_cache[23] = _createElementVNode(\"span\", {\n    \"class\": \"badge bg-warning\"\n  }, \"Pass (50%+)\", -1 /* CACHED */)), _createElementVNode(\"span\", {\n    \"class\": _normalizeClass({\n      'text-success': $data.requiredMarks.pass <= 100,\n      'text-danger': $data.requiredMarks.pass > 100\n    })\n  }, _toDisplayString($options.formatRequiredMark($data.requiredMarks.pass)), 3 /* TEXT, CLASS */)]), _createElementVNode(\"div\", _hoisted_47, [_createElementVNode(\"div\", {\n    \"class\": \"progress-bar bg-warning\",\n    role: \"progressbar\",\n    style: _normalizeStyle(\"width: \".concat(Math.min($data.requiredMarks.pass, 100), \"%\")),\n    \"aria-valuenow\": Math.min($data.requiredMarks.pass, 100),\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\"\n  }, null, 12 /* STYLE, PROPS */, _hoisted_48)])]), _cache[25] || (_cache[25] = _createElementVNode(\"div\", {\n    \"class\": \"alert alert-secondary mt-3 small\"\n  }, [_createElementVNode(\"i\", {\n    \"class\": \"fas fa-info-circle me-2\"\n  }), _createTextVNode(\" These calculations show the average mark needed on all remaining assessments to achieve the target grade. \")], -1 /* CACHED */))])])])]))]);\n}","map":{"version":3,"names":["style","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_createVNode","_component_router_link","to","_cache","_hoisted_6","concat","$data","courseId","_ctx$course","_ctx$course2","_ctx","course","code","_toDisplayString","name","_hoisted_7","_ctx$course3","_ctx$course4","isLoading","_hoisted_8","role","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_Fragment","_renderList","$options","sortedAssessments","assessment","key","id","_normalizeClass","getAssessmentTypeBadgeClass","type","weightage","getStatusBadge","getAssessmentStatus","_hoisted_16","hasMarkForAssessment","isSimulatedAssessment","_hoisted_17","_hoisted_18","value","getMarkForAssessment","mark","disabled","_hoisted_20","max_mark","_hoisted_21","calculatePercentage","_hoisted_22","_hoisted_23","simulatedMarks","$event","min","max","onInput","updateSimulation","apply","arguments","number","_hoisted_25","undefined","_hoisted_26","_hoisted_27","_hoisted_28","onClick","resetSimulation","_hoisted_29","_hoisted_30","href","_withModifiers","applyPreset","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","getSimulatedMarkClass","simulatedOverallMark","getSimulatedGradeBadgeClass","simulatedGrade","_hoisted_35","_hoisted_36","_hoisted_37","getCurrentMarkClass","currentOverallMark","_hoisted_38","getMarkChangeClass","markChange","_normalizeStyle","Math","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","requiredMarks","distinction","formatRequiredMark","_hoisted_43","_hoisted_45","_hoisted_46","pass","_hoisted_47"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\student\\MarkSimulation.vue"],"sourcesContent":["<template>\r\n  <div class=\"mark-simulation\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/student/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link :to=\"`/student/course/${courseId}`\">\r\n                {{ course?.code }} - {{ course?.name }}\r\n              </router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Grade Simulator\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">Grade Simulator</h1>\r\n        <p class=\"text-muted\">\r\n          {{ course?.code }} | {{ course?.name }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"!course\" class=\"alert alert-danger\">\r\n      Course not found or you don't have access to this course.\r\n    </div>\r\n\r\n    <div v-else class=\"row\">\r\n      <div class=\"col-md-8 mb-4\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Assessment Marks</h5>\r\n            <p class=\"text-muted small mb-0\">\r\n              Enter hypothetical marks for assessments to simulate your final grade\r\n            </p>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"alert alert-info mb-4\">\r\n              <i class=\"fas fa-info-circle me-2\"></i>\r\n              Enter the marks you expect to get for assessments that haven't been graded yet. Your actual marks are pre-filled where available.\r\n            </div>\r\n\r\n            <div class=\"table-responsive\">\r\n              <table class=\"table table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Assessment</th>\r\n                    <th>Type</th>\r\n                    <th>Weight</th>\r\n                    <th>Status</th>\r\n                    <th>Mark</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr v-for=\"assessment in sortedAssessments\" :key=\"assessment.id\">\r\n                    <td>\r\n                      <strong>{{ assessment.name }}</strong>\r\n                    </td>\r\n                    <td>\r\n                      <span class=\"badge\" :class=\"getAssessmentTypeBadgeClass(assessment.type)\">\r\n                        {{ assessment.type }}\r\n                      </span>\r\n                    </td>\r\n                    <td>{{ assessment.weightage }}%</td>\r\n                    <td>\r\n                      <span \r\n                        class=\"badge\" \r\n                        :class=\"getStatusBadge(assessment)\"\r\n                      >\r\n                        {{ getAssessmentStatus(assessment) }}\r\n                      </span>\r\n                    </td>\r\n                    <td style=\"width: 180px;\">\r\n                      <div v-if=\"hasMarkForAssessment(assessment.id) && !isSimulatedAssessment(assessment.id)\">\r\n                        <div class=\"input-group input-group-sm disabled\">\r\n                          <input \r\n                            type=\"number\" \r\n                            class=\"form-control bg-light\"\r\n                            :value=\"getMarkForAssessment(assessment.id).mark\"\r\n                            disabled\r\n                          >\r\n                          <span class=\"input-group-text\">/ {{ assessment.max_mark }}</span>\r\n                        </div>\r\n                        <small class=\"text-muted\">Actual mark ({{ calculatePercentage(getMarkForAssessment(assessment.id).mark, assessment.max_mark) }}%)</small>\r\n                      </div>\r\n                      <div v-else>\r\n                        <div class=\"input-group input-group-sm\">\r\n                          <input \r\n                            type=\"number\" \r\n                            class=\"form-control\"\r\n                            v-model.number=\"simulatedMarks[assessment.id]\"\r\n                            :min=\"0\" \r\n                            :max=\"assessment.max_mark\"\r\n                            @input=\"updateSimulation\"\r\n                          >\r\n                          <span class=\"input-group-text\">/ {{ assessment.max_mark }}</span>\r\n                        </div>\r\n                        <small class=\"text-muted\" v-if=\"simulatedMarks[assessment.id] !== undefined\">\r\n                          Simulated ({{ calculatePercentage(simulatedMarks[assessment.id], assessment.max_mark) }}%)\r\n                        </small>\r\n                        <small class=\"text-muted\" v-else>\r\n                          Enter expected mark\r\n                        </small>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div class=\"d-flex justify-content-end mt-3\">\r\n              <button class=\"btn btn-outline-secondary me-2\" @click=\"resetSimulation\">\r\n                Reset Simulation\r\n              </button>\r\n              <div class=\"dropdown\">\r\n                <button \r\n                  class=\"btn btn-outline-primary dropdown-toggle\" \r\n                  type=\"button\" \r\n                  id=\"presetDropdown\" \r\n                  data-bs-toggle=\"dropdown\" \r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Apply Preset\r\n                </button>\r\n                <ul class=\"dropdown-menu\" aria-labelledby=\"presetDropdown\">\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('best')\">Best Case (90%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('good')\">Good Case (75%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('average')\">Average Case (65%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('minimal')\">Minimal Pass (50%)</a></li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-4 mb-4\">\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Simulation Results</h5>\r\n          </div>\r\n          <div class=\"card-body text-center\">\r\n            <div class=\"mb-4\">\r\n              <div class=\"display-4 fw-bold\" :class=\"getSimulatedMarkClass\">\r\n                {{ simulatedOverallMark }}%\r\n              </div>\r\n              <div class=\"badge fs-6 my-2\" :class=\"getSimulatedGradeBadgeClass\">\r\n                {{ simulatedGrade }}\r\n              </div>\r\n              <p class=\"text-muted\">Projected Final Grade</p>\r\n            </div>\r\n            \r\n            <hr class=\"my-4\">\r\n            \r\n            <div class=\"comparison mb-3\">\r\n              <div class=\"row\">\r\n                <div class=\"col-6 text-start\">\r\n                  <p class=\"mb-1 small text-muted\">Current Mark</p>\r\n                  <h4 :class=\"getCurrentMarkClass\">{{ currentOverallMark }}%</h4>\r\n                </div>\r\n                <div class=\"col-6 text-end\">\r\n                  <p class=\"mb-1 small text-muted\">Change</p>\r\n                  <h4 :class=\"getMarkChangeClass\">\r\n                    {{ markChange > 0 ? '+' : '' }}{{ markChange }}%\r\n                  </h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"progress mb-3\" style=\"height: 10px;\">\r\n              <div \r\n                class=\"progress-bar bg-danger\" \r\n                role=\"progressbar\" \r\n                :style=\"`width: 50%`\"\r\n                aria-valuenow=\"50\" \r\n                aria-valuemin=\"0\" \r\n                aria-valuemax=\"100\">\r\n              </div>\r\n            </div>\r\n            <div class=\"d-flex justify-content-between\">\r\n              <small>Fail</small>\r\n              <small>Pass</small>\r\n              <small>Distinction</small>\r\n            </div>\r\n            \r\n            <div \r\n              class=\"position-indicator\" \r\n              :style=\"`left: ${Math.min(Math.max(simulatedOverallMark, 0), 100)}%`\"\r\n            >\r\n              <i class=\"fas fa-caret-down\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Required Marks</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <p class=\"text-muted small mb-3\">\r\n              Marks required on remaining assessments to achieve these grades:\r\n            </p>\r\n            \r\n            <div class=\"required-mark-row\">\r\n              <div class=\"d-flex justify-content-between mb-2\">\r\n                <span class=\"badge bg-success\">Distinction (70%+)</span>\r\n                <span \r\n                  :class=\"{ 'text-success': requiredMarks.distinction <= 100, 'text-danger': requiredMarks.distinction > 100 }\"\r\n                >\r\n                  {{ formatRequiredMark(requiredMarks.distinction) }}\r\n                </span>\r\n              </div>\r\n              <div class=\"progress mb-3\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-success\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${Math.min(requiredMarks.distinction, 100)}%`\"\r\n                  :aria-valuenow=\"Math.min(requiredMarks.distinction, 100)\"\r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"required-mark-row\">\r\n              <div class=\"d-flex justify-content-between mb-2\">\r\n                <span class=\"badge bg-warning\">Pass (50%+)</span>\r\n                <span\r\n                  :class=\"{ 'text-success': requiredMarks.pass <= 100, 'text-danger': requiredMarks.pass > 100 }\"\r\n                >\r\n                  {{ formatRequiredMark(requiredMarks.pass) }}\r\n                </span>\r\n              </div>\r\n              <div class=\"progress mb-3\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-warning\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${Math.min(requiredMarks.pass, 100)}%`\"\r\n                  :aria-valuenow=\"Math.min(requiredMarks.pass, 100)\"\r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"alert alert-secondary mt-3 small\">\r\n              <i class=\"fas fa-info-circle me-2\"></i>\r\n              These calculations show the average mark needed on all remaining assessments to achieve the target grade.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'MarkSimulation',\r\n  data() {\r\n    return {\r\n      courseId: null,\r\n      simulatedMarks: {}, // assessment_id -> simulated_mark\r\n      requiredMarks: {\r\n        pass: 0,\r\n        distinction: 0\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      isLoading: state => state.loading,\r\n      course: state => state.courses.course,\r\n      marks: state => state.marks.marks,\r\n      userId: state => state.auth.userId\r\n    }),\r\n    ...mapGetters({\r\n      getCourseAssessments: 'assessments/getCourseAssessments'\r\n    }),\r\n    courseAssessments() {\r\n      return this.getCourseAssessments(this.courseId) || [];\r\n    },\r\n    sortedAssessments() {\r\n      return [...this.courseAssessments].sort((a, b) => {\r\n        // Sort by due date\r\n        if (!a.due_date) return 1;\r\n        if (!b.due_date) return -1;\r\n        return new Date(a.due_date) - new Date(b.due_date);\r\n      });\r\n    },\r\n    studentMarks() {\r\n      return this.marks.filter(mark => \r\n        mark.student_id === this.userId && \r\n        mark.course_id === parseInt(this.courseId)\r\n      );\r\n    },\r\n    unassessedItems() {\r\n      return this.courseAssessments.filter(assessment => \r\n        !this.hasMarkForAssessment(assessment.id)\r\n      );\r\n    },\r\n    totalRemainingWeight() {\r\n      return this.unassessedItems.reduce((sum, assessment) => sum + assessment.weightage, 0);\r\n    },\r\n    currentOverallMark() {\r\n      if (!this.studentMarks.length) return 0;\r\n      \r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      this.studentMarks.forEach(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        weightedSum += percentage * assessment.weightage;\r\n        totalWeight += parseInt(assessment.weightage);\r\n      });\r\n      \r\n      if (totalWeight === 0) return 0;\r\n      return Math.round(weightedSum / totalWeight);\r\n    },\r\n    simulatedOverallMark() {\r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      // Include actual marks\r\n      this.studentMarks.forEach(mark => {\r\n        // Skip if this assessment is being simulated\r\n        if (this.isSimulatedAssessment(mark.assessment_id)) return;\r\n        \r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        weightedSum += percentage * assessment.weightage;\r\n        totalWeight += parseInt(assessment.weightage);\r\n      });\r\n      \r\n      // Include simulated marks\r\n      for (const assessmentId in this.simulatedMarks) {\r\n        const mark = this.simulatedMarks[assessmentId];\r\n        const assessment = this.courseAssessments.find(a => a.id === parseInt(assessmentId));\r\n        \r\n        if (!assessment || mark === undefined) continue;\r\n        \r\n        const percentage = this.calculatePercentage(mark, assessment.max_mark);\r\n        weightedSum += percentage * assessment.weightage;\r\n        totalWeight += parseInt(assessment.weightage);\r\n      }\r\n      \r\n      if (totalWeight === 0) return 0;\r\n      return Math.round(weightedSum / totalWeight);\r\n    },\r\n    simulatedGrade() {\r\n      return this.calculateGrade(this.simulatedOverallMark);\r\n    },\r\n    markChange() {\r\n      return this.simulatedOverallMark - this.currentOverallMark;\r\n    },\r\n    getSimulatedMarkClass() {\r\n      if (this.simulatedOverallMark >= 70) return 'text-success';\r\n      if (this.simulatedOverallMark >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getSimulatedGradeBadgeClass() {\r\n      if (this.simulatedOverallMark >= 70) return 'bg-success';\r\n      if (this.simulatedOverallMark >= 50) return 'bg-warning';\r\n      return 'bg-danger';\r\n    },\r\n    getCurrentMarkClass() {\r\n      if (this.currentOverallMark >= 70) return 'text-success';\r\n      if (this.currentOverallMark >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getMarkChangeClass() {\r\n      if (this.markChange > 0) return 'text-success';\r\n      if (this.markChange < 0) return 'text-danger';\r\n      return 'text-muted';\r\n    }\r\n  },\r\n  async created() {\r\n    this.courseId = parseInt(this.$route.params.id);\r\n    \r\n    try {\r\n      // Fetch course details\r\n      await this.fetchCourse(this.courseId);\r\n      \r\n      // Fetch assessments for this course\r\n      await this.fetchAssessments({ courseId: this.courseId });\r\n      \r\n      // Fetch marks for this student in this course\r\n      await this.fetchMarks({ \r\n        studentId: this.userId,\r\n        courseId: this.courseId\r\n      });\r\n      \r\n      // Initialize the simulation\r\n      this.initializeSimulation();\r\n      \r\n      // Calculate required marks\r\n      this.calculateRequiredMarks();\r\n    } catch (error) {\r\n      console.error('Error loading simulation data:', error);\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchCourse: 'courses/fetchCourse',\r\n      fetchAssessments: 'assessments/fetchAssessments',\r\n      fetchMarks: 'marks/fetchMarks'\r\n    }),\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not set';\r\n      return new Date(dateString).toLocaleDateString();\r\n    },\r\n    hasMarkForAssessment(assessmentId) {\r\n      return this.studentMarks.some(mark => mark.assessment_id === parseInt(assessmentId));\r\n    },\r\n    getMarkForAssessment(assessmentId) {\r\n      return this.studentMarks.find(mark => mark.assessment_id === parseInt(assessmentId));\r\n    },\r\n    isSimulatedAssessment(assessmentId) {\r\n      return assessmentId in this.simulatedMarks;\r\n    },\r\n    calculatePercentage(mark, maxMark) {\r\n      if (!maxMark) return 0;\r\n      return Math.round((mark / maxMark) * 100);\r\n    },\r\n    getAssessmentTypeBadgeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    getAssessmentStatus(assessment) {\r\n      // Check if it has a real mark\r\n      if (this.hasMarkForAssessment(assessment.id) && !this.isSimulatedAssessment(assessment.id)) {\r\n        return 'Completed';\r\n      }\r\n      \r\n      // Check if it has a simulated mark\r\n      if (this.isSimulatedAssessment(assessment.id)) {\r\n        return 'Simulated';\r\n      }\r\n      \r\n      const today = new Date();\r\n      const dueDate = assessment.due_date ? new Date(assessment.due_date) : null;\r\n      \r\n      if (!dueDate) return 'Upcoming';\r\n      \r\n      if (dueDate < today) {\r\n        return 'Overdue';\r\n      }\r\n      \r\n      if (dueDate.getTime() - today.getTime() < 7 * 24 * 60 * 60 * 1000) {\r\n        return 'Upcoming';\r\n      }\r\n      \r\n      return 'Scheduled';\r\n    },\r\n    getStatusBadge(assessment) {\r\n      const status = this.getAssessmentStatus(assessment);\r\n      \r\n      const badges = {\r\n        'Completed': 'bg-success',\r\n        'Simulated': 'bg-info',\r\n        'Overdue': 'bg-danger',\r\n        'Upcoming': 'bg-warning',\r\n        'Scheduled': 'bg-secondary'\r\n      };\r\n      \r\n      return badges[status] || 'bg-secondary';\r\n    },\r\n    calculateGrade(percentage) {\r\n      if (percentage >= 90) return 'A+';\r\n      if (percentage >= 80) return 'A';\r\n      if (percentage >= 75) return 'B+';\r\n      if (percentage >= 70) return 'B';\r\n      if (percentage >= 65) return 'C+';\r\n      if (percentage >= 60) return 'C';\r\n      if (percentage >= 55) return 'D+';\r\n      if (percentage >= 50) return 'D';\r\n      return 'F';\r\n    },\r\n    initializeSimulation() {\r\n      this.simulatedMarks = {};\r\n      \r\n      // For assessments without marks, initialize with empty values\r\n      this.courseAssessments.forEach(assessment => {\r\n        if (!this.hasMarkForAssessment(assessment.id)) {\r\n          this.simulatedMarks[assessment.id] = undefined;\r\n        }\r\n      });\r\n    },\r\n    resetSimulation() {\r\n      this.initializeSimulation();\r\n      this.calculateRequiredMarks();\r\n    },\r\n    updateSimulation() {\r\n      this.calculateRequiredMarks();\r\n    },\r\n    calculateRequiredMarks() {\r\n      // Calculate how much is needed on remaining assessments to achieve target grades\r\n      \r\n      // First, get the current contribution from real and simulated marks\r\n      let currentWeightedSum = 0;\r\n      let assessedWeight = 0;\r\n      \r\n      // Include actual marks (that aren't being simulated)\r\n      this.studentMarks.forEach(mark => {\r\n        if (this.isSimulatedAssessment(mark.assessment_id)) return;\r\n        \r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        currentWeightedSum += percentage * assessment.weightage;\r\n        assessedWeight += assessment.weightage;\r\n      });\r\n      \r\n      // Include simulated marks that have values\r\n      for (const assessmentId in this.simulatedMarks) {\r\n        const mark = this.simulatedMarks[assessmentId];\r\n        if (mark === undefined) continue;\r\n        \r\n        const assessment = this.courseAssessments.find(a => a.id === parseInt(assessmentId));\r\n        if (!assessment) continue;\r\n        \r\n        const percentage = this.calculatePercentage(mark, assessment.max_mark);\r\n        currentWeightedSum += percentage * assessment.weightage;\r\n        assessedWeight += assessment.weightage;\r\n      }\r\n      \r\n      // Calculate remaining unassessed weight\r\n      let unassessedWeight = 0;\r\n      this.courseAssessments.forEach(assessment => {\r\n        const assessmentId = assessment.id;\r\n        if (!this.hasMarkForAssessment(assessmentId) && \r\n            !(assessmentId in this.simulatedMarks && this.simulatedMarks[assessmentId] !== undefined)) {\r\n          unassessedWeight += assessment.weightage;\r\n        }\r\n      });\r\n      \r\n      // Calculate required marks for different grade thresholds\r\n      const totalWeight = 100; // Assuming total is 100%\r\n      \r\n      // For passing grade (50%)\r\n      const requiredForPass = (50 * totalWeight - currentWeightedSum) / unassessedWeight;\r\n      this.requiredMarks.pass = unassessedWeight > 0 ? Math.round(requiredForPass) : 0;\r\n      \r\n      // For distinction grade (70%)\r\n      const requiredForDistinction = (70 * totalWeight - currentWeightedSum) / unassessedWeight;\r\n      this.requiredMarks.distinction = unassessedWeight > 0 ? Math.round(requiredForDistinction) : 0;\r\n    },\r\n    formatRequiredMark(value) {\r\n      if (value <= 0) return 'Already achieved';\r\n      if (value > 100) return 'Not possible';\r\n      return `${value}% needed`;\r\n    },\r\n    applyPreset(preset) {\r\n      // Apply preset values to all simulated assessments\r\n      let presetValue = 0;\r\n      \r\n      switch(preset) {\r\n        case 'best':\r\n          presetValue = 90;\r\n          break;\r\n        case 'good':\r\n          presetValue = 75;\r\n          break;\r\n        case 'average':\r\n          presetValue = 65;\r\n          break;\r\n        case 'minimal':\r\n          presetValue = 50;\r\n          break;\r\n      }\r\n      \r\n      // Apply the preset percentage to all unassessed items\r\n      this.courseAssessments.forEach(assessment => {\r\n        if (!this.hasMarkForAssessment(assessment.id)) {\r\n          // Calculate the actual mark value based on the percentage and max mark\r\n          const markValue = Math.round((presetValue / 100) * assessment.max_mark);\r\n          this.simulatedMarks[assessment.id] = markValue;\r\n        }\r\n      });\r\n      \r\n      this.calculateRequiredMarks();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.mark-simulation h1 {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.progress {\r\n  border-radius: 0.25rem;\r\n  overflow: hidden;\r\n}\r\n\r\n.display-4 {\r\n  font-size: 3rem;\r\n}\r\n\r\n.position-indicator {\r\n  position: relative;\r\n  width: 0;\r\n  height: 0;\r\n  margin-top: -24px;\r\n  z-index: 2;\r\n  color: #343a40;\r\n  font-size: 1.5rem;\r\n  transform: translateX(-50%);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .display-4 {\r\n    font-size: 2.5rem;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}