{"ast":null,"code":"import axios from 'axios';\nexport default {\n  namespaced: true,\n  state: {\n    token: localStorage.getItem('token') || null,\n    user: JSON.parse(localStorage.getItem('user')) || null\n  },\n  getters: {\n    isAuthenticated: state => !!state.token,\n    getUser: state => state.user,\n    userRole: state => state.user ? state.user.role : null,\n    userId: state => state.user ? state.user.id : null\n  },\n  mutations: {\n    SET_TOKEN(state, token) {\n      state.token = token;\n    },\n    SET_USER(state, user) {\n      state.user = user;\n    },\n    CLEAR_AUTH(state) {\n      state.token = null;\n      state.user = null;\n    }\n  },\n  actions: {\n    async login({\n      commit,\n      dispatch\n    }, credentials) {\n      try {\n        dispatch('setLoading', true, {\n          root: true\n        });\n        const response = await axios.post('/api/auth/login', credentials);\n        const {\n          token,\n          user\n        } = response.data;\n\n        // Save to localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n\n        // Update state\n        commit('SET_TOKEN', token);\n        commit('SET_USER', user);\n        return user;\n      } catch (error) {\n        const errorMsg = error.response?.data?.error || 'Login failed';\n        dispatch('setError', errorMsg, {\n          root: true\n        });\n        throw new Error(errorMsg);\n      } finally {\n        dispatch('setLoading', false, {\n          root: true\n        });\n      }\n    },\n    async studentLogin({\n      commit,\n      dispatch\n    }, credentials) {\n      try {\n        dispatch('setLoading', true, {\n          root: true\n        });\n        const response = await axios.post('/api/auth/login', {\n          matricNumber: credentials.matricNumber,\n          pin: credentials.pin\n        });\n        const {\n          token,\n          user\n        } = response.data;\n\n        // Save to localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n\n        // Update state\n        commit('SET_TOKEN', token);\n        commit('SET_USER', user);\n        return user;\n      } catch (error) {\n        const errorMsg = error.response?.data?.error || 'Login failed';\n        dispatch('setError', errorMsg, {\n          root: true\n        });\n        throw new Error(errorMsg);\n      } finally {\n        dispatch('setLoading', false, {\n          root: true\n        });\n      }\n    },\n    async register({\n      commit,\n      dispatch\n    }, userData) {\n      try {\n        dispatch('setLoading', true, {\n          root: true\n        });\n        const response = await axios.post('/api/auth/register', userData);\n        return response.data;\n      } catch (error) {\n        const errorMsg = error.response?.data?.error || 'Registration failed';\n        dispatch('setError', errorMsg, {\n          root: true\n        });\n        throw new Error(errorMsg);\n      } finally {\n        dispatch('setLoading', false, {\n          root: true\n        });\n      }\n    },\n    logout({\n      commit\n    }) {\n      // Clear localStorage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n\n      // Update state\n      commit('CLEAR_AUTH');\n    },\n    checkAuth({\n      commit\n    }) {\n      const token = localStorage.getItem('token');\n      const user = JSON.parse(localStorage.getItem('user'));\n      if (token && user) {\n        commit('SET_TOKEN', token);\n        commit('SET_USER', user);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","namespaced","state","token","localStorage","getItem","user","JSON","parse","getters","isAuthenticated","getUser","userRole","role","userId","id","mutations","SET_TOKEN","SET_USER","CLEAR_AUTH","actions","login","commit","dispatch","credentials","root","response","post","data","setItem","stringify","error","errorMsg","Error","studentLogin","matricNumber","pin","register","userData","logout","removeItem","checkAuth"],"sources":["C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/src/store/modules/auth.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    token: localStorage.getItem('token') || null,\r\n    user: JSON.parse(localStorage.getItem('user')) || null\r\n  },\r\n  getters: {\r\n    isAuthenticated: state => !!state.token,\r\n    getUser: state => state.user,\r\n    userRole: state => state.user ? state.user.role : null,\r\n    userId: state => state.user ? state.user.id : null\r\n  },\r\n  mutations: {\r\n    SET_TOKEN(state, token) {\r\n      state.token = token;\r\n    },\r\n    SET_USER(state, user) {\r\n      state.user = user;\r\n    },\r\n    CLEAR_AUTH(state) {\r\n      state.token = null;\r\n      state.user = null;\r\n    }\r\n  },\r\n  actions: {\r\n    async login({ commit, dispatch }, credentials) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        const response = await axios.post('/api/auth/login', credentials);\r\n        const { token, user } = response.data;\r\n        \r\n        // Save to localStorage\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        \r\n        // Update state\r\n        commit('SET_TOKEN', token);\r\n        commit('SET_USER', user);\r\n        \r\n        return user;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Login failed';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async studentLogin({ commit, dispatch }, credentials) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        const response = await axios.post('/api/auth/login', {\r\n          matricNumber: credentials.matricNumber,\r\n          pin: credentials.pin\r\n        });\r\n        const { token, user } = response.data;\r\n        \r\n        // Save to localStorage\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        \r\n        // Update state\r\n        commit('SET_TOKEN', token);\r\n        commit('SET_USER', user);\r\n        \r\n        return user;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Login failed';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async register({ commit, dispatch }, userData) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        const response = await axios.post('/api/auth/register', userData);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Registration failed';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    logout({ commit }) {\r\n      // Clear localStorage\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      \r\n      // Update state\r\n      commit('CLEAR_AUTH');\r\n    },\r\n    \r\n    checkAuth({ commit }) {\r\n      const token = localStorage.getItem('token');\r\n      const user = JSON.parse(localStorage.getItem('user'));\r\n      \r\n      if (token && user) {\r\n        commit('SET_TOKEN', token);\r\n        commit('SET_USER', user);\r\n      }\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}