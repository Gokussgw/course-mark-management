{"ast":null,"code":"import _objectSpread from \"C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nexport default {\n  namespaced: true,\n  state: {\n    notifications: []\n  },\n  getters: {\n    notifications: function notifications(state) {\n      return state.notifications;\n    }\n  },\n  mutations: {\n    ADD_NOTIFICATION: function ADD_NOTIFICATION(state, notification) {\n      // Add unique id to the notification\n      var id = new Date().getTime() + Math.floor(Math.random() * 1000);\n      state.notifications.push(_objectSpread(_objectSpread({}, notification), {}, {\n        id: id\n      }));\n    },\n    REMOVE_NOTIFICATION: function REMOVE_NOTIFICATION(state, notificationId) {\n      state.notifications = state.notifications.filter(function (notification) {\n        return notification.id !== notificationId;\n      });\n    },\n    CLEAR_NOTIFICATIONS: function CLEAR_NOTIFICATIONS(state) {\n      state.notifications = [];\n    }\n  },\n  actions: {\n    add: function add(_ref, notification) {\n      var commit = _ref.commit,\n        dispatch = _ref.dispatch;\n      // Default notification type is info if not provided\n      var type = notification.type || 'info';\n      var timeout = notification.timeout || 5000; // 5 seconds default\n\n      // Add notification to state\n      commit('ADD_NOTIFICATION', _objectSpread(_objectSpread({}, notification), {}, {\n        type: type\n      }));\n\n      // Auto-remove notification after timeout unless specified as persistent\n      if (!notification.persistent) {\n        setTimeout(function () {\n          dispatch('remove', notification.id);\n        }, timeout);\n      }\n    },\n    remove: function remove(_ref2, notificationId) {\n      var commit = _ref2.commit;\n      commit('REMOVE_NOTIFICATION', notificationId);\n    },\n    clear: function clear(_ref3) {\n      var commit = _ref3.commit;\n      commit('CLEAR_NOTIFICATIONS');\n    }\n  }\n};","map":{"version":3,"names":["namespaced","state","notifications","getters","mutations","ADD_NOTIFICATION","notification","id","Date","getTime","Math","floor","random","push","_objectSpread","REMOVE_NOTIFICATION","notificationId","filter","CLEAR_NOTIFICATIONS","actions","add","_ref","commit","dispatch","type","timeout","persistent","setTimeout","remove","_ref2","clear","_ref3"],"sources":["C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/src/store/modules/notification.js"],"sourcesContent":["export default {\r\n  namespaced: true,\r\n  \r\n  state: {\r\n    notifications: []\r\n  },\r\n  \r\n  getters: {\r\n    notifications: state => state.notifications\r\n  },\r\n  \r\n  mutations: {\r\n    ADD_NOTIFICATION(state, notification) {\r\n      // Add unique id to the notification\r\n      const id = new Date().getTime() + Math.floor(Math.random() * 1000);\r\n      state.notifications.push({ ...notification, id });\r\n    },\r\n    \r\n    REMOVE_NOTIFICATION(state, notificationId) {\r\n      state.notifications = state.notifications.filter(notification => \r\n        notification.id !== notificationId\r\n      );\r\n    },\r\n    \r\n    CLEAR_NOTIFICATIONS(state) {\r\n      state.notifications = [];\r\n    }\r\n  },\r\n  \r\n  actions: {\r\n    add({ commit, dispatch }, notification) {\r\n      // Default notification type is info if not provided\r\n      const type = notification.type || 'info';\r\n      const timeout = notification.timeout || 5000; // 5 seconds default\r\n      \r\n      // Add notification to state\r\n      commit('ADD_NOTIFICATION', { \r\n        ...notification, \r\n        type \r\n      });\r\n      \r\n      // Auto-remove notification after timeout unless specified as persistent\r\n      if (!notification.persistent) {\r\n        setTimeout(() => {\r\n          dispatch('remove', notification.id);\r\n        }, timeout);\r\n      }\r\n    },\r\n    \r\n    remove({ commit }, notificationId) {\r\n      commit('REMOVE_NOTIFICATION', notificationId);\r\n    },\r\n    \r\n    clear({ commit }) {\r\n      commit('CLEAR_NOTIFICATIONS');\r\n    }\r\n  }\r\n};\r\n"],"mappings":";;;;;;;;AAAA,eAAe;EACbA,UAAU,EAAE,IAAI;EAEhBC,KAAK,EAAE;IACLC,aAAa,EAAE;EACjB,CAAC;EAEDC,OAAO,EAAE;IACPD,aAAa,EAAE,SAAfA,aAAaA,CAAED,KAAK;MAAA,OAAIA,KAAK,CAACC,aAAa;IAAA;EAC7C,CAAC;EAEDE,SAAS,EAAE;IACTC,gBAAgB,WAAhBA,gBAAgBA,CAACJ,KAAK,EAAEK,YAAY,EAAE;MACpC;MACA,IAAMC,EAAE,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;MAClEX,KAAK,CAACC,aAAa,CAACW,IAAI,CAAAC,aAAA,CAAAA,aAAA,KAAMR,YAAY;QAAEC,EAAE,EAAFA;MAAE,EAAE,CAAC;IACnD,CAAC;IAEDQ,mBAAmB,WAAnBA,mBAAmBA,CAACd,KAAK,EAAEe,cAAc,EAAE;MACzCf,KAAK,CAACC,aAAa,GAAGD,KAAK,CAACC,aAAa,CAACe,MAAM,CAAC,UAAAX,YAAY;QAAA,OAC3DA,YAAY,CAACC,EAAE,KAAKS,cAAc;MAAA,CACpC,CAAC;IACH,CAAC;IAEDE,mBAAmB,WAAnBA,mBAAmBA,CAACjB,KAAK,EAAE;MACzBA,KAAK,CAACC,aAAa,GAAG,EAAE;IAC1B;EACF,CAAC;EAEDiB,OAAO,EAAE;IACPC,GAAG,WAAHA,GAAGA,CAAAC,IAAA,EAAuBf,YAAY,EAAE;MAAA,IAAlCgB,MAAM,GAAAD,IAAA,CAANC,MAAM;QAAEC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;MACpB;MACA,IAAMC,IAAI,GAAGlB,YAAY,CAACkB,IAAI,IAAI,MAAM;MACxC,IAAMC,OAAO,GAAGnB,YAAY,CAACmB,OAAO,IAAI,IAAI,CAAC,CAAC;;MAE9C;MACAH,MAAM,CAAC,kBAAkB,EAAAR,aAAA,CAAAA,aAAA,KACpBR,YAAY;QACfkB,IAAI,EAAJA;MAAI,EACL,CAAC;;MAEF;MACA,IAAI,CAAClB,YAAY,CAACoB,UAAU,EAAE;QAC5BC,UAAU,CAAC,YAAM;UACfJ,QAAQ,CAAC,QAAQ,EAAEjB,YAAY,CAACC,EAAE,CAAC;QACrC,CAAC,EAAEkB,OAAO,CAAC;MACb;IACF,CAAC;IAEDG,MAAM,WAANA,MAAMA,CAAAC,KAAA,EAAab,cAAc,EAAE;MAAA,IAA1BM,MAAM,GAAAO,KAAA,CAANP,MAAM;MACbA,MAAM,CAAC,qBAAqB,EAAEN,cAAc,CAAC;IAC/C,CAAC;IAEDc,KAAK,WAALA,KAAKA,CAAAC,KAAA,EAAa;MAAA,IAAVT,MAAM,GAAAS,KAAA,CAANT,MAAM;MACZA,MAAM,CAAC,qBAAqB,CAAC;IAC/B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}