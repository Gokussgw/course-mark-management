{"ast":null,"code":"import _regenerator from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { mapState, mapGetters, mapActions } from 'vuex';\nexport default {\n  name: 'MarkSimulation',\n  data: function data() {\n    return {\n      courseId: null,\n      simulatedMarks: {},\n      // assessment_id -> simulated_mark\n      requiredMarks: {\n        pass: 0,\n        distinction: 0\n      }\n    };\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapState({\n    isLoading: function isLoading(state) {\n      return state.loading;\n    },\n    course: function course(state) {\n      return state.courses.course;\n    },\n    marks: function marks(state) {\n      return state.marks.marks;\n    },\n    userId: function userId(state) {\n      return state.auth.userId;\n    }\n  })), mapGetters({\n    getCourseAssessments: 'assessments/getCourseAssessments'\n  })), {}, {\n    courseAssessments: function courseAssessments() {\n      return this.getCourseAssessments(this.courseId) || [];\n    },\n    sortedAssessments: function sortedAssessments() {\n      return _toConsumableArray(this.courseAssessments).sort(function (a, b) {\n        // Sort by due date\n        if (!a.due_date) return 1;\n        if (!b.due_date) return -1;\n        return new Date(a.due_date) - new Date(b.due_date);\n      });\n    },\n    studentMarks: function studentMarks() {\n      var _this = this;\n      return this.marks.filter(function (mark) {\n        return mark.student_id === _this.userId && mark.course_id === parseInt(_this.courseId);\n      });\n    },\n    unassessedItems: function unassessedItems() {\n      var _this2 = this;\n      return this.courseAssessments.filter(function (assessment) {\n        return !_this2.hasMarkForAssessment(assessment.id);\n      });\n    },\n    totalRemainingWeight: function totalRemainingWeight() {\n      return this.unassessedItems.reduce(function (sum, assessment) {\n        return sum + assessment.weightage;\n      }, 0);\n    },\n    currentOverallMark: function currentOverallMark() {\n      var _this3 = this;\n      if (!this.studentMarks.length) return 0;\n      var weightedSum = 0;\n      var totalWeight = 0;\n      this.studentMarks.forEach(function (mark) {\n        var assessment = _this3.courseAssessments.find(function (a) {\n          return a.id === mark.assessment_id;\n        });\n        if (!assessment) return;\n        var percentage = _this3.calculatePercentage(mark.mark, assessment.max_mark);\n        weightedSum += percentage * assessment.weightage;\n        totalWeight += parseInt(assessment.weightage);\n      });\n      if (totalWeight === 0) return 0;\n      return Math.round(weightedSum / totalWeight);\n    },\n    simulatedOverallMark: function simulatedOverallMark() {\n      var _this4 = this;\n      var weightedSum = 0;\n      var totalWeight = 0;\n\n      // Include actual marks\n      this.studentMarks.forEach(function (mark) {\n        // Skip if this assessment is being simulated\n        if (_this4.isSimulatedAssessment(mark.assessment_id)) return;\n        var assessment = _this4.courseAssessments.find(function (a) {\n          return a.id === mark.assessment_id;\n        });\n        if (!assessment) return;\n        var percentage = _this4.calculatePercentage(mark.mark, assessment.max_mark);\n        weightedSum += percentage * assessment.weightage;\n        totalWeight += parseInt(assessment.weightage);\n      });\n\n      // Include simulated marks\n      var _loop = function _loop(assessmentId) {\n        var mark = _this4.simulatedMarks[assessmentId];\n        var assessment = _this4.courseAssessments.find(function (a) {\n          return a.id === parseInt(assessmentId);\n        });\n        if (!assessment || mark === undefined) return 1; // continue\n        var percentage = _this4.calculatePercentage(mark, assessment.max_mark);\n        weightedSum += percentage * assessment.weightage;\n        totalWeight += parseInt(assessment.weightage);\n      };\n      for (var assessmentId in this.simulatedMarks) {\n        if (_loop(assessmentId)) continue;\n      }\n      if (totalWeight === 0) return 0;\n      return Math.round(weightedSum / totalWeight);\n    },\n    simulatedGrade: function simulatedGrade() {\n      return this.calculateGrade(this.simulatedOverallMark);\n    },\n    markChange: function markChange() {\n      return this.simulatedOverallMark - this.currentOverallMark;\n    },\n    getSimulatedMarkClass: function getSimulatedMarkClass() {\n      if (this.simulatedOverallMark >= 70) return 'text-success';\n      if (this.simulatedOverallMark >= 50) return 'text-warning';\n      return 'text-danger';\n    },\n    getSimulatedGradeBadgeClass: function getSimulatedGradeBadgeClass() {\n      if (this.simulatedOverallMark >= 70) return 'bg-success';\n      if (this.simulatedOverallMark >= 50) return 'bg-warning';\n      return 'bg-danger';\n    },\n    getCurrentMarkClass: function getCurrentMarkClass() {\n      if (this.currentOverallMark >= 70) return 'text-success';\n      if (this.currentOverallMark >= 50) return 'text-warning';\n      return 'text-danger';\n    },\n    getMarkChangeClass: function getMarkChangeClass() {\n      if (this.markChange > 0) return 'text-success';\n      if (this.markChange < 0) return 'text-danger';\n      return 'text-muted';\n    }\n  }),\n  created: function created() {\n    var _this5 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n      var _t;\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            _this5.courseId = parseInt(_this5.$route.params.id);\n            _context.p = 1;\n            _context.n = 2;\n            return _this5.fetchCourse(_this5.courseId);\n          case 2:\n            _context.n = 3;\n            return _this5.fetchAssessments({\n              courseId: _this5.courseId\n            });\n          case 3:\n            _context.n = 4;\n            return _this5.fetchMarks({\n              studentId: _this5.userId,\n              courseId: _this5.courseId\n            });\n          case 4:\n            // Initialize the simulation\n            _this5.initializeSimulation();\n\n            // Calculate required marks\n            _this5.calculateRequiredMarks();\n            _context.n = 6;\n            break;\n          case 5:\n            _context.p = 5;\n            _t = _context.v;\n            console.error('Error loading simulation data:', _t);\n          case 6:\n            return _context.a(2);\n        }\n      }, _callee, null, [[1, 5]]);\n    }))();\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions({\n    fetchCourse: 'courses/fetchCourse',\n    fetchAssessments: 'assessments/fetchAssessments',\n    fetchMarks: 'marks/fetchMarks'\n  })), {}, {\n    formatDate: function formatDate(dateString) {\n      if (!dateString) return 'Not set';\n      return new Date(dateString).toLocaleDateString();\n    },\n    hasMarkForAssessment: function hasMarkForAssessment(assessmentId) {\n      return this.studentMarks.some(function (mark) {\n        return mark.assessment_id === parseInt(assessmentId);\n      });\n    },\n    getMarkForAssessment: function getMarkForAssessment(assessmentId) {\n      return this.studentMarks.find(function (mark) {\n        return mark.assessment_id === parseInt(assessmentId);\n      });\n    },\n    isSimulatedAssessment: function isSimulatedAssessment(assessmentId) {\n      return assessmentId in this.simulatedMarks;\n    },\n    calculatePercentage: function calculatePercentage(mark, maxMark) {\n      if (!maxMark) return 0;\n      return Math.round(mark / maxMark * 100);\n    },\n    getAssessmentTypeBadgeClass: function getAssessmentTypeBadgeClass(type) {\n      var types = {\n        'exam': 'bg-danger',\n        'midterm': 'bg-warning',\n        'quiz': 'bg-info',\n        'assignment': 'bg-success',\n        'project': 'bg-primary',\n        'lab': 'bg-secondary'\n      };\n      return types[type.toLowerCase()] || 'bg-secondary';\n    },\n    getAssessmentStatus: function getAssessmentStatus(assessment) {\n      // Check if it has a real mark\n      if (this.hasMarkForAssessment(assessment.id) && !this.isSimulatedAssessment(assessment.id)) {\n        return 'Completed';\n      }\n\n      // Check if it has a simulated mark\n      if (this.isSimulatedAssessment(assessment.id)) {\n        return 'Simulated';\n      }\n      var today = new Date();\n      var dueDate = assessment.due_date ? new Date(assessment.due_date) : null;\n      if (!dueDate) return 'Upcoming';\n      if (dueDate < today) {\n        return 'Overdue';\n      }\n      if (dueDate.getTime() - today.getTime() < 7 * 24 * 60 * 60 * 1000) {\n        return 'Upcoming';\n      }\n      return 'Scheduled';\n    },\n    getStatusBadge: function getStatusBadge(assessment) {\n      var status = this.getAssessmentStatus(assessment);\n      var badges = {\n        'Completed': 'bg-success',\n        'Simulated': 'bg-info',\n        'Overdue': 'bg-danger',\n        'Upcoming': 'bg-warning',\n        'Scheduled': 'bg-secondary'\n      };\n      return badges[status] || 'bg-secondary';\n    },\n    calculateGrade: function calculateGrade(percentage) {\n      if (percentage >= 90) return 'A+';\n      if (percentage >= 80) return 'A';\n      if (percentage >= 75) return 'B+';\n      if (percentage >= 70) return 'B';\n      if (percentage >= 65) return 'C+';\n      if (percentage >= 60) return 'C';\n      if (percentage >= 55) return 'D+';\n      if (percentage >= 50) return 'D';\n      return 'F';\n    },\n    initializeSimulation: function initializeSimulation() {\n      var _this6 = this;\n      this.simulatedMarks = {};\n\n      // For assessments without marks, initialize with empty values\n      this.courseAssessments.forEach(function (assessment) {\n        if (!_this6.hasMarkForAssessment(assessment.id)) {\n          _this6.simulatedMarks[assessment.id] = undefined;\n        }\n      });\n    },\n    resetSimulation: function resetSimulation() {\n      this.initializeSimulation();\n      this.calculateRequiredMarks();\n    },\n    updateSimulation: function updateSimulation() {\n      this.calculateRequiredMarks();\n    },\n    calculateRequiredMarks: function calculateRequiredMarks() {\n      var _this7 = this;\n      // Calculate how much is needed on remaining assessments to achieve target grades\n\n      // First, get the current contribution from real and simulated marks\n      var currentWeightedSum = 0;\n      var assessedWeight = 0;\n\n      // Include actual marks (that aren't being simulated)\n      this.studentMarks.forEach(function (mark) {\n        if (_this7.isSimulatedAssessment(mark.assessment_id)) return;\n        var assessment = _this7.courseAssessments.find(function (a) {\n          return a.id === mark.assessment_id;\n        });\n        if (!assessment) return;\n        var percentage = _this7.calculatePercentage(mark.mark, assessment.max_mark);\n        currentWeightedSum += percentage * assessment.weightage;\n        assessedWeight += assessment.weightage;\n      });\n\n      // Include simulated marks that have values\n      var _loop2 = function _loop2(assessmentId) {\n          var mark = _this7.simulatedMarks[assessmentId];\n          if (mark === undefined) return 0; // continue\n          var assessment = _this7.courseAssessments.find(function (a) {\n            return a.id === parseInt(assessmentId);\n          });\n          if (!assessment) return 0; // continue\n          var percentage = _this7.calculatePercentage(mark, assessment.max_mark);\n          currentWeightedSum += percentage * assessment.weightage;\n          assessedWeight += assessment.weightage;\n        },\n        _ret;\n      for (var assessmentId in this.simulatedMarks) {\n        _ret = _loop2(assessmentId);\n        if (_ret === 0) continue;\n      }\n\n      // Calculate remaining unassessed weight\n      var unassessedWeight = 0;\n      this.courseAssessments.forEach(function (assessment) {\n        var assessmentId = assessment.id;\n        if (!_this7.hasMarkForAssessment(assessmentId) && !(assessmentId in _this7.simulatedMarks && _this7.simulatedMarks[assessmentId] !== undefined)) {\n          unassessedWeight += assessment.weightage;\n        }\n      });\n\n      // Calculate required marks for different grade thresholds\n      var totalWeight = 100; // Assuming total is 100%\n\n      // For passing grade (50%)\n      var requiredForPass = (50 * totalWeight - currentWeightedSum) / unassessedWeight;\n      this.requiredMarks.pass = unassessedWeight > 0 ? Math.round(requiredForPass) : 0;\n\n      // For distinction grade (70%)\n      var requiredForDistinction = (70 * totalWeight - currentWeightedSum) / unassessedWeight;\n      this.requiredMarks.distinction = unassessedWeight > 0 ? Math.round(requiredForDistinction) : 0;\n    },\n    formatRequiredMark: function formatRequiredMark(value) {\n      if (value <= 0) return 'Already achieved';\n      if (value > 100) return 'Not possible';\n      return \"\".concat(value, \"% needed\");\n    },\n    applyPreset: function applyPreset(preset) {\n      var _this8 = this;\n      // Apply preset values to all simulated assessments\n      var presetValue = 0;\n      switch (preset) {\n        case 'best':\n          presetValue = 90;\n          break;\n        case 'good':\n          presetValue = 75;\n          break;\n        case 'average':\n          presetValue = 65;\n          break;\n        case 'minimal':\n          presetValue = 50;\n          break;\n      }\n\n      // Apply the preset percentage to all unassessed items\n      this.courseAssessments.forEach(function (assessment) {\n        if (!_this8.hasMarkForAssessment(assessment.id)) {\n          // Calculate the actual mark value based on the percentage and max mark\n          var markValue = Math.round(presetValue / 100 * assessment.max_mark);\n          _this8.simulatedMarks[assessment.id] = markValue;\n        }\n      });\n      this.calculateRequiredMarks();\n    }\n  })\n};","map":{"version":3,"names":["mapState","mapGetters","mapActions","name","data","courseId","simulatedMarks","requiredMarks","pass","distinction","computed","_objectSpread","isLoading","state","loading","course","courses","marks","userId","auth","getCourseAssessments","courseAssessments","sortedAssessments","_toConsumableArray","sort","a","b","due_date","Date","studentMarks","_this","filter","mark","student_id","course_id","parseInt","unassessedItems","_this2","assessment","hasMarkForAssessment","id","totalRemainingWeight","reduce","sum","weightage","currentOverallMark","_this3","length","weightedSum","totalWeight","forEach","find","assessment_id","percentage","calculatePercentage","max_mark","Math","round","simulatedOverallMark","_this4","isSimulatedAssessment","_loop","assessmentId","undefined","simulatedGrade","calculateGrade","markChange","getSimulatedMarkClass","getSimulatedGradeBadgeClass","getCurrentMarkClass","getMarkChangeClass","created","_this5","_asyncToGenerator","_regenerator","m","_callee","_t","w","_context","n","$route","params","p","fetchCourse","fetchAssessments","fetchMarks","studentId","initializeSimulation","calculateRequiredMarks","v","console","error","methods","formatDate","dateString","toLocaleDateString","some","getMarkForAssessment","maxMark","getAssessmentTypeBadgeClass","type","types","toLowerCase","getAssessmentStatus","today","dueDate","getTime","getStatusBadge","status","badges","_this6","resetSimulation","updateSimulation","_this7","currentWeightedSum","assessedWeight","_loop2","_ret","unassessedWeight","requiredForPass","requiredForDistinction","formatRequiredMark","value","concat","applyPreset","preset","_this8","presetValue","markValue"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\NEW\\course-mark-management\\frontend\\src\\views\\student\\MarkSimulation.vue"],"sourcesContent":["<template>\r\n  <div class=\"mark-simulation\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/student/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link :to=\"`/student/course/${courseId}`\">\r\n                {{ course?.code }} - {{ course?.name }}\r\n              </router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Grade Simulator\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">Grade Simulator</h1>\r\n        <p class=\"text-muted\">\r\n          {{ course?.code }} | {{ course?.name }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"!course\" class=\"alert alert-danger\">\r\n      Course not found or you don't have access to this course.\r\n    </div>\r\n\r\n    <div v-else class=\"row\">\r\n      <div class=\"col-md-8 mb-4\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Assessment Marks</h5>\r\n            <p class=\"text-muted small mb-0\">\r\n              Enter hypothetical marks for assessments to simulate your final grade\r\n            </p>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"alert alert-info mb-4\">\r\n              <i class=\"fas fa-info-circle me-2\"></i>\r\n              Enter the marks you expect to get for assessments that haven't been graded yet. Your actual marks are pre-filled where available.\r\n            </div>\r\n\r\n            <div class=\"table-responsive\">\r\n              <table class=\"table table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Assessment</th>\r\n                    <th>Type</th>\r\n                    <th>Weight</th>\r\n                    <th>Status</th>\r\n                    <th>Mark</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr v-for=\"assessment in sortedAssessments\" :key=\"assessment.id\">\r\n                    <td>\r\n                      <strong>{{ assessment.name }}</strong>\r\n                    </td>\r\n                    <td>\r\n                      <span class=\"badge\" :class=\"getAssessmentTypeBadgeClass(assessment.type)\">\r\n                        {{ assessment.type }}\r\n                      </span>\r\n                    </td>\r\n                    <td>{{ assessment.weightage }}%</td>\r\n                    <td>\r\n                      <span \r\n                        class=\"badge\" \r\n                        :class=\"getStatusBadge(assessment)\"\r\n                      >\r\n                        {{ getAssessmentStatus(assessment) }}\r\n                      </span>\r\n                    </td>\r\n                    <td style=\"width: 180px;\">\r\n                      <div v-if=\"hasMarkForAssessment(assessment.id) && !isSimulatedAssessment(assessment.id)\">\r\n                        <div class=\"input-group input-group-sm disabled\">\r\n                          <input \r\n                            type=\"number\" \r\n                            class=\"form-control bg-light\"\r\n                            :value=\"getMarkForAssessment(assessment.id).mark\"\r\n                            disabled\r\n                          >\r\n                          <span class=\"input-group-text\">/ {{ assessment.max_mark }}</span>\r\n                        </div>\r\n                        <small class=\"text-muted\">Actual mark ({{ calculatePercentage(getMarkForAssessment(assessment.id).mark, assessment.max_mark) }}%)</small>\r\n                      </div>\r\n                      <div v-else>\r\n                        <div class=\"input-group input-group-sm\">\r\n                          <input \r\n                            type=\"number\" \r\n                            class=\"form-control\"\r\n                            v-model.number=\"simulatedMarks[assessment.id]\"\r\n                            :min=\"0\" \r\n                            :max=\"assessment.max_mark\"\r\n                            @input=\"updateSimulation\"\r\n                          >\r\n                          <span class=\"input-group-text\">/ {{ assessment.max_mark }}</span>\r\n                        </div>\r\n                        <small class=\"text-muted\" v-if=\"simulatedMarks[assessment.id] !== undefined\">\r\n                          Simulated ({{ calculatePercentage(simulatedMarks[assessment.id], assessment.max_mark) }}%)\r\n                        </small>\r\n                        <small class=\"text-muted\" v-else>\r\n                          Enter expected mark\r\n                        </small>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div class=\"d-flex justify-content-end mt-3\">\r\n              <button class=\"btn btn-outline-secondary me-2\" @click=\"resetSimulation\">\r\n                Reset Simulation\r\n              </button>\r\n              <div class=\"dropdown\">\r\n                <button \r\n                  class=\"btn btn-outline-primary dropdown-toggle\" \r\n                  type=\"button\" \r\n                  id=\"presetDropdown\" \r\n                  data-bs-toggle=\"dropdown\" \r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Apply Preset\r\n                </button>\r\n                <ul class=\"dropdown-menu\" aria-labelledby=\"presetDropdown\">\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('best')\">Best Case (90%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('good')\">Good Case (75%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('average')\">Average Case (65%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('minimal')\">Minimal Pass (50%)</a></li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-4 mb-4\">\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Simulation Results</h5>\r\n          </div>\r\n          <div class=\"card-body text-center\">\r\n            <div class=\"mb-4\">\r\n              <div class=\"display-4 fw-bold\" :class=\"getSimulatedMarkClass\">\r\n                {{ simulatedOverallMark }}%\r\n              </div>\r\n              <div class=\"badge fs-6 my-2\" :class=\"getSimulatedGradeBadgeClass\">\r\n                {{ simulatedGrade }}\r\n              </div>\r\n              <p class=\"text-muted\">Projected Final Grade</p>\r\n            </div>\r\n            \r\n            <hr class=\"my-4\">\r\n            \r\n            <div class=\"comparison mb-3\">\r\n              <div class=\"row\">\r\n                <div class=\"col-6 text-start\">\r\n                  <p class=\"mb-1 small text-muted\">Current Mark</p>\r\n                  <h4 :class=\"getCurrentMarkClass\">{{ currentOverallMark }}%</h4>\r\n                </div>\r\n                <div class=\"col-6 text-end\">\r\n                  <p class=\"mb-1 small text-muted\">Change</p>\r\n                  <h4 :class=\"getMarkChangeClass\">\r\n                    {{ markChange > 0 ? '+' : '' }}{{ markChange }}%\r\n                  </h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"progress mb-3\" style=\"height: 10px;\">\r\n              <div \r\n                class=\"progress-bar bg-danger\" \r\n                role=\"progressbar\" \r\n                :style=\"`width: 50%`\"\r\n                aria-valuenow=\"50\" \r\n                aria-valuemin=\"0\" \r\n                aria-valuemax=\"100\">\r\n              </div>\r\n            </div>\r\n            <div class=\"d-flex justify-content-between\">\r\n              <small>Fail</small>\r\n              <small>Pass</small>\r\n              <small>Distinction</small>\r\n            </div>\r\n            \r\n            <div \r\n              class=\"position-indicator\" \r\n              :style=\"`left: ${Math.min(Math.max(simulatedOverallMark, 0), 100)}%`\"\r\n            >\r\n              <i class=\"fas fa-caret-down\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Required Marks</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <p class=\"text-muted small mb-3\">\r\n              Marks required on remaining assessments to achieve these grades:\r\n            </p>\r\n            \r\n            <div class=\"required-mark-row\">\r\n              <div class=\"d-flex justify-content-between mb-2\">\r\n                <span class=\"badge bg-success\">Distinction (70%+)</span>\r\n                <span \r\n                  :class=\"{ 'text-success': requiredMarks.distinction <= 100, 'text-danger': requiredMarks.distinction > 100 }\"\r\n                >\r\n                  {{ formatRequiredMark(requiredMarks.distinction) }}\r\n                </span>\r\n              </div>\r\n              <div class=\"progress mb-3\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-success\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${Math.min(requiredMarks.distinction, 100)}%`\"\r\n                  :aria-valuenow=\"Math.min(requiredMarks.distinction, 100)\"\r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"required-mark-row\">\r\n              <div class=\"d-flex justify-content-between mb-2\">\r\n                <span class=\"badge bg-warning\">Pass (50%+)</span>\r\n                <span\r\n                  :class=\"{ 'text-success': requiredMarks.pass <= 100, 'text-danger': requiredMarks.pass > 100 }\"\r\n                >\r\n                  {{ formatRequiredMark(requiredMarks.pass) }}\r\n                </span>\r\n              </div>\r\n              <div class=\"progress mb-3\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-warning\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${Math.min(requiredMarks.pass, 100)}%`\"\r\n                  :aria-valuenow=\"Math.min(requiredMarks.pass, 100)\"\r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"alert alert-secondary mt-3 small\">\r\n              <i class=\"fas fa-info-circle me-2\"></i>\r\n              These calculations show the average mark needed on all remaining assessments to achieve the target grade.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'MarkSimulation',\r\n  data() {\r\n    return {\r\n      courseId: null,\r\n      simulatedMarks: {}, // assessment_id -> simulated_mark\r\n      requiredMarks: {\r\n        pass: 0,\r\n        distinction: 0\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      isLoading: state => state.loading,\r\n      course: state => state.courses.course,\r\n      marks: state => state.marks.marks,\r\n      userId: state => state.auth.userId\r\n    }),\r\n    ...mapGetters({\r\n      getCourseAssessments: 'assessments/getCourseAssessments'\r\n    }),\r\n    courseAssessments() {\r\n      return this.getCourseAssessments(this.courseId) || [];\r\n    },\r\n    sortedAssessments() {\r\n      return [...this.courseAssessments].sort((a, b) => {\r\n        // Sort by due date\r\n        if (!a.due_date) return 1;\r\n        if (!b.due_date) return -1;\r\n        return new Date(a.due_date) - new Date(b.due_date);\r\n      });\r\n    },\r\n    studentMarks() {\r\n      return this.marks.filter(mark => \r\n        mark.student_id === this.userId && \r\n        mark.course_id === parseInt(this.courseId)\r\n      );\r\n    },\r\n    unassessedItems() {\r\n      return this.courseAssessments.filter(assessment => \r\n        !this.hasMarkForAssessment(assessment.id)\r\n      );\r\n    },\r\n    totalRemainingWeight() {\r\n      return this.unassessedItems.reduce((sum, assessment) => sum + assessment.weightage, 0);\r\n    },\r\n    currentOverallMark() {\r\n      if (!this.studentMarks.length) return 0;\r\n      \r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      this.studentMarks.forEach(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        weightedSum += percentage * assessment.weightage;\r\n        totalWeight += parseInt(assessment.weightage);\r\n      });\r\n      \r\n      if (totalWeight === 0) return 0;\r\n      return Math.round(weightedSum / totalWeight);\r\n    },\r\n    simulatedOverallMark() {\r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      // Include actual marks\r\n      this.studentMarks.forEach(mark => {\r\n        // Skip if this assessment is being simulated\r\n        if (this.isSimulatedAssessment(mark.assessment_id)) return;\r\n        \r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        weightedSum += percentage * assessment.weightage;\r\n        totalWeight += parseInt(assessment.weightage);\r\n      });\r\n      \r\n      // Include simulated marks\r\n      for (const assessmentId in this.simulatedMarks) {\r\n        const mark = this.simulatedMarks[assessmentId];\r\n        const assessment = this.courseAssessments.find(a => a.id === parseInt(assessmentId));\r\n        \r\n        if (!assessment || mark === undefined) continue;\r\n        \r\n        const percentage = this.calculatePercentage(mark, assessment.max_mark);\r\n        weightedSum += percentage * assessment.weightage;\r\n        totalWeight += parseInt(assessment.weightage);\r\n      }\r\n      \r\n      if (totalWeight === 0) return 0;\r\n      return Math.round(weightedSum / totalWeight);\r\n    },\r\n    simulatedGrade() {\r\n      return this.calculateGrade(this.simulatedOverallMark);\r\n    },\r\n    markChange() {\r\n      return this.simulatedOverallMark - this.currentOverallMark;\r\n    },\r\n    getSimulatedMarkClass() {\r\n      if (this.simulatedOverallMark >= 70) return 'text-success';\r\n      if (this.simulatedOverallMark >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getSimulatedGradeBadgeClass() {\r\n      if (this.simulatedOverallMark >= 70) return 'bg-success';\r\n      if (this.simulatedOverallMark >= 50) return 'bg-warning';\r\n      return 'bg-danger';\r\n    },\r\n    getCurrentMarkClass() {\r\n      if (this.currentOverallMark >= 70) return 'text-success';\r\n      if (this.currentOverallMark >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getMarkChangeClass() {\r\n      if (this.markChange > 0) return 'text-success';\r\n      if (this.markChange < 0) return 'text-danger';\r\n      return 'text-muted';\r\n    }\r\n  },\r\n  async created() {\r\n    this.courseId = parseInt(this.$route.params.id);\r\n    \r\n    try {\r\n      // Fetch course details\r\n      await this.fetchCourse(this.courseId);\r\n      \r\n      // Fetch assessments for this course\r\n      await this.fetchAssessments({ courseId: this.courseId });\r\n      \r\n      // Fetch marks for this student in this course\r\n      await this.fetchMarks({ \r\n        studentId: this.userId,\r\n        courseId: this.courseId\r\n      });\r\n      \r\n      // Initialize the simulation\r\n      this.initializeSimulation();\r\n      \r\n      // Calculate required marks\r\n      this.calculateRequiredMarks();\r\n    } catch (error) {\r\n      console.error('Error loading simulation data:', error);\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchCourse: 'courses/fetchCourse',\r\n      fetchAssessments: 'assessments/fetchAssessments',\r\n      fetchMarks: 'marks/fetchMarks'\r\n    }),\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not set';\r\n      return new Date(dateString).toLocaleDateString();\r\n    },\r\n    hasMarkForAssessment(assessmentId) {\r\n      return this.studentMarks.some(mark => mark.assessment_id === parseInt(assessmentId));\r\n    },\r\n    getMarkForAssessment(assessmentId) {\r\n      return this.studentMarks.find(mark => mark.assessment_id === parseInt(assessmentId));\r\n    },\r\n    isSimulatedAssessment(assessmentId) {\r\n      return assessmentId in this.simulatedMarks;\r\n    },\r\n    calculatePercentage(mark, maxMark) {\r\n      if (!maxMark) return 0;\r\n      return Math.round((mark / maxMark) * 100);\r\n    },\r\n    getAssessmentTypeBadgeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    getAssessmentStatus(assessment) {\r\n      // Check if it has a real mark\r\n      if (this.hasMarkForAssessment(assessment.id) && !this.isSimulatedAssessment(assessment.id)) {\r\n        return 'Completed';\r\n      }\r\n      \r\n      // Check if it has a simulated mark\r\n      if (this.isSimulatedAssessment(assessment.id)) {\r\n        return 'Simulated';\r\n      }\r\n      \r\n      const today = new Date();\r\n      const dueDate = assessment.due_date ? new Date(assessment.due_date) : null;\r\n      \r\n      if (!dueDate) return 'Upcoming';\r\n      \r\n      if (dueDate < today) {\r\n        return 'Overdue';\r\n      }\r\n      \r\n      if (dueDate.getTime() - today.getTime() < 7 * 24 * 60 * 60 * 1000) {\r\n        return 'Upcoming';\r\n      }\r\n      \r\n      return 'Scheduled';\r\n    },\r\n    getStatusBadge(assessment) {\r\n      const status = this.getAssessmentStatus(assessment);\r\n      \r\n      const badges = {\r\n        'Completed': 'bg-success',\r\n        'Simulated': 'bg-info',\r\n        'Overdue': 'bg-danger',\r\n        'Upcoming': 'bg-warning',\r\n        'Scheduled': 'bg-secondary'\r\n      };\r\n      \r\n      return badges[status] || 'bg-secondary';\r\n    },\r\n    calculateGrade(percentage) {\r\n      if (percentage >= 90) return 'A+';\r\n      if (percentage >= 80) return 'A';\r\n      if (percentage >= 75) return 'B+';\r\n      if (percentage >= 70) return 'B';\r\n      if (percentage >= 65) return 'C+';\r\n      if (percentage >= 60) return 'C';\r\n      if (percentage >= 55) return 'D+';\r\n      if (percentage >= 50) return 'D';\r\n      return 'F';\r\n    },\r\n    initializeSimulation() {\r\n      this.simulatedMarks = {};\r\n      \r\n      // For assessments without marks, initialize with empty values\r\n      this.courseAssessments.forEach(assessment => {\r\n        if (!this.hasMarkForAssessment(assessment.id)) {\r\n          this.simulatedMarks[assessment.id] = undefined;\r\n        }\r\n      });\r\n    },\r\n    resetSimulation() {\r\n      this.initializeSimulation();\r\n      this.calculateRequiredMarks();\r\n    },\r\n    updateSimulation() {\r\n      this.calculateRequiredMarks();\r\n    },\r\n    calculateRequiredMarks() {\r\n      // Calculate how much is needed on remaining assessments to achieve target grades\r\n      \r\n      // First, get the current contribution from real and simulated marks\r\n      let currentWeightedSum = 0;\r\n      let assessedWeight = 0;\r\n      \r\n      // Include actual marks (that aren't being simulated)\r\n      this.studentMarks.forEach(mark => {\r\n        if (this.isSimulatedAssessment(mark.assessment_id)) return;\r\n        \r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        currentWeightedSum += percentage * assessment.weightage;\r\n        assessedWeight += assessment.weightage;\r\n      });\r\n      \r\n      // Include simulated marks that have values\r\n      for (const assessmentId in this.simulatedMarks) {\r\n        const mark = this.simulatedMarks[assessmentId];\r\n        if (mark === undefined) continue;\r\n        \r\n        const assessment = this.courseAssessments.find(a => a.id === parseInt(assessmentId));\r\n        if (!assessment) continue;\r\n        \r\n        const percentage = this.calculatePercentage(mark, assessment.max_mark);\r\n        currentWeightedSum += percentage * assessment.weightage;\r\n        assessedWeight += assessment.weightage;\r\n      }\r\n      \r\n      // Calculate remaining unassessed weight\r\n      let unassessedWeight = 0;\r\n      this.courseAssessments.forEach(assessment => {\r\n        const assessmentId = assessment.id;\r\n        if (!this.hasMarkForAssessment(assessmentId) && \r\n            !(assessmentId in this.simulatedMarks && this.simulatedMarks[assessmentId] !== undefined)) {\r\n          unassessedWeight += assessment.weightage;\r\n        }\r\n      });\r\n      \r\n      // Calculate required marks for different grade thresholds\r\n      const totalWeight = 100; // Assuming total is 100%\r\n      \r\n      // For passing grade (50%)\r\n      const requiredForPass = (50 * totalWeight - currentWeightedSum) / unassessedWeight;\r\n      this.requiredMarks.pass = unassessedWeight > 0 ? Math.round(requiredForPass) : 0;\r\n      \r\n      // For distinction grade (70%)\r\n      const requiredForDistinction = (70 * totalWeight - currentWeightedSum) / unassessedWeight;\r\n      this.requiredMarks.distinction = unassessedWeight > 0 ? Math.round(requiredForDistinction) : 0;\r\n    },\r\n    formatRequiredMark(value) {\r\n      if (value <= 0) return 'Already achieved';\r\n      if (value > 100) return 'Not possible';\r\n      return `${value}% needed`;\r\n    },\r\n    applyPreset(preset) {\r\n      // Apply preset values to all simulated assessments\r\n      let presetValue = 0;\r\n      \r\n      switch(preset) {\r\n        case 'best':\r\n          presetValue = 90;\r\n          break;\r\n        case 'good':\r\n          presetValue = 75;\r\n          break;\r\n        case 'average':\r\n          presetValue = 65;\r\n          break;\r\n        case 'minimal':\r\n          presetValue = 50;\r\n          break;\r\n      }\r\n      \r\n      // Apply the preset percentage to all unassessed items\r\n      this.courseAssessments.forEach(assessment => {\r\n        if (!this.hasMarkForAssessment(assessment.id)) {\r\n          // Calculate the actual mark value based on the percentage and max mark\r\n          const markValue = Math.round((presetValue / 100) * assessment.max_mark);\r\n          this.simulatedMarks[assessment.id] = markValue;\r\n        }\r\n      });\r\n      \r\n      this.calculateRequiredMarks();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.mark-simulation h1 {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.progress {\r\n  border-radius: 0.25rem;\r\n  overflow: hidden;\r\n}\r\n\r\n.display-4 {\r\n  font-size: 3rem;\r\n}\r\n\r\n.position-indicator {\r\n  position: relative;\r\n  width: 0;\r\n  height: 0;\r\n  margin-top: -24px;\r\n  z-index: 2;\r\n  color: #343a40;\r\n  font-size: 1.5rem;\r\n  transform: translateX(-50%);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .display-4 {\r\n    font-size: 2.5rem;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}