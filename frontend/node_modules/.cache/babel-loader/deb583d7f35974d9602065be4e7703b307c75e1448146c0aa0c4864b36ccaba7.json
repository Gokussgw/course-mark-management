{"ast":null,"code":"import _regenerator from \"C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { mapState, mapGetters, mapActions } from 'vuex';\n// Uncomment in real implementation\n// import Chart from 'chart.js/auto'\n\nexport default {\n  name: 'CourseMarks',\n  data: function data() {\n    return {\n      courseId: null,\n      sortOrder: 'date',\n      performanceChart: null\n    };\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapState({\n    isLoading: function isLoading(state) {\n      return state.loading;\n    },\n    course: function course(state) {\n      return state.courses.course;\n    },\n    marks: function marks(state) {\n      return state.marks.marks;\n    },\n    userId: function userId(state) {\n      return state.auth.userId;\n    }\n  })), mapGetters({\n    getCourseAssessments: 'assessments/getCourseAssessments'\n  })), {}, {\n    courseAssessments: function courseAssessments() {\n      return this.getCourseAssessments(this.courseId) || [];\n    },\n    sortedAssessments: function sortedAssessments() {\n      var _this = this;\n      var assessments = _toConsumableArray(this.courseAssessments);\n      switch (this.sortOrder) {\n        case 'name':\n          return assessments.sort(function (a, b) {\n            return a.name.localeCompare(b.name);\n          });\n        case 'weight':\n          return assessments.sort(function (a, b) {\n            return b.weightage - a.weightage;\n          });\n        case 'mark':\n          return assessments.sort(function (a, b) {\n            var markA = _this.hasMarkForAssessment(a.id) ? _this.calculatePercentage(_this.getMarkForAssessment(a.id).mark, a.max_mark) : -1;\n            var markB = _this.hasMarkForAssessment(b.id) ? _this.calculatePercentage(_this.getMarkForAssessment(b.id).mark, b.max_mark) : -1;\n            return markB - markA;\n          });\n        case 'date':\n        default:\n          return assessments.sort(function (a, b) {\n            if (!a.due_date) return 1;\n            if (!b.due_date) return -1;\n            return new Date(a.due_date) - new Date(b.due_date);\n          });\n      }\n    },\n    studentMarks: function studentMarks() {\n      var _this2 = this;\n      return this.marks.filter(function (mark) {\n        return mark.student_id === _this2.userId && mark.course_id === parseInt(_this2.courseId);\n      });\n    },\n    totalAssessments: function totalAssessments() {\n      return this.courseAssessments.length;\n    },\n    completedAssessments: function completedAssessments() {\n      return this.studentMarks.length;\n    },\n    completionPercentage: function completionPercentage() {\n      if (this.totalAssessments === 0) return 0;\n      return Math.round(this.completedAssessments / this.totalAssessments * 100);\n    },\n    overallMark: function overallMark() {\n      var _this3 = this;\n      if (!this.studentMarks.length) return 0;\n      var weightedSum = 0;\n      var totalWeight = 0;\n      this.studentMarks.forEach(function (mark) {\n        var assessment = _this3.courseAssessments.find(function (a) {\n          return a.id === mark.assessment_id;\n        });\n        if (!assessment) return;\n        var percentage = _this3.calculatePercentage(mark.mark, assessment.max_mark);\n        weightedSum += percentage * assessment.weightage;\n        totalWeight += parseInt(assessment.weightage);\n      });\n      if (totalWeight === 0) return 0;\n      return Math.round(weightedSum / totalWeight);\n    },\n    overallGrade: function overallGrade() {\n      return this.calculateGrade(this.overallMark);\n    },\n    getOverallMarkClass: function getOverallMarkClass() {\n      if (this.overallMark >= 70) return 'text-success';\n      if (this.overallMark >= 50) return 'text-warning';\n      return 'text-danger';\n    },\n    getOverallGradeBadgeClass: function getOverallGradeBadgeClass() {\n      if (this.overallMark >= 70) return 'bg-success';\n      if (this.overallMark >= 50) return 'bg-warning';\n      return 'bg-danger';\n    }\n  }),\n  created: function created() {\n    var _this4 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n      var _t;\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            _this4.courseId = parseInt(_this4.$route.params.id);\n            _context.p = 1;\n            _context.n = 2;\n            return _this4.fetchCourse(_this4.courseId);\n          case 2:\n            _context.n = 3;\n            return _this4.fetchAssessments({\n              courseId: _this4.courseId\n            });\n          case 3:\n            _context.n = 4;\n            return _this4.fetchMarks({\n              studentId: _this4.userId,\n              courseId: _this4.courseId\n            });\n          case 4:\n            _context.n = 6;\n            break;\n          case 5:\n            _context.p = 5;\n            _t = _context.v;\n            console.error('Error loading course marks:', _t);\n          case 6:\n            return _context.a(2);\n        }\n      }, _callee, null, [[1, 5]]);\n    }))();\n  },\n  mounted: function mounted() {\n    var _this5 = this;\n    // Initialize performance chart once data is loaded\n    this.$nextTick(function () {\n      if (_this5.marks.length >= 2) {\n        _this5.initPerformanceChart();\n      }\n    });\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions({\n    fetchCourse: 'courses/fetchCourse',\n    fetchAssessments: 'assessments/fetchAssessments',\n    fetchMarks: 'marks/fetchMarks'\n  })), {}, {\n    formatDate: function formatDate(dateString) {\n      if (!dateString) return 'Not set';\n      return new Date(dateString).toLocaleDateString();\n    },\n    hasMarkForAssessment: function hasMarkForAssessment(assessmentId) {\n      return this.studentMarks.some(function (mark) {\n        return mark.assessment_id === assessmentId;\n      });\n    },\n    getMarkForAssessment: function getMarkForAssessment(assessmentId) {\n      return this.studentMarks.find(function (mark) {\n        return mark.assessment_id === assessmentId;\n      });\n    },\n    calculatePercentage: function calculatePercentage(mark, maxMark) {\n      if (!maxMark) return 0;\n      return Math.round(mark / maxMark * 100);\n    },\n    getAssessmentTypeClass: function getAssessmentTypeClass(type) {\n      var types = {\n        'exam': 'bg-danger',\n        'midterm': 'bg-warning',\n        'quiz': 'bg-info',\n        'assignment': 'bg-success',\n        'project': 'bg-primary',\n        'lab': 'bg-secondary'\n      };\n      return types[type.toLowerCase()] || 'bg-secondary';\n    },\n    getAssessmentTypeBadgeClass: function getAssessmentTypeBadgeClass(type) {\n      var types = {\n        'exam': 'bg-danger',\n        'midterm': 'bg-warning',\n        'quiz': 'bg-info',\n        'assignment': 'bg-success',\n        'project': 'bg-primary',\n        'lab': 'bg-secondary'\n      };\n      return types[type.toLowerCase()] || 'bg-secondary';\n    },\n    calculateGrade: function calculateGrade(percentage) {\n      if (percentage >= 90) return 'A+';\n      if (percentage >= 80) return 'A';\n      if (percentage >= 75) return 'B+';\n      if (percentage >= 70) return 'B';\n      if (percentage >= 65) return 'C+';\n      if (percentage >= 60) return 'C';\n      if (percentage >= 55) return 'D+';\n      if (percentage >= 50) return 'D';\n      return 'F';\n    },\n    getGradeClass: function getGradeClass(percentage) {\n      if (percentage >= 70) return 'text-success fw-bold';\n      if (percentage >= 50) return 'text-warning';\n      return 'text-danger';\n    },\n    sortMarks: function sortMarks(order) {\n      this.sortOrder = order;\n    },\n    downloadMarks: function downloadMarks() {\n      // This would initiate a download of marks in CSV format\n      // Implementation would need to call an API endpoint\n      this.$store.dispatch('showToast', {\n        message: 'Downloading marks...',\n        type: 'info'\n      });\n    },\n    initPerformanceChart: function initPerformanceChart() {\n      // This would be implemented with Chart.js in a real application\n      /* Uncomment in real implementation\r\n      const ctx = document.getElementById('performanceChart');\r\n      \r\n      // Sort marks by date\r\n      const sortedMarks = [...this.studentMarks].sort((a, b) => {\r\n        const assessmentA = this.courseAssessments.find(assessment => assessment.id === a.assessment_id);\r\n        const assessmentB = this.courseAssessments.find(assessment => assessment.id === b.assessment_id);\r\n        if (!assessmentA || !assessmentA.due_date) return -1;\r\n        if (!assessmentB || !assessmentB.due_date) return 1;\r\n        return new Date(assessmentA.due_date) - new Date(assessmentB.due_date);\r\n      });\r\n      \r\n      const labels = sortedMarks.map(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        return assessment ? assessment.name : 'Unknown';\r\n      });\r\n      \r\n      const data = sortedMarks.map(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return 0;\r\n        return this.calculatePercentage(mark.mark, assessment.max_mark);\r\n      });\r\n      \r\n      // Sample class averages (would come from API in real implementation)\r\n      const classAverages = sortedMarks.map(() => Math.floor(Math.random() * 30) + 50);\r\n      \r\n      this.performanceChart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Your Marks',\r\n              data: data,\r\n              borderColor: '#0d6efd',\r\n              backgroundColor: 'rgba(13, 110, 253, 0.1)',\r\n              borderWidth: 2,\r\n              tension: 0.1,\r\n              fill: true\r\n            },\r\n            {\r\n              label: 'Class Average',\r\n              data: classAverages,\r\n              borderColor: '#6c757d',\r\n              borderWidth: 2,\r\n              borderDash: [5, 5],\r\n              tension: 0.1,\r\n              fill: false\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              title: {\r\n                display: true,\r\n                text: 'Mark (%)'\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'top',\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  return `${context.dataset.label}: ${context.raw}%`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n      */\n    }\n  })\n};","map":{"version":3,"names":["mapState","mapGetters","mapActions","name","data","courseId","sortOrder","performanceChart","computed","_objectSpread","isLoading","state","loading","course","courses","marks","userId","auth","getCourseAssessments","courseAssessments","sortedAssessments","_this","assessments","_toConsumableArray","sort","a","b","localeCompare","weightage","markA","hasMarkForAssessment","id","calculatePercentage","getMarkForAssessment","mark","max_mark","markB","due_date","Date","studentMarks","_this2","filter","student_id","course_id","parseInt","totalAssessments","length","completedAssessments","completionPercentage","Math","round","overallMark","_this3","weightedSum","totalWeight","forEach","assessment","find","assessment_id","percentage","overallGrade","calculateGrade","getOverallMarkClass","getOverallGradeBadgeClass","created","_this4","_asyncToGenerator","_regenerator","m","_callee","_t","w","_context","n","$route","params","p","fetchCourse","fetchAssessments","fetchMarks","studentId","v","console","error","mounted","_this5","$nextTick","initPerformanceChart","methods","formatDate","dateString","toLocaleDateString","assessmentId","some","maxMark","getAssessmentTypeClass","type","types","toLowerCase","getAssessmentTypeBadgeClass","getGradeClass","sortMarks","order","downloadMarks","$store","dispatch","message"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\student\\CourseMarks.vue"],"sourcesContent":["<template>\r\n  <div class=\"course-marks\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/student/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              {{ course?.code }} - {{ course?.name }}\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">{{ course?.name }}</h1>\r\n        <p class=\"text-muted\">\r\n          {{ course?.code }} | {{ course?.semester || 'No semester specified' }}\r\n        </p>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-outline-primary\" @click=\"downloadMarks\">\r\n          <i class=\"fas fa-download me-2\"></i> Download\r\n        </button>\r\n        <router-link :to=\"`/student/simulation/${courseId}`\" class=\"btn btn-outline-primary\">\r\n          <i class=\"fas fa-calculator me-2\"></i> Grade Simulator\r\n        </router-link>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"!course\" class=\"alert alert-danger\">\r\n      Course not found or you don't have access to this course.\r\n    </div>\r\n\r\n    <div v-else class=\"row\">\r\n      <div class=\"col-md-4 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Course Summary</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"mb-4 text-center\">\r\n              <div class=\"display-4 fw-bold\" :class=\"getOverallMarkClass\">\r\n                {{ overallMark }}%\r\n              </div>\r\n              <p class=\"text-muted\">Overall Mark</p>\r\n              <div class=\"badge\" :class=\"getOverallGradeBadgeClass\">\r\n                {{ overallGrade }}\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"progress-info mb-3\">\r\n              <div class=\"d-flex justify-content-between align-items-center\">\r\n                <span>Course Completion</span>\r\n                <span class=\"text-muted\">{{ completionPercentage }}%</span>\r\n              </div>\r\n              <div class=\"progress\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-info\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${completionPercentage}%`\"\r\n                  :aria-valuenow=\"completionPercentage\" \r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n              <small class=\"text-muted\">\r\n                {{ completedAssessments }} of {{ totalAssessments }} assessments completed\r\n              </small>\r\n            </div>\r\n\r\n            <table class=\"table table-sm\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>Course:</th>\r\n                  <td>{{ course?.name }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Code:</th>\r\n                  <td>{{ course?.code }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Semester:</th>\r\n                  <td>{{ course?.semester || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Credits:</th>\r\n                  <td>{{ course?.credits || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Lecturer:</th>\r\n                  <td>{{ course?.lecturer_name || 'Not specified' }}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-8 mb-4\">\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n            <h5 class=\"mb-0\">Mark Breakdown</h5>\r\n            <div class=\"dropdown\">\r\n              <button \r\n                class=\"btn btn-sm btn-outline-secondary dropdown-toggle\" \r\n                type=\"button\" \r\n                id=\"sortDropdown\" \r\n                data-bs-toggle=\"dropdown\" \r\n                aria-expanded=\"false\"\r\n              >\r\n                Sort by\r\n              </button>\r\n              <ul class=\"dropdown-menu\" aria-labelledby=\"sortDropdown\">\r\n                <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"sortMarks('date')\">Date</a></li>\r\n                <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"sortMarks('name')\">Name</a></li>\r\n                <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"sortMarks('weight')\">Weightage</a></li>\r\n                <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"sortMarks('mark')\">Mark</a></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"marks.length === 0\" class=\"text-center py-4\">\r\n              <p>No marks have been recorded for this course yet.</p>\r\n              <div class=\"alert alert-info\">\r\n                <i class=\"fas fa-info-circle me-2\"></i>\r\n                Marks will appear here once your assessments have been graded.\r\n              </div>\r\n            </div>\r\n            <div v-else>\r\n              <div class=\"mb-4\">\r\n                <h6>Assessment Distribution</h6>\r\n                <div class=\"progress\" style=\"height: 30px;\">\r\n                  <div v-for=\"(assessment, index) in sortedAssessments\" \r\n                       :key=\"assessment.id\"\r\n                       class=\"progress-bar\" \r\n                       :class=\"getAssessmentTypeClass(assessment.type)\"\r\n                       :style=\"`width: ${assessment.weightage}%`\"\r\n                       :title=\"`${assessment.name} (${assessment.weightage}%)`\">\r\n                    {{ assessment.weightage }}%\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"table-responsive\">\r\n                <table class=\"table table-hover\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Assessment</th>\r\n                      <th>Type</th>\r\n                      <th>Weight</th>\r\n                      <th>Due Date</th>\r\n                      <th>Mark</th>\r\n                      <th>Grade</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <template v-for=\"assessment in sortedAssessments\" :key=\"assessment.id\">\r\n                      <tr>\r\n                        <td>\r\n                          <strong>{{ assessment.name }}</strong>\r\n                          <div v-if=\"assessment.description\" class=\"small text-muted\">\r\n                            {{ assessment.description }}\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <span class=\"badge\" :class=\"getAssessmentTypeBadgeClass(assessment.type)\">\r\n                            {{ assessment.type }}\r\n                          </span>\r\n                        </td>\r\n                        <td>{{ assessment.weightage }}%</td>\r\n                        <td>{{ formatDate(assessment.due_date) }}</td>\r\n                        <td>\r\n                          <template v-if=\"hasMarkForAssessment(assessment.id)\">\r\n                            <strong>{{ getMarkForAssessment(assessment.id).mark }}</strong> / {{ assessment.max_mark }}\r\n                            <div class=\"small text-muted\">\r\n                              ({{ calculatePercentage(getMarkForAssessment(assessment.id).mark, assessment.max_mark) }}%)\r\n                            </div>\r\n                          </template>\r\n                          <template v-else>\r\n                            <span class=\"text-muted\">Pending</span>\r\n                          </template>\r\n                        </td>\r\n                        <td>\r\n                          <template v-if=\"hasMarkForAssessment(assessment.id)\">\r\n                            <span :class=\"getGradeClass(calculatePercentage(getMarkForAssessment(assessment.id).mark, assessment.max_mark))\">\r\n                              {{ calculateGrade(calculatePercentage(getMarkForAssessment(assessment.id).mark, assessment.max_mark)) }}\r\n                            </span>\r\n                          </template>\r\n                          <template v-else>\r\n                            <span class=\"text-muted\">-</span>\r\n                          </template>\r\n                        </td>\r\n                      </tr>\r\n                      <tr v-if=\"hasMarkForAssessment(assessment.id) && getMarkForAssessment(assessment.id).remarks\" class=\"remarks-row\">\r\n                        <td colspan=\"6\" class=\"table-light\">\r\n                          <i class=\"fas fa-comment-alt me-2 text-muted\"></i>\r\n                          <span class=\"text-muted\">Feedback: </span>\r\n                          {{ getMarkForAssessment(assessment.id).remarks }}\r\n                        </td>\r\n                      </tr>\r\n                    </template>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Performance Analysis</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"marks.length < 2\" class=\"text-center py-4\">\r\n              <p>Not enough data to show performance analysis.</p>\r\n              <div class=\"alert alert-info\">\r\n                <i class=\"fas fa-info-circle me-2\"></i>\r\n                Performance trends will be displayed after more assessments are completed.\r\n              </div>\r\n            </div>\r\n            <div v-else>\r\n              <!-- This is where we would integrate a chart.js component -->\r\n              <div class=\"chart-container\" style=\"height: 250px;\">\r\n                <canvas id=\"performanceChart\"></canvas>\r\n              </div>\r\n              <div class=\"mt-3 text-center text-muted small\">\r\n                <i class=\"fas fa-info-circle me-1\"></i>\r\n                Chart shows your performance relative to class average (when available).\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n// Uncomment in real implementation\r\n// import Chart from 'chart.js/auto'\r\n\r\nexport default {\r\n  name: 'CourseMarks',\r\n  data() {\r\n    return {\r\n      courseId: null,\r\n      sortOrder: 'date',\r\n      performanceChart: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      isLoading: state => state.loading,\r\n      course: state => state.courses.course,\r\n      marks: state => state.marks.marks,\r\n      userId: state => state.auth.userId\r\n    }),\r\n    ...mapGetters({\r\n      getCourseAssessments: 'assessments/getCourseAssessments'\r\n    }),\r\n    courseAssessments() {\r\n      return this.getCourseAssessments(this.courseId) || [];\r\n    },\r\n    sortedAssessments() {\r\n      const assessments = [...this.courseAssessments];\r\n      \r\n      switch(this.sortOrder) {\r\n        case 'name':\r\n          return assessments.sort((a, b) => a.name.localeCompare(b.name));\r\n        case 'weight':\r\n          return assessments.sort((a, b) => b.weightage - a.weightage);\r\n        case 'mark':\r\n          return assessments.sort((a, b) => {\r\n            const markA = this.hasMarkForAssessment(a.id) ? \r\n              this.calculatePercentage(this.getMarkForAssessment(a.id).mark, a.max_mark) : -1;\r\n            const markB = this.hasMarkForAssessment(b.id) ? \r\n              this.calculatePercentage(this.getMarkForAssessment(b.id).mark, b.max_mark) : -1;\r\n            return markB - markA;\r\n          });\r\n        case 'date':\r\n        default:\r\n          return assessments.sort((a, b) => {\r\n            if (!a.due_date) return 1;\r\n            if (!b.due_date) return -1;\r\n            return new Date(a.due_date) - new Date(b.due_date);\r\n          });\r\n      }\r\n    },\r\n    studentMarks() {\r\n      return this.marks.filter(mark => \r\n        mark.student_id === this.userId && \r\n        mark.course_id === parseInt(this.courseId)\r\n      );\r\n    },\r\n    totalAssessments() {\r\n      return this.courseAssessments.length;\r\n    },\r\n    completedAssessments() {\r\n      return this.studentMarks.length;\r\n    },\r\n    completionPercentage() {\r\n      if (this.totalAssessments === 0) return 0;\r\n      return Math.round((this.completedAssessments / this.totalAssessments) * 100);\r\n    },\r\n    overallMark() {\r\n      if (!this.studentMarks.length) return 0;\r\n      \r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      this.studentMarks.forEach(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        weightedSum += percentage * assessment.weightage;\r\n        totalWeight += parseInt(assessment.weightage);\r\n      });\r\n      \r\n      if (totalWeight === 0) return 0;\r\n      return Math.round(weightedSum / totalWeight);\r\n    },\r\n    overallGrade() {\r\n      return this.calculateGrade(this.overallMark);\r\n    },\r\n    getOverallMarkClass() {\r\n      if (this.overallMark >= 70) return 'text-success';\r\n      if (this.overallMark >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getOverallGradeBadgeClass() {\r\n      if (this.overallMark >= 70) return 'bg-success';\r\n      if (this.overallMark >= 50) return 'bg-warning';\r\n      return 'bg-danger';\r\n    }\r\n  },\r\n  async created() {\r\n    this.courseId = parseInt(this.$route.params.id);\r\n    \r\n    try {\r\n      // Fetch course details\r\n      await this.fetchCourse(this.courseId);\r\n      \r\n      // Fetch assessments for this course\r\n      await this.fetchAssessments({ courseId: this.courseId });\r\n      \r\n      // Fetch marks for this student in this course\r\n      await this.fetchMarks({ \r\n        studentId: this.userId,\r\n        courseId: this.courseId\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading course marks:', error);\r\n    }\r\n  },\r\n  mounted() {\r\n    // Initialize performance chart once data is loaded\r\n    this.$nextTick(() => {\r\n      if (this.marks.length >= 2) {\r\n        this.initPerformanceChart();\r\n      }\r\n    });\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchCourse: 'courses/fetchCourse',\r\n      fetchAssessments: 'assessments/fetchAssessments',\r\n      fetchMarks: 'marks/fetchMarks'\r\n    }),\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not set';\r\n      return new Date(dateString).toLocaleDateString();\r\n    },\r\n    hasMarkForAssessment(assessmentId) {\r\n      return this.studentMarks.some(mark => mark.assessment_id === assessmentId);\r\n    },\r\n    getMarkForAssessment(assessmentId) {\r\n      return this.studentMarks.find(mark => mark.assessment_id === assessmentId);\r\n    },\r\n    calculatePercentage(mark, maxMark) {\r\n      if (!maxMark) return 0;\r\n      return Math.round((mark / maxMark) * 100);\r\n    },\r\n    getAssessmentTypeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    getAssessmentTypeBadgeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    calculateGrade(percentage) {\r\n      if (percentage >= 90) return 'A+';\r\n      if (percentage >= 80) return 'A';\r\n      if (percentage >= 75) return 'B+';\r\n      if (percentage >= 70) return 'B';\r\n      if (percentage >= 65) return 'C+';\r\n      if (percentage >= 60) return 'C';\r\n      if (percentage >= 55) return 'D+';\r\n      if (percentage >= 50) return 'D';\r\n      return 'F';\r\n    },\r\n    getGradeClass(percentage) {\r\n      if (percentage >= 70) return 'text-success fw-bold';\r\n      if (percentage >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    sortMarks(order) {\r\n      this.sortOrder = order;\r\n    },\r\n    downloadMarks() {\r\n      // This would initiate a download of marks in CSV format\r\n      // Implementation would need to call an API endpoint\r\n      this.$store.dispatch('showToast', {\r\n        message: 'Downloading marks...',\r\n        type: 'info'\r\n      });\r\n    },\r\n    initPerformanceChart() {\r\n      // This would be implemented with Chart.js in a real application\r\n      /* Uncomment in real implementation\r\n      const ctx = document.getElementById('performanceChart');\r\n      \r\n      // Sort marks by date\r\n      const sortedMarks = [...this.studentMarks].sort((a, b) => {\r\n        const assessmentA = this.courseAssessments.find(assessment => assessment.id === a.assessment_id);\r\n        const assessmentB = this.courseAssessments.find(assessment => assessment.id === b.assessment_id);\r\n        if (!assessmentA || !assessmentA.due_date) return -1;\r\n        if (!assessmentB || !assessmentB.due_date) return 1;\r\n        return new Date(assessmentA.due_date) - new Date(assessmentB.due_date);\r\n      });\r\n      \r\n      const labels = sortedMarks.map(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        return assessment ? assessment.name : 'Unknown';\r\n      });\r\n      \r\n      const data = sortedMarks.map(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return 0;\r\n        return this.calculatePercentage(mark.mark, assessment.max_mark);\r\n      });\r\n      \r\n      // Sample class averages (would come from API in real implementation)\r\n      const classAverages = sortedMarks.map(() => Math.floor(Math.random() * 30) + 50);\r\n      \r\n      this.performanceChart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Your Marks',\r\n              data: data,\r\n              borderColor: '#0d6efd',\r\n              backgroundColor: 'rgba(13, 110, 253, 0.1)',\r\n              borderWidth: 2,\r\n              tension: 0.1,\r\n              fill: true\r\n            },\r\n            {\r\n              label: 'Class Average',\r\n              data: classAverages,\r\n              borderColor: '#6c757d',\r\n              borderWidth: 2,\r\n              borderDash: [5, 5],\r\n              tension: 0.1,\r\n              fill: false\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              title: {\r\n                display: true,\r\n                text: 'Mark (%)'\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'top',\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  return `${context.dataset.label}: ${context.raw}%`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n      */\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.course-marks h1 {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.progress {\r\n  border-radius: 0.25rem;\r\n  overflow: hidden;\r\n}\r\n\r\n.display-4 {\r\n  font-size: 3rem;\r\n}\r\n\r\n.remarks-row {\r\n  font-style: italic;\r\n  font-size: 0.9em;\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .display-4 {\r\n    font-size: 2.5rem;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}