{"ast":null,"code":"import _slicedToArray from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regenerator from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nimport NotificationService from '@/services/NotificationService.js';\nexport default {\n  name: 'NotificationPanel',\n  props: {\n    userId: {\n      type: [Number, String],\n      required: true\n    },\n    autoRefresh: {\n      type: Boolean,\n      \"default\": true\n    },\n    refreshInterval: {\n      type: Number,\n      \"default\": 30000 // 30 seconds\n    }\n  },\n  data: function data() {\n    return {\n      notifications: [],\n      unreadCount: 0,\n      loading: false,\n      refreshTimer: null\n    };\n  },\n  created: function created() {\n    var _this = this;\n    return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            _context.n = 1;\n            return _this.loadNotifications();\n          case 1:\n            if (_this.autoRefresh) {\n              _this.startAutoRefresh();\n            }\n          case 2:\n            return _context.a(2);\n        }\n      }, _callee);\n    }))();\n  },\n  beforeUnmount: function beforeUnmount() {\n    if (this.refreshTimer) {\n      clearInterval(this.refreshTimer);\n    }\n  },\n  methods: {\n    loadNotifications: function loadNotifications() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var _yield$Promise$all, _yield$Promise$all2, notifications, unreadCount, _t;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              _this2.loading = true;\n              _context2.p = 1;\n              _context2.n = 2;\n              return Promise.all([NotificationService.getRecentNotifications(_this2.userId), NotificationService.getUnreadCount(_this2.userId)]);\n            case 2:\n              _yield$Promise$all = _context2.v;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              notifications = _yield$Promise$all2[0];\n              unreadCount = _yield$Promise$all2[1];\n              _this2.notifications = notifications;\n              _this2.unreadCount = unreadCount;\n              _context2.n = 4;\n              break;\n            case 3:\n              _context2.p = 3;\n              _t = _context2.v;\n              console.error('Error loading notifications:', _t);\n            case 4:\n              _context2.p = 4;\n              _this2.loading = false;\n              return _context2.f(4);\n            case 5:\n              return _context2.a(2);\n          }\n        }, _callee2, null, [[1, 3, 4, 5]]);\n      }))();\n    },\n    refreshNotifications: function refreshNotifications() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.n) {\n            case 0:\n              _context3.n = 1;\n              return _this3.loadNotifications();\n            case 1:\n              return _context3.a(2);\n          }\n        }, _callee3);\n      }))();\n    },\n    markAsRead: function markAsRead(notificationId) {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {\n        var success, notification, _t2;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.n) {\n            case 0:\n              _context4.p = 0;\n              _context4.n = 1;\n              return NotificationService.markAsRead(notificationId);\n            case 1:\n              success = _context4.v;\n              if (success) {\n                // Update local state\n                notification = _this4.notifications.find(function (n) {\n                  return n.id === notificationId;\n                });\n                if (notification) {\n                  notification.is_read = true;\n                  _this4.unreadCount = Math.max(0, _this4.unreadCount - 1);\n                }\n              }\n              _context4.n = 3;\n              break;\n            case 2:\n              _context4.p = 2;\n              _t2 = _context4.v;\n              console.error('Error marking notification as read:', _t2);\n            case 3:\n              return _context4.a(2);\n          }\n        }, _callee4, null, [[0, 2]]);\n      }))();\n    },\n    handleNotificationClick: function handleNotificationClick(notification) {\n      if (!notification.is_read) {\n        this.markAsRead(notification.id);\n      }\n\n      // Emit event for parent component to handle navigation\n      this.$emit('notification-clicked', notification);\n    },\n    startAutoRefresh: function startAutoRefresh() {\n      var _this5 = this;\n      this.refreshTimer = setInterval(function () {\n        _this5.loadNotifications();\n      }, this.refreshInterval);\n    },\n    loadMore: function loadMore() {\n      // Implement pagination if needed\n      this.$emit('load-more');\n    },\n    formatNotificationContent: function formatNotificationContent(content) {\n      // Convert line breaks to HTML breaks and make it safe\n      return content.replace(/\\n/g, '<br>');\n    },\n    formatTime: function formatTime(timestamp) {\n      return NotificationService.formatNotificationTime(timestamp);\n    },\n    getNotificationIcon: function getNotificationIcon(type) {\n      return NotificationService.getNotificationIcon(type);\n    },\n    getNotificationStyle: function getNotificationStyle(type) {\n      return NotificationService.getNotificationStyle(type);\n    }\n  }\n};","map":{"version":3,"names":["NotificationService","name","props","userId","type","Number","String","required","autoRefresh","Boolean","refreshInterval","data","notifications","unreadCount","loading","refreshTimer","created","_this","_asyncToGenerator","_regenerator","m","_callee","w","_context","n","loadNotifications","startAutoRefresh","a","beforeUnmount","clearInterval","methods","_this2","_callee2","_yield$Promise$all","_yield$Promise$all2","_t","_context2","p","Promise","all","getRecentNotifications","getUnreadCount","v","_slicedToArray","console","error","f","refreshNotifications","_this3","_callee3","_context3","markAsRead","notificationId","_this4","_callee4","success","notification","_t2","_context4","find","id","is_read","Math","max","handleNotificationClick","$emit","_this5","setInterval","loadMore","formatNotificationContent","content","replace","formatTime","timestamp","formatNotificationTime","getNotificationIcon","getNotificationStyle"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\NEW\\course-mark-management\\frontend\\src\\components\\notifications\\NotificationPanel.vue"],"sourcesContent":["<template>\r\n  <div class=\"notification-panel\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n      <h5 class=\"mb-0\">\r\n        <i class=\"fas fa-bell me-2\"></i>Notifications\r\n        <span v-if=\"unreadCount > 0\" class=\"badge bg-danger ms-2\">{{ unreadCount }}</span>\r\n      </h5>\r\n      <button \r\n        class=\"btn btn-sm btn-outline-primary\"\r\n        @click=\"refreshNotifications\"\r\n        :disabled=\"loading\"\r\n      >\r\n        <i class=\"fas fa-sync-alt\" :class=\"{ 'fa-spin': loading }\"></i>\r\n      </button>\r\n    </div>\r\n    \r\n    <div v-if=\"loading && notifications.length === 0\" class=\"text-center py-3\">\r\n      <div class=\"spinner-border spinner-border-sm text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n    \r\n    <div v-else-if=\"notifications.length === 0\" class=\"text-center py-4 text-muted\">\r\n      <i class=\"fas fa-bell-slash mb-2\" style=\"font-size: 2rem;\"></i>\r\n      <p class=\"mb-0\">No notifications yet</p>\r\n    </div>\r\n    \r\n    <div v-else class=\"notification-list\">\r\n      <div \r\n        v-for=\"notification in notifications\" \r\n        :key=\"notification.id\"\r\n        class=\"notification-item mb-3 p-3 rounded\"\r\n        :class=\"{ 'unread': !notification.is_read }\"\r\n        :style=\"getNotificationStyle(notification.type)\"\r\n        @click=\"handleNotificationClick(notification)\"\r\n      >\r\n        <div class=\"d-flex align-items-start\">\r\n          <div class=\"notification-icon me-3\">\r\n            <i :class=\"getNotificationIcon(notification.type)\"></i>\r\n          </div>\r\n          <div class=\"notification-content flex-grow-1\">\r\n            <div class=\"notification-text\" v-html=\"formatNotificationContent(notification.content)\"></div>\r\n            <div class=\"notification-meta mt-2\">\r\n              <small class=\"text-muted\">\r\n                <i class=\"fas fa-clock me-1\"></i>\r\n                {{ formatTime(notification.created_at) }}\r\n              </small>\r\n              <span v-if=\"notification.sender_name\" class=\"text-muted ms-3\">\r\n                <i class=\"fas fa-user me-1\"></i>\r\n                {{ notification.sender_name }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div class=\"notification-actions\">\r\n            <button \r\n              v-if=\"!notification.is_read\"\r\n              class=\"btn btn-sm btn-outline-primary\"\r\n              @click.stop=\"markAsRead(notification.id)\"\r\n              title=\"Mark as read\"\r\n            >\r\n              <i class=\"fas fa-check\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div v-if=\"notifications.length >= 10\" class=\"text-center pt-2\">\r\n      <button class=\"btn btn-sm btn-link text-muted\" @click=\"loadMore\">\r\n        View older notifications\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport NotificationService from '@/services/NotificationService.js';\r\n\r\nexport default {\r\n  name: 'NotificationPanel',\r\n  props: {\r\n    userId: {\r\n      type: [Number, String],\r\n      required: true\r\n    },\r\n    autoRefresh: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    refreshInterval: {\r\n      type: Number,\r\n      default: 30000 // 30 seconds\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      notifications: [],\r\n      unreadCount: 0,\r\n      loading: false,\r\n      refreshTimer: null\r\n    };\r\n  },\r\n  async created() {\r\n    await this.loadNotifications();\r\n    \r\n    if (this.autoRefresh) {\r\n      this.startAutoRefresh();\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    if (this.refreshTimer) {\r\n      clearInterval(this.refreshTimer);\r\n    }\r\n  },\r\n  methods: {\r\n    async loadNotifications() {\r\n      this.loading = true;\r\n      try {\r\n        const [notifications, unreadCount] = await Promise.all([\r\n          NotificationService.getRecentNotifications(this.userId),\r\n          NotificationService.getUnreadCount(this.userId)\r\n        ]);\r\n        \r\n        this.notifications = notifications;\r\n        this.unreadCount = unreadCount;\r\n      } catch (error) {\r\n        console.error('Error loading notifications:', error);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    \r\n    async refreshNotifications() {\r\n      await this.loadNotifications();\r\n    },\r\n    \r\n    async markAsRead(notificationId) {\r\n      try {\r\n        const success = await NotificationService.markAsRead(notificationId);\r\n        if (success) {\r\n          // Update local state\r\n          const notification = this.notifications.find(n => n.id === notificationId);\r\n          if (notification) {\r\n            notification.is_read = true;\r\n            this.unreadCount = Math.max(0, this.unreadCount - 1);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error marking notification as read:', error);\r\n      }\r\n    },\r\n    \r\n    handleNotificationClick(notification) {\r\n      if (!notification.is_read) {\r\n        this.markAsRead(notification.id);\r\n      }\r\n      \r\n      // Emit event for parent component to handle navigation\r\n      this.$emit('notification-clicked', notification);\r\n    },\r\n    \r\n    startAutoRefresh() {\r\n      this.refreshTimer = setInterval(() => {\r\n        this.loadNotifications();\r\n      }, this.refreshInterval);\r\n    },\r\n    \r\n    loadMore() {\r\n      // Implement pagination if needed\r\n      this.$emit('load-more');\r\n    },\r\n    \r\n    formatNotificationContent(content) {\r\n      // Convert line breaks to HTML breaks and make it safe\r\n      return content.replace(/\\n/g, '<br>');\r\n    },\r\n    \r\n    formatTime(timestamp) {\r\n      return NotificationService.formatNotificationTime(timestamp);\r\n    },\r\n    \r\n    getNotificationIcon(type) {\r\n      return NotificationService.getNotificationIcon(type);\r\n    },\r\n    \r\n    getNotificationStyle(type) {\r\n      return NotificationService.getNotificationStyle(type);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.notification-panel {\r\n  max-height: 500px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.notification-list {\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.notification-item {\r\n  background-color: #f8f9fa;\r\n  border: 1px solid #e9ecef;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.notification-item:hover {\r\n  background-color: #e9ecef;\r\n  transform: translateX(2px);\r\n}\r\n\r\n.notification-item.unread {\r\n  background-color: #fff3cd;\r\n  border-color: #ffeaa7;\r\n}\r\n\r\n.notification-icon {\r\n  width: 30px;\r\n  text-align: center;\r\n}\r\n\r\n.notification-content {\r\n  line-height: 1.4;\r\n}\r\n\r\n.notification-text {\r\n  font-size: 0.9rem;\r\n  color: #333;\r\n}\r\n\r\n.notification-meta {\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.notification-actions {\r\n  opacity: 0;\r\n  transition: opacity 0.2s ease;\r\n}\r\n\r\n.notification-item:hover .notification-actions {\r\n  opacity: 1;\r\n}\r\n\r\n/* Custom scrollbar for notification list */\r\n.notification-list::-webkit-scrollbar {\r\n  width: 6px;\r\n}\r\n\r\n.notification-list::-webkit-scrollbar-track {\r\n  background: #f1f1f1;\r\n  border-radius: 3px;\r\n}\r\n\r\n.notification-list::-webkit-scrollbar-thumb {\r\n  background: #888;\r\n  border-radius: 3px;\r\n}\r\n\r\n.notification-list::-webkit-scrollbar-thumb:hover {\r\n  background: #555;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}