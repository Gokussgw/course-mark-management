{"ast":null,"code":"import _regenerator from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { mapState, mapGetters, mapActions } from 'vuex';\nexport default {\n  name: 'AssessmentForm',\n  data: function data() {\n    return {\n      formData: {\n        course_id: '',\n        name: '',\n        type: '',\n        description: '',\n        due_date: '',\n        weightage: 10,\n        max_mark: 100,\n        is_final_exam: false,\n        is_published: true\n      },\n      errors: {},\n      isSaving: false,\n      assessmentId: null,\n      courseIdFromQuery: null\n    };\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapState({\n    isLoading: function isLoading(state) {\n      return state.loading;\n    },\n    courses: function courses(state) {\n      return state.courses.courses;\n    },\n    assessment: function assessment(state) {\n      return state.assessments.assessment;\n    }\n  })), mapGetters({\n    getCourseAssessments: 'assessments/getCourseAssessments'\n  })), {}, {\n    isEditing: function isEditing() {\n      return !!this.assessmentId;\n    },\n    lecturerCourses: function lecturerCourses() {\n      return this.courses || [];\n    },\n    selectedCourse: function selectedCourse() {\n      var _this = this;\n      if (!this.formData.course_id) return null;\n      return this.courses.find(function (course) {\n        return course.id === parseInt(_this.formData.course_id);\n      });\n    },\n    courseAssessments: function courseAssessments() {\n      if (!this.formData.course_id) return [];\n      return this.getCourseAssessments(this.formData.course_id) || [];\n    },\n    currentTotalWeightage: function currentTotalWeightage() {\n      var _this2 = this;\n      if (!this.formData.course_id) return this.formData.weightage || 0;\n\n      // Calculate total weightage of all assessments in this course, including the current one if editing\n      var totalWeight = 0;\n      this.courseAssessments.forEach(function (assessment) {\n        // Skip the current assessment when editing\n        if (_this2.isEditing && assessment.id === parseInt(_this2.assessmentId)) return;\n        totalWeight += assessment.weightage;\n      });\n\n      // Add the current assessment weightage\n      totalWeight += this.formData.weightage || 0;\n      return totalWeight;\n    },\n    isFormValid: function isFormValid() {\n      return this.formData.course_id && this.formData.name && this.formData.type && this.formData.weightage > 0 && this.formData.max_mark > 0;\n    }\n  }),\n  created: function created() {\n    var _this3 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n      var _t;\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            // Check if we're editing an existing assessment\n            _this3.assessmentId = _this3.$route.params.id;\n            _this3.courseIdFromQuery = _this3.$route.query.courseId;\n            _context.p = 1;\n            _context.n = 2;\n            return _this3.fetchCourses({\n              lecturerId: _this3.$store.getters['auth/userId']\n            });\n          case 2:\n            if (!_this3.assessmentId) {\n              _context.n = 4;\n              break;\n            }\n            _context.n = 3;\n            return _this3.fetchAssessment(_this3.assessmentId);\n          case 3:\n            _this3.populateFormFromAssessment();\n            _context.n = 5;\n            break;\n          case 4:\n            if (!_this3.courseIdFromQuery) {\n              _context.n = 5;\n              break;\n            }\n            // Coming from a course page with pre-selected course\n            _this3.formData.course_id = parseInt(_this3.courseIdFromQuery);\n            // Fetch existing assessments for this course to calculate total weightage\n            _context.n = 5;\n            return _this3.fetchAssessments({\n              courseId: _this3.formData.course_id\n            });\n          case 5:\n            _context.n = 7;\n            break;\n          case 6:\n            _context.p = 6;\n            _t = _context.v;\n            console.error('Error loading form data:', _t);\n            _this3.$store.dispatch('setError', 'Failed to load assessment data');\n          case 7:\n            return _context.a(2);\n        }\n      }, _callee, null, [[1, 6]]);\n    }))();\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions({\n    fetchCourses: 'courses/fetchCourses',\n    fetchAssessment: 'assessments/fetchAssessment',\n    fetchAssessments: 'assessments/fetchAssessments',\n    createAssessment: 'assessments/createAssessment',\n    updateAssessment: 'assessments/updateAssessment'\n  })), {}, {\n    populateFormFromAssessment: function populateFormFromAssessment() {\n      if (!this.assessment) return;\n      this.formData = {\n        course_id: this.assessment.course_id,\n        name: this.assessment.name || '',\n        type: this.assessment.type || '',\n        description: this.assessment.description || '',\n        due_date: this.assessment.due_date ? this.formatDateForInput(this.assessment.due_date) : '',\n        weightage: this.assessment.weightage || 0,\n        max_mark: this.assessment.max_mark || 0,\n        is_final_exam: this.assessment.is_final_exam || false,\n        is_published: this.assessment.is_published || true\n      };\n\n      // Fetch existing assessments for this course to calculate total weightage\n      this.fetchAssessments({\n        courseId: this.formData.course_id\n      });\n    },\n    formatDateForInput: function formatDateForInput(dateString) {\n      if (!dateString) return '';\n      var date = new Date(dateString);\n      return date.toISOString().split('T')[0];\n    },\n    validateForm: function validateForm() {\n      this.errors = {};\n      if (!this.formData.course_id) {\n        this.errors.course_id = 'Please select a course';\n      }\n      if (!this.formData.name || this.formData.name.trim() === '') {\n        this.errors.name = 'Assessment name is required';\n      }\n      if (!this.formData.type) {\n        this.errors.type = 'Please select an assessment type';\n      }\n      if (!this.formData.weightage || this.formData.weightage <= 0) {\n        this.errors.weightage = 'Weightage must be greater than 0';\n      } else if (this.formData.weightage > 100) {\n        this.errors.weightage = 'Weightage cannot exceed 100%';\n      } else if (this.currentTotalWeightage > 100) {\n        this.errors.weightage = 'Total weightage exceeds 100%';\n      }\n      if (!this.formData.max_mark || this.formData.max_mark <= 0) {\n        this.errors.max_mark = 'Maximum mark must be greater than 0';\n      }\n      return Object.keys(this.errors).length === 0;\n    },\n    saveAssessment: function saveAssessment() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var _t2;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              if (_this4.validateForm()) {\n                _context2.n = 1;\n                break;\n              }\n              return _context2.a(2);\n            case 1:\n              _this4.isSaving = true;\n              _context2.p = 2;\n              if (!_this4.isEditing) {\n                _context2.n = 4;\n                break;\n              }\n              _context2.n = 3;\n              return _this4.updateAssessment(_objectSpread({\n                id: _this4.assessmentId\n              }, _this4.formData));\n            case 3:\n              _this4.$store.dispatch('showToast', {\n                message: 'Assessment updated successfully',\n                type: 'success'\n              });\n              _context2.n = 6;\n              break;\n            case 4:\n              _context2.n = 5;\n              return _this4.createAssessment(_this4.formData);\n            case 5:\n              _this4.$store.dispatch('showToast', {\n                message: 'Assessment created successfully',\n                type: 'success'\n              });\n            case 6:\n              // Navigate back to the course page\n              _this4.navigateBack();\n              _context2.n = 8;\n              break;\n            case 7:\n              _context2.p = 7;\n              _t2 = _context2.v;\n              console.error('Error saving assessment:', _t2);\n            case 8:\n              _context2.p = 8;\n              _this4.isSaving = false;\n              return _context2.f(8);\n            case 9:\n              return _context2.a(2);\n          }\n        }, _callee2, null, [[2, 7, 8, 9]]);\n      }))();\n    },\n    cancelForm: function cancelForm() {\n      this.navigateBack();\n    },\n    navigateBack: function navigateBack() {\n      if (this.formData.course_id) {\n        this.$router.push(\"/lecturer/course/\".concat(this.formData.course_id));\n      } else {\n        this.$router.push('/lecturer/dashboard');\n      }\n    }\n  })\n};","map":{"version":3,"names":["mapState","mapGetters","mapActions","name","data","formData","course_id","type","description","due_date","weightage","max_mark","is_final_exam","is_published","errors","isSaving","assessmentId","courseIdFromQuery","computed","_objectSpread","isLoading","state","loading","courses","assessment","assessments","getCourseAssessments","isEditing","lecturerCourses","selectedCourse","_this","find","course","id","parseInt","courseAssessments","currentTotalWeightage","_this2","totalWeight","forEach","isFormValid","created","_this3","_asyncToGenerator","_regenerator","m","_callee","_t","w","_context","n","$route","params","query","courseId","p","fetchCourses","lecturerId","$store","getters","fetchAssessment","populateFormFromAssessment","fetchAssessments","v","console","error","dispatch","a","methods","createAssessment","updateAssessment","formatDateForInput","dateString","date","Date","toISOString","split","validateForm","trim","Object","keys","length","saveAssessment","_this4","_callee2","_t2","_context2","message","navigateBack","f","cancelForm","$router","push","concat"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\NEW\\course-mark-management\\frontend\\src\\views\\lecturer\\AssessmentForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"assessment-form\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/lecturer/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item\" v-if=\"selectedCourse\">\r\n              <router-link :to=\"`/lecturer/course/${selectedCourse.id}`\">\r\n                {{ selectedCourse.code }} - {{ selectedCourse.name }}\r\n              </router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              {{ isEditing ? 'Edit Assessment' : 'Create Assessment' }}\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">\r\n          {{ isEditing ? 'Edit Assessment' : 'Create New Assessment' }}\r\n        </h1>\r\n        <p class=\"text-muted\" v-if=\"selectedCourse\">\r\n          For course: {{ selectedCourse.code }} - {{ selectedCourse.name }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else class=\"card\">\r\n      <div class=\"card-body\">\r\n        <form @submit.prevent=\"saveAssessment\">\r\n          <div class=\"row mb-3\" v-if=\"!selectedCourse && !isEditing\">\r\n            <div class=\"col-md-6\">\r\n              <label for=\"course\" class=\"form-label\">Course <span class=\"text-danger\">*</span></label>\r\n              <select \r\n                id=\"course\" \r\n                class=\"form-select\" \r\n                v-model=\"formData.course_id\" \r\n                required\r\n                :class=\"{ 'is-invalid': errors.course_id }\"\r\n              >\r\n                <option value=\"\">Select a course</option>\r\n                <option \r\n                  v-for=\"course in lecturerCourses\" \r\n                  :key=\"course.id\" \r\n                  :value=\"course.id\"\r\n                >\r\n                  {{ course.code }} - {{ course.name }}\r\n                </option>\r\n              </select>\r\n              <div class=\"invalid-feedback\" v-if=\"errors.course_id\">\r\n                {{ errors.course_id }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row mb-3\">\r\n            <div class=\"col-md-6\">\r\n              <label for=\"name\" class=\"form-label\">Assessment Name <span class=\"text-danger\">*</span></label>\r\n              <input \r\n                type=\"text\" \r\n                id=\"name\" \r\n                class=\"form-control\" \r\n                v-model=\"formData.name\" \r\n                required\r\n                :class=\"{ 'is-invalid': errors.name }\"\r\n                placeholder=\"e.g., Midterm Exam, Assignment 1\"\r\n              >\r\n              <div class=\"invalid-feedback\" v-if=\"errors.name\">\r\n                {{ errors.name }}\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <label for=\"type\" class=\"form-label\">Assessment Type <span class=\"text-danger\">*</span></label>\r\n              <select \r\n                id=\"type\" \r\n                class=\"form-select\" \r\n                v-model=\"formData.type\" \r\n                required\r\n                :class=\"{ 'is-invalid': errors.type }\"\r\n              >\r\n                <option value=\"\">Select type</option>\r\n                <option value=\"Assignment\">Assignment</option>\r\n                <option value=\"Quiz\">Quiz</option>\r\n                <option value=\"Midterm\">Midterm Exam</option>\r\n                <option value=\"Project\">Project</option>\r\n                <option value=\"Exam\">Final Exam</option>\r\n                <option value=\"Lab\">Lab Work</option>\r\n                <option value=\"Participation\">Participation</option>\r\n                <option value=\"Other\">Other</option>\r\n              </select>\r\n              <div class=\"invalid-feedback\" v-if=\"errors.type\">\r\n                {{ errors.type }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row mb-3\">\r\n            <div class=\"col-md-4\">\r\n              <label for=\"weightage\" class=\"form-label\">Weightage (%) <span class=\"text-danger\">*</span></label>\r\n              <input \r\n                type=\"number\" \r\n                id=\"weightage\" \r\n                class=\"form-control\" \r\n                v-model.number=\"formData.weightage\" \r\n                min=\"0\" \r\n                max=\"100\" \r\n                required\r\n                :class=\"{ 'is-invalid': errors.weightage }\"\r\n              >\r\n              <div class=\"invalid-feedback\" v-if=\"errors.weightage\">\r\n                {{ errors.weightage }}\r\n              </div>\r\n              <small class=\"form-text text-muted\">\r\n                Total weightage for all assessments should equal 100%.\r\n                Current total: {{ currentTotalWeightage }}%\r\n                <span \r\n                  v-if=\"currentTotalWeightage > 100\" \r\n                  class=\"text-danger\"\r\n                >\r\n                  (exceeds 100%)\r\n                </span>\r\n              </small>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <label for=\"max_mark\" class=\"form-label\">Maximum Mark <span class=\"text-danger\">*</span></label>\r\n              <input \r\n                type=\"number\" \r\n                id=\"max_mark\" \r\n                class=\"form-control\" \r\n                v-model.number=\"formData.max_mark\" \r\n                min=\"1\" \r\n                required\r\n                :class=\"{ 'is-invalid': errors.max_mark }\"\r\n              >\r\n              <div class=\"invalid-feedback\" v-if=\"errors.max_mark\">\r\n                {{ errors.max_mark }}\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <label for=\"due_date\" class=\"form-label\">Due Date</label>\r\n              <input \r\n                type=\"date\" \r\n                id=\"due_date\" \r\n                class=\"form-control\" \r\n                v-model=\"formData.due_date\"\r\n                :class=\"{ 'is-invalid': errors.due_date }\"\r\n              >\r\n              <div class=\"invalid-feedback\" v-if=\"errors.due_date\">\r\n                {{ errors.due_date }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"mb-3\">\r\n            <label for=\"description\" class=\"form-label\">Description</label>\r\n            <textarea \r\n              id=\"description\" \r\n              class=\"form-control\" \r\n              v-model=\"formData.description\"\r\n              rows=\"4\"\r\n              :class=\"{ 'is-invalid': errors.description }\"\r\n              placeholder=\"Provide details about the assessment...\"\r\n            ></textarea>\r\n            <div class=\"invalid-feedback\" v-if=\"errors.description\">\r\n              {{ errors.description }}\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"mb-3 form-check\">\r\n            <input \r\n              type=\"checkbox\" \r\n              class=\"form-check-input\" \r\n              id=\"is_final_exam\" \r\n              v-model=\"formData.is_final_exam\"\r\n            >\r\n            <label class=\"form-check-label\" for=\"is_final_exam\">\r\n              This is a final exam\r\n            </label>\r\n            <small class=\"form-text text-muted d-block\">\r\n              Mark this if this assessment is the final exam for the course.\r\n            </small>\r\n          </div>\r\n\r\n          <div class=\"mb-3 form-check\">\r\n            <input \r\n              type=\"checkbox\" \r\n              class=\"form-check-input\" \r\n              id=\"is_published\" \r\n              v-model=\"formData.is_published\"\r\n            >\r\n            <label class=\"form-check-label\" for=\"is_published\">\r\n              Publish to students\r\n            </label>\r\n            <small class=\"form-text text-muted d-block\">\r\n              If checked, students will be able to see this assessment in their course view.\r\n            </small>\r\n          </div>\r\n\r\n          <div class=\"d-flex justify-content-between mt-4\">\r\n            <button \r\n              type=\"button\" \r\n              class=\"btn btn-outline-secondary\" \r\n              @click=\"cancelForm\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button \r\n              type=\"submit\" \r\n              class=\"btn btn-primary\"\r\n              :disabled=\"!isFormValid || isSaving\"\r\n            >\r\n              <span v-if=\"isSaving\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n              {{ isEditing ? 'Update Assessment' : 'Create Assessment' }}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'AssessmentForm',\r\n  data() {\r\n    return {\r\n      formData: {\r\n        course_id: '',\r\n        name: '',\r\n        type: '',\r\n        description: '',\r\n        due_date: '',\r\n        weightage: 10,\r\n        max_mark: 100,\r\n        is_final_exam: false,\r\n        is_published: true\r\n      },\r\n      errors: {},\r\n      isSaving: false,\r\n      assessmentId: null,\r\n      courseIdFromQuery: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      isLoading: state => state.loading,\r\n      courses: state => state.courses.courses,\r\n      assessment: state => state.assessments.assessment\r\n    }),\r\n    ...mapGetters({\r\n      getCourseAssessments: 'assessments/getCourseAssessments'\r\n    }),\r\n    isEditing() {\r\n      return !!this.assessmentId;\r\n    },\r\n    lecturerCourses() {\r\n      return this.courses || [];\r\n    },\r\n    selectedCourse() {\r\n      if (!this.formData.course_id) return null;\r\n      return this.courses.find(course => course.id === parseInt(this.formData.course_id));\r\n    },\r\n    courseAssessments() {\r\n      if (!this.formData.course_id) return [];\r\n      return this.getCourseAssessments(this.formData.course_id) || [];\r\n    },\r\n    currentTotalWeightage() {\r\n      if (!this.formData.course_id) return this.formData.weightage || 0;\r\n      \r\n      // Calculate total weightage of all assessments in this course, including the current one if editing\r\n      let totalWeight = 0;\r\n      \r\n      this.courseAssessments.forEach(assessment => {\r\n        // Skip the current assessment when editing\r\n        if (this.isEditing && assessment.id === parseInt(this.assessmentId)) return;\r\n        totalWeight += assessment.weightage;\r\n      });\r\n      \r\n      // Add the current assessment weightage\r\n      totalWeight += this.formData.weightage || 0;\r\n      \r\n      return totalWeight;\r\n    },\r\n    isFormValid() {\r\n      return this.formData.course_id && \r\n             this.formData.name && \r\n             this.formData.type && \r\n             this.formData.weightage > 0 && \r\n             this.formData.max_mark > 0;\r\n    }\r\n  },\r\n  async created() {\r\n    // Check if we're editing an existing assessment\r\n    this.assessmentId = this.$route.params.id;\r\n    this.courseIdFromQuery = this.$route.query.courseId;\r\n    \r\n    try {\r\n      // Fetch lecturer's courses\r\n      await this.fetchCourses({ lecturerId: this.$store.getters['auth/userId'] });\r\n      \r\n      if (this.assessmentId) {\r\n        // Editing mode: fetch the assessment details\r\n        await this.fetchAssessment(this.assessmentId);\r\n        this.populateFormFromAssessment();\r\n      } else if (this.courseIdFromQuery) {\r\n        // Coming from a course page with pre-selected course\r\n        this.formData.course_id = parseInt(this.courseIdFromQuery);\r\n        // Fetch existing assessments for this course to calculate total weightage\r\n        await this.fetchAssessments({ courseId: this.formData.course_id });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading form data:', error);\r\n      this.$store.dispatch('setError', 'Failed to load assessment data');\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchCourses: 'courses/fetchCourses',\r\n      fetchAssessment: 'assessments/fetchAssessment',\r\n      fetchAssessments: 'assessments/fetchAssessments',\r\n      createAssessment: 'assessments/createAssessment',\r\n      updateAssessment: 'assessments/updateAssessment'\r\n    }),\r\n    populateFormFromAssessment() {\r\n      if (!this.assessment) return;\r\n      \r\n      this.formData = {\r\n        course_id: this.assessment.course_id,\r\n        name: this.assessment.name || '',\r\n        type: this.assessment.type || '',\r\n        description: this.assessment.description || '',\r\n        due_date: this.assessment.due_date ? this.formatDateForInput(this.assessment.due_date) : '',\r\n        weightage: this.assessment.weightage || 0,\r\n        max_mark: this.assessment.max_mark || 0,\r\n        is_final_exam: this.assessment.is_final_exam || false,\r\n        is_published: this.assessment.is_published || true\r\n      };\r\n      \r\n      // Fetch existing assessments for this course to calculate total weightage\r\n      this.fetchAssessments({ courseId: this.formData.course_id });\r\n    },\r\n    formatDateForInput(dateString) {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return date.toISOString().split('T')[0];\r\n    },\r\n    validateForm() {\r\n      this.errors = {};\r\n      \r\n      if (!this.formData.course_id) {\r\n        this.errors.course_id = 'Please select a course';\r\n      }\r\n      \r\n      if (!this.formData.name || this.formData.name.trim() === '') {\r\n        this.errors.name = 'Assessment name is required';\r\n      }\r\n      \r\n      if (!this.formData.type) {\r\n        this.errors.type = 'Please select an assessment type';\r\n      }\r\n      \r\n      if (!this.formData.weightage || this.formData.weightage <= 0) {\r\n        this.errors.weightage = 'Weightage must be greater than 0';\r\n      } else if (this.formData.weightage > 100) {\r\n        this.errors.weightage = 'Weightage cannot exceed 100%';\r\n      } else if (this.currentTotalWeightage > 100) {\r\n        this.errors.weightage = 'Total weightage exceeds 100%';\r\n      }\r\n      \r\n      if (!this.formData.max_mark || this.formData.max_mark <= 0) {\r\n        this.errors.max_mark = 'Maximum mark must be greater than 0';\r\n      }\r\n      \r\n      return Object.keys(this.errors).length === 0;\r\n    },\r\n    async saveAssessment() {\r\n      if (!this.validateForm()) return;\r\n      \r\n      this.isSaving = true;\r\n      \r\n      try {\r\n        if (this.isEditing) {\r\n          // Update existing assessment\r\n          await this.updateAssessment({\r\n            id: this.assessmentId,\r\n            ...this.formData\r\n          });\r\n          this.$store.dispatch('showToast', {\r\n            message: 'Assessment updated successfully',\r\n            type: 'success'\r\n          });\r\n        } else {\r\n          // Create new assessment\r\n          await this.createAssessment(this.formData);\r\n          this.$store.dispatch('showToast', {\r\n            message: 'Assessment created successfully',\r\n            type: 'success'\r\n          });\r\n        }\r\n        \r\n        // Navigate back to the course page\r\n        this.navigateBack();\r\n      } catch (error) {\r\n        console.error('Error saving assessment:', error);\r\n      } finally {\r\n        this.isSaving = false;\r\n      }\r\n    },\r\n    cancelForm() {\r\n      this.navigateBack();\r\n    },\r\n    navigateBack() {\r\n      if (this.formData.course_id) {\r\n        this.$router.push(`/lecturer/course/${this.formData.course_id}`);\r\n      } else {\r\n        this.$router.push('/lecturer/dashboard');\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.assessment-form h1 {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}