{"ast":null,"code":"import axios from 'axios';\nexport default {\n  namespaced: true,\n  state: {\n    assessments: [],\n    assessment: null\n  },\n  getters: {\n    getAllAssessments: state => state.assessments,\n    getAssessment: state => state.assessment,\n    getCourseAssessments: state => courseId => {\n      return state.assessments.filter(a => a.course_id === parseInt(courseId));\n    }\n  },\n  mutations: {\n    SET_ASSESSMENTS(state, assessments) {\n      state.assessments = assessments;\n    },\n    SET_ASSESSMENT(state, assessment) {\n      state.assessment = assessment;\n    },\n    ADD_ASSESSMENT(state, assessment) {\n      state.assessments.push(assessment);\n    },\n    UPDATE_ASSESSMENT(state, updatedAssessment) {\n      const index = state.assessments.findIndex(a => a.id === updatedAssessment.id);\n      if (index !== -1) {\n        state.assessments.splice(index, 1, updatedAssessment);\n      }\n      if (state.assessment && state.assessment.id === updatedAssessment.id) {\n        state.assessment = updatedAssessment;\n      }\n    },\n    DELETE_ASSESSMENT(state, assessmentId) {\n      state.assessments = state.assessments.filter(a => a.id !== assessmentId);\n      if (state.assessment && state.assessment.id === assessmentId) {\n        state.assessment = null;\n      }\n    }\n  },\n  actions: {\n    async fetchAssessments({\n      commit,\n      dispatch\n    }, filter = {}) {\n      try {\n        dispatch('setLoading', true, {\n          root: true\n        });\n        let url = '/api/assessments';\n        const params = {};\n        if (filter.courseId) {\n          params.course_id = filter.courseId;\n        }\n        const response = await axios.get(url, {\n          params\n        });\n        commit('SET_ASSESSMENTS', response.data);\n        return response.data;\n      } catch (error) {\n        const errorMsg = error.response?.data?.error || 'Failed to fetch assessments';\n        dispatch('setError', errorMsg, {\n          root: true\n        });\n        throw new Error(errorMsg);\n      } finally {\n        dispatch('setLoading', false, {\n          root: true\n        });\n      }\n    },\n    async fetchAssessment({\n      commit,\n      dispatch\n    }, assessmentId) {\n      try {\n        dispatch('setLoading', true, {\n          root: true\n        });\n        const response = await axios.get(`/api/assessments/${assessmentId}`);\n        commit('SET_ASSESSMENT', response.data);\n        return response.data;\n      } catch (error) {\n        const errorMsg = error.response?.data?.error || 'Failed to fetch assessment';\n        dispatch('setError', errorMsg, {\n          root: true\n        });\n        throw new Error(errorMsg);\n      } finally {\n        dispatch('setLoading', false, {\n          root: true\n        });\n      }\n    },\n    async createAssessment({\n      commit,\n      dispatch\n    }, assessmentData) {\n      try {\n        dispatch('setLoading', true, {\n          root: true\n        });\n        const response = await axios.post('/api/assessments', assessmentData);\n        // Fetch the newly created assessment\n        const newAssessmentId = response.data.assessmentId;\n        const newAssessmentResponse = await axios.get(`/api/assessments/${newAssessmentId}`);\n        commit('ADD_ASSESSMENT', newAssessmentResponse.data);\n        dispatch('showToast', {\n          message: 'Assessment created successfully',\n          type: 'success'\n        }, {\n          root: true\n        });\n        return newAssessmentResponse.data;\n      } catch (error) {\n        const errorMsg = error.response?.data?.error || 'Failed to create assessment';\n        dispatch('setError', errorMsg, {\n          root: true\n        });\n        throw new Error(errorMsg);\n      } finally {\n        dispatch('setLoading', false, {\n          root: true\n        });\n      }\n    },\n    async updateAssessment({\n      commit,\n      dispatch\n    }, {\n      assessmentId,\n      assessmentData\n    }) {\n      try {\n        dispatch('setLoading', true, {\n          root: true\n        });\n        await axios.put(`/api/assessments/${assessmentId}`, assessmentData);\n        // Fetch the updated assessment\n        const response = await axios.get(`/api/assessments/${assessmentId}`);\n        commit('UPDATE_ASSESSMENT', response.data);\n        dispatch('showToast', {\n          message: 'Assessment updated successfully',\n          type: 'success'\n        }, {\n          root: true\n        });\n        return response.data;\n      } catch (error) {\n        const errorMsg = error.response?.data?.error || 'Failed to update assessment';\n        dispatch('setError', errorMsg, {\n          root: true\n        });\n        throw new Error(errorMsg);\n      } finally {\n        dispatch('setLoading', false, {\n          root: true\n        });\n      }\n    },\n    async deleteAssessment({\n      commit,\n      dispatch\n    }, assessmentId) {\n      try {\n        dispatch('setLoading', true, {\n          root: true\n        });\n        await axios.delete(`/api/assessments/${assessmentId}`);\n        commit('DELETE_ASSESSMENT', assessmentId);\n        dispatch('showToast', {\n          message: 'Assessment deleted successfully',\n          type: 'success'\n        }, {\n          root: true\n        });\n        return true;\n      } catch (error) {\n        const errorMsg = error.response?.data?.error || 'Failed to delete assessment';\n        dispatch('setError', errorMsg, {\n          root: true\n        });\n        throw new Error(errorMsg);\n      } finally {\n        dispatch('setLoading', false, {\n          root: true\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","namespaced","state","assessments","assessment","getters","getAllAssessments","getAssessment","getCourseAssessments","courseId","filter","a","course_id","parseInt","mutations","SET_ASSESSMENTS","SET_ASSESSMENT","ADD_ASSESSMENT","push","UPDATE_ASSESSMENT","updatedAssessment","index","findIndex","id","splice","DELETE_ASSESSMENT","assessmentId","actions","fetchAssessments","commit","dispatch","root","url","params","response","get","data","error","errorMsg","Error","fetchAssessment","createAssessment","assessmentData","post","newAssessmentId","newAssessmentResponse","message","type","updateAssessment","put","deleteAssessment","delete"],"sources":["C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/src/store/modules/assessments.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    assessments: [],\r\n    assessment: null\r\n  },\r\n  getters: {\r\n    getAllAssessments: state => state.assessments,\r\n    getAssessment: state => state.assessment,\r\n    getCourseAssessments: state => courseId => {\r\n      return state.assessments.filter(a => a.course_id === parseInt(courseId));\r\n    }\r\n  },\r\n  mutations: {\r\n    SET_ASSESSMENTS(state, assessments) {\r\n      state.assessments = assessments;\r\n    },\r\n    SET_ASSESSMENT(state, assessment) {\r\n      state.assessment = assessment;\r\n    },\r\n    ADD_ASSESSMENT(state, assessment) {\r\n      state.assessments.push(assessment);\r\n    },\r\n    UPDATE_ASSESSMENT(state, updatedAssessment) {\r\n      const index = state.assessments.findIndex(a => a.id === updatedAssessment.id);\r\n      if (index !== -1) {\r\n        state.assessments.splice(index, 1, updatedAssessment);\r\n      }\r\n      if (state.assessment && state.assessment.id === updatedAssessment.id) {\r\n        state.assessment = updatedAssessment;\r\n      }\r\n    },\r\n    DELETE_ASSESSMENT(state, assessmentId) {\r\n      state.assessments = state.assessments.filter(a => a.id !== assessmentId);\r\n      if (state.assessment && state.assessment.id === assessmentId) {\r\n        state.assessment = null;\r\n      }\r\n    }\r\n  },\r\n  actions: {\r\n    async fetchAssessments({ commit, dispatch }, filter = {}) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        let url = '/api/assessments';\r\n        const params = {};\r\n        \r\n        if (filter.courseId) {\r\n          params.course_id = filter.courseId;\r\n        }\r\n        \r\n        const response = await axios.get(url, { params });\r\n        commit('SET_ASSESSMENTS', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch assessments';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async fetchAssessment({ commit, dispatch }, assessmentId) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.get(`/api/assessments/${assessmentId}`);\r\n        commit('SET_ASSESSMENT', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch assessment';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async createAssessment({ commit, dispatch }, assessmentData) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.post('/api/assessments', assessmentData);\r\n        // Fetch the newly created assessment\r\n        const newAssessmentId = response.data.assessmentId;\r\n        const newAssessmentResponse = await axios.get(`/api/assessments/${newAssessmentId}`);\r\n        \r\n        commit('ADD_ASSESSMENT', newAssessmentResponse.data);\r\n        dispatch('showToast', {\r\n          message: 'Assessment created successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return newAssessmentResponse.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to create assessment';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async updateAssessment({ commit, dispatch }, { assessmentId, assessmentData }) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        await axios.put(`/api/assessments/${assessmentId}`, assessmentData);\r\n        // Fetch the updated assessment\r\n        const response = await axios.get(`/api/assessments/${assessmentId}`);\r\n        \r\n        commit('UPDATE_ASSESSMENT', response.data);\r\n        dispatch('showToast', {\r\n          message: 'Assessment updated successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to update assessment';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async deleteAssessment({ commit, dispatch }, assessmentId) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        await axios.delete(`/api/assessments/${assessmentId}`);\r\n        \r\n        commit('DELETE_ASSESSMENT', assessmentId);\r\n        dispatch('showToast', {\r\n          message: 'Assessment deleted successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return true;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to delete assessment';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}