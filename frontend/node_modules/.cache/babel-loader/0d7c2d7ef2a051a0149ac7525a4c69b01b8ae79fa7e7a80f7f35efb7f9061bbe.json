{"ast":null,"code":"import _regenerator from \"C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Users/ansmu/Desktop/Web/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url.to-json.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { mapGetters } from 'vuex';\nimport * as bootstrap from 'bootstrap';\nexport default {\n  name: 'AdminEnrollmentManagement',\n  data: function data() {\n    return {\n      selectedCourseId: '',\n      searchQuery: '',\n      currentCourseEnrollments: [],\n      allStudents: [],\n      bulkEnrollForm: {\n        studentIds: [],\n        academicYear: '2025-2026',\n        semester: 'Fall'\n      },\n      enrollmentToRemove: null,\n      transferForm: {\n        student: null,\n        targetCourseId: ''\n      },\n      transferredStudents: new Map(),\n      // Store transferred students by target course ID\n      transferredOutStudents: new Map() // Store students transferred OUT of each course\n    };\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, mapGetters('auth', ['getUser'])), mapGetters('courses', ['getCourses'])), mapGetters('enrollments', ['getAvailableStudents', 'isLoading'])), mapGetters('users', ['getUsers'])), {}, {\n    userInfo: function userInfo() {\n      return this.getUser || {\n        name: 'Admin'\n      };\n    },\n    courses: function courses() {\n      return this.getCourses || [];\n    },\n    availableStudents: function availableStudents() {\n      return this.getAvailableStudents || [];\n    },\n    selectedCourse: function selectedCourse() {\n      var _this$courses,\n        _this = this;\n      return ((_this$courses = this.courses) === null || _this$courses === void 0 ? void 0 : _this$courses.find(function (c) {\n        return c.id == _this.selectedCourseId;\n      })) || null;\n    },\n    filteredCourseEnrollments: function filteredCourseEnrollments() {\n      if (!this.searchQuery) return this.currentCourseEnrollments || [];\n      var query = this.searchQuery.toLowerCase();\n      return (this.currentCourseEnrollments || []).filter(function (enrollment) {\n        return enrollment.student_name.toLowerCase().includes(query) || enrollment.student_email.toLowerCase().includes(query) || enrollment.matric_number && enrollment.matric_number.toLowerCase().includes(query);\n      });\n    },\n    totalStudents: function totalStudents() {\n      var _this$allStudents;\n      return ((_this$allStudents = this.allStudents) === null || _this$allStudents === void 0 ? void 0 : _this$allStudents.length) || 0;\n    },\n    totalCourses: function totalCourses() {\n      var _this$courses2;\n      return ((_this$courses2 = this.courses) === null || _this$courses2 === void 0 ? void 0 : _this$courses2.length) || 0;\n    },\n    totalEnrollments: function totalEnrollments() {\n      var _this$allStudents2;\n      return ((_this$allStudents2 = this.allStudents) === null || _this$allStudents2 === void 0 ? void 0 : _this$allStudents2.reduce(function (total, student) {\n        return total + (student.enrollment_count || 0);\n      }, 0)) || 0;\n    },\n    availableTargetCourses: function availableTargetCourses() {\n      var _this$courses3,\n        _this2 = this;\n      // Return all courses except the currently selected one\n      return ((_this$courses3 = this.courses) === null || _this$courses3 === void 0 ? void 0 : _this$courses3.filter(function (course) {\n        return course.id != _this2.selectedCourseId;\n      })) || [];\n    }\n  }),\n  created: function created() {\n    var _this3 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            // Load any previously transferred students from localStorage\n            _this3.loadTransferredStudents();\n            _context.n = 1;\n            return _this3.loadTemporaryData();\n          case 1:\n            return _context.a(2);\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    loadTemporaryData: function loadTemporaryData() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              try {\n                // Load temporary courses\n                _this4.$store.commit('courses/SET_COURSES', [{\n                  id: 1,\n                  code: 'CS101',\n                  name: 'Introduction to Programming',\n                  academic_year: '2025-2026',\n                  semester: 'Fall',\n                  lecturer_id: 2,\n                  lecturer_name: 'Lecturer One'\n                }, {\n                  id: 2,\n                  code: 'CS201',\n                  name: 'Data Structures',\n                  academic_year: '2025-2026',\n                  semester: 'Fall',\n                  lecturer_id: 2,\n                  lecturer_name: 'Lecturer One'\n                }]);\n\n                // Load temporary students\n                _this4.allStudents = [{\n                  id: 4,\n                  name: 'Student One',\n                  email: 'student1@example.com',\n                  role: 'student',\n                  matric_number: 'S123456',\n                  enrollment_count: 2\n                }, {\n                  id: 5,\n                  name: 'Student Two',\n                  email: 'student2@example.com',\n                  role: 'student',\n                  matric_number: 'S123457',\n                  enrollment_count: 1\n                }, {\n                  id: 6,\n                  name: 'Student Three',\n                  email: 'student3@example.com',\n                  role: 'student',\n                  matric_number: 'S123458',\n                  enrollment_count: 0\n                }];\n\n                // Load temporary users (including lecturers) into the store\n                _this4.$store.commit('users/SET_USERS', [{\n                  id: 1,\n                  name: 'Admin User',\n                  email: 'admin@example.com',\n                  role: 'admin'\n                }, {\n                  id: 2,\n                  name: 'Lecturer One',\n                  email: 'lecturer1@example.com',\n                  role: 'lecturer'\n                }, {\n                  id: 3,\n                  name: 'Advisor One',\n                  email: 'advisor1@example.com',\n                  role: 'advisor'\n                }, {\n                  id: 4,\n                  name: 'Student One',\n                  email: 'student1@example.com',\n                  role: 'student',\n                  matric_number: 'S123456'\n                }, {\n                  id: 5,\n                  name: 'Student Two',\n                  email: 'student2@example.com',\n                  role: 'student',\n                  matric_number: 'S123457'\n                }, {\n                  id: 6,\n                  name: 'Student Three',\n                  email: 'student3@example.com',\n                  role: 'student',\n                  matric_number: 'S123458'\n                }]);\n                console.log('Temporary admin enrollment data loaded');\n              } catch (error) {\n                console.error('Error loading temporary data:', error);\n              }\n            case 1:\n              return _context2.a(2);\n          }\n        }, _callee2);\n      }))();\n    },\n    loadInitialData: function loadInitialData() {\n      var _this5 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {\n        var _t;\n        return _regenerator().w(function (_context3) {\n          while (1) switch (_context3.n) {\n            case 0:\n              _context3.p = 0;\n              _context3.n = 1;\n              return Promise.all([_this5.$store.dispatch('courses/fetchCourses'), _this5.loadAllStudents()]);\n            case 1:\n              _context3.n = 3;\n              break;\n            case 2:\n              _context3.p = 2;\n              _t = _context3.v;\n              console.error('Error loading initial data:', _t);\n              _this5.$store.dispatch('showToast', {\n                message: 'Error loading data',\n                type: 'error'\n              });\n            case 3:\n              return _context3.a(2);\n          }\n        }, _callee3, null, [[0, 2]]);\n      }))();\n    },\n    loadAllStudents: function loadAllStudents() {\n      var _this6 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {\n        var response, _t2;\n        return _regenerator().w(function (_context4) {\n          while (1) switch (_context4.n) {\n            case 0:\n              _context4.p = 0;\n              _context4.n = 1;\n              return _this6.$store.dispatch('users/fetchUsers');\n            case 1:\n              response = _context4.v;\n              _this6.allStudents = response.filter(function (user) {\n                return user.role === 'student';\n              });\n              _context4.n = 3;\n              break;\n            case 2:\n              _context4.p = 2;\n              _t2 = _context4.v;\n              console.error('Error loading students:', _t2);\n            case 3:\n              return _context4.a(2);\n          }\n        }, _callee4, null, [[0, 2]]);\n      }))();\n    },\n    loadCourseEnrollments: function loadCourseEnrollments() {\n      var _this7 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {\n        var currentCourseId, transferredOutIds, transferredToThisCourse;\n        return _regenerator().w(function (_context5) {\n          while (1) switch (_context5.n) {\n            case 0:\n              if (_this7.selectedCourseId) {\n                _context5.n = 1;\n                break;\n              }\n              _this7.currentCourseEnrollments = [];\n              return _context5.a(2);\n            case 1:\n              try {\n                console.log('Loading enrollments for course:', _this7.selectedCourseId);\n\n                // Load temporary course enrollments based on selected course\n                if (_this7.selectedCourseId == 1) {\n                  _this7.currentCourseEnrollments = [{\n                    enrollment_id: 1,\n                    student_id: 4,\n                    student_name: 'Student One',\n                    student_email: 'student1@example.com',\n                    matric_number: 'S123456',\n                    academic_year: '2025-2026',\n                    semester: 'Fall',\n                    enrolled_at: '2025-01-15'\n                  }, {\n                    enrollment_id: 2,\n                    student_id: 5,\n                    student_name: 'Student Two',\n                    student_email: 'student2@example.com',\n                    matric_number: 'S123457',\n                    academic_year: '2025-2026',\n                    semester: 'Fall',\n                    enrolled_at: '2025-01-16'\n                  }];\n                  console.log('Set enrollments for CS101:', _this7.currentCourseEnrollments);\n\n                  // Set available students for this course\n                  _this7.$store.commit('enrollments/SET_AVAILABLE_STUDENTS', [{\n                    id: 6,\n                    name: 'Student Three',\n                    email: 'student3@example.com',\n                    matric_number: 'S123458',\n                    enrollment_count: 0\n                  }]);\n                } else if (_this7.selectedCourseId == 2) {\n                  _this7.currentCourseEnrollments = [{\n                    enrollment_id: 3,\n                    student_id: 5,\n                    student_name: 'Student Two',\n                    student_email: 'student2@example.com',\n                    matric_number: 'S123457',\n                    academic_year: '2025-2026',\n                    semester: 'Fall',\n                    enrolled_at: '2025-01-17'\n                  }];\n                  console.log('Set enrollments for CS201:', _this7.currentCourseEnrollments);\n\n                  // Set available students for this course\n                  _this7.$store.commit('enrollments/SET_AVAILABLE_STUDENTS', [{\n                    id: 4,\n                    name: 'Student One',\n                    email: 'student1@example.com',\n                    matric_number: 'S123456',\n                    enrollment_count: 1\n                  }, {\n                    id: 6,\n                    name: 'Student Three',\n                    email: 'student3@example.com',\n                    matric_number: 'S123458',\n                    enrollment_count: 0\n                  }]);\n                } else {\n                  _this7.currentCourseEnrollments = [];\n                  console.log('No enrollments for course:', _this7.selectedCourseId);\n                }\n\n                // Filter out students that have been transferred OUT of this course\n                currentCourseId = parseInt(_this7.selectedCourseId);\n                if (_this7.transferredOutStudents && _this7.transferredOutStudents.has(currentCourseId)) {\n                  transferredOutIds = _this7.transferredOutStudents.get(currentCourseId);\n                  _this7.currentCourseEnrollments = _this7.currentCourseEnrollments.filter(function (enrollment) {\n                    return !transferredOutIds.includes(enrollment.enrollment_id);\n                  });\n                }\n\n                // Add any transferred students to this course\n                if (_this7.transferredStudents && _this7.transferredStudents.has(parseInt(_this7.selectedCourseId))) {\n                  transferredToThisCourse = _this7.transferredStudents.get(parseInt(_this7.selectedCourseId));\n                  _this7.currentCourseEnrollments = _this7.currentCourseEnrollments.concat(transferredToThisCourse);\n                }\n                console.log('Course enrollments loaded for course:', _this7.selectedCourseId);\n              } catch (error) {\n                console.error('Error loading course enrollments:', error);\n                _this7.$store.dispatch('showToast', {\n                  message: 'Error loading course enrollments',\n                  type: 'error'\n                });\n              }\n            case 2:\n              return _context5.a(2);\n          }\n        }, _callee5);\n      }))();\n    },\n    loadCourseEnrollmentsOriginal: function loadCourseEnrollmentsOriginal() {\n      var _this8 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {\n        var _t3;\n        return _regenerator().w(function (_context6) {\n          while (1) switch (_context6.n) {\n            case 0:\n              if (_this8.selectedCourseId) {\n                _context6.n = 1;\n                break;\n              }\n              _this8.currentCourseEnrollments = [];\n              return _context6.a(2);\n            case 1:\n              _context6.p = 1;\n              _context6.n = 2;\n              return Promise.all([_this8.$store.dispatch('enrollments/fetchCourseEnrollments', _this8.selectedCourseId), _this8.$store.dispatch('enrollments/fetchAvailableStudents', _this8.selectedCourseId)]);\n            case 2:\n              _this8.currentCourseEnrollments = _this8.$store.getters['enrollments/getEnrollments'];\n              _context6.n = 4;\n              break;\n            case 3:\n              _context6.p = 3;\n              _t3 = _context6.v;\n              console.error('Error loading course enrollments:', _t3);\n              _this8.$store.dispatch('showToast', {\n                message: 'Error loading course enrollments',\n                type: 'error'\n              });\n            case 4:\n              return _context6.a(2);\n          }\n        }, _callee6, null, [[1, 3]]);\n      }))();\n    },\n    getLecturerName: function getLecturerName(lecturerId) {\n      if (!this.getUsers || !Array.isArray(this.getUsers)) {\n        return 'Unknown Lecturer';\n      }\n      var lecturer = this.getUsers.find(function (u) {\n        return u.id === lecturerId && u.role === 'lecturer';\n      });\n      return lecturer ? lecturer.name : 'Unknown Lecturer';\n    },\n    getStudentInitials: function getStudentInitials(name) {\n      return name.split(' ').map(function (n) {\n        return n[0];\n      }).join('').toUpperCase();\n    },\n    formatDate: function formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      return new Date(dateString).toLocaleDateString('en-GB', {\n        day: 'numeric',\n        month: 'short',\n        year: 'numeric'\n      });\n    },\n    openBulkEnrollModal: function openBulkEnrollModal() {\n      var _this$selectedCourse;\n      this.bulkEnrollForm = {\n        studentIds: [],\n        academicYear: ((_this$selectedCourse = this.selectedCourse) === null || _this$selectedCourse === void 0 ? void 0 : _this$selectedCourse.academic_year) || '2025-2026',\n        semester: 'Fall'\n      };\n      var modal = new bootstrap.Modal(document.getElementById('bulkEnrollModal'));\n      modal.show();\n    },\n    toggleSelectAllStudents: function toggleSelectAllStudents(event) {\n      if (event.target.checked) {\n        this.bulkEnrollForm.studentIds = this.availableStudents.map(function (s) {\n          return s.id;\n        });\n      } else {\n        this.bulkEnrollForm.studentIds = [];\n      }\n    },\n    bulkEnrollStudents: function bulkEnrollStudents() {\n      var _this9 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {\n        var result, modalElement, modal, _t4;\n        return _regenerator().w(function (_context7) {\n          while (1) switch (_context7.n) {\n            case 0:\n              _context7.p = 0;\n              _context7.n = 1;\n              return _this9.$store.dispatch('enrollments/bulkEnrollStudents', {\n                courseId: _this9.selectedCourseId,\n                studentIds: _this9.bulkEnrollForm.studentIds,\n                academicYear: _this9.bulkEnrollForm.academicYear,\n                semester: _this9.bulkEnrollForm.semester\n              });\n            case 1:\n              result = _context7.v;\n              // Close modal\n              modalElement = document.getElementById('bulkEnrollModal');\n              modal = bootstrap.Modal.getInstance(modalElement);\n              modal.hide();\n\n              // Refresh enrollments\n              _context7.n = 2;\n              return _this9.loadCourseEnrollments();\n            case 2:\n              _this9.$store.dispatch('showToast', {\n                message: result.message,\n                type: 'success'\n              });\n              _context7.n = 4;\n              break;\n            case 3:\n              _context7.p = 3;\n              _t4 = _context7.v;\n              console.error('Error bulk enrolling students:', _t4);\n              _this9.$store.dispatch('showToast', {\n                message: _t4.message || 'Error enrolling students',\n                type: 'error'\n              });\n            case 4:\n              return _context7.a(2);\n          }\n        }, _callee7, null, [[0, 3]]);\n      }))();\n    },\n    confirmRemoveEnrollment: function confirmRemoveEnrollment(enrollment) {\n      this.enrollmentToRemove = enrollment;\n      var modal = new bootstrap.Modal(document.getElementById('removeEnrollmentModal'));\n      modal.show();\n    },\n    removeEnrollment: function removeEnrollment() {\n      var _this0 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {\n        var modalElement, modal, _t5;\n        return _regenerator().w(function (_context8) {\n          while (1) switch (_context8.n) {\n            case 0:\n              _context8.p = 0;\n              _context8.n = 1;\n              return _this0.$store.dispatch('enrollments/removeEnrollment', {\n                enrollmentId: _this0.enrollmentToRemove.enrollment_id,\n                courseId: _this0.selectedCourseId\n              });\n            case 1:\n              // Close modal\n              modalElement = document.getElementById('removeEnrollmentModal');\n              modal = bootstrap.Modal.getInstance(modalElement);\n              modal.hide();\n\n              // Refresh enrollments\n              _context8.n = 2;\n              return _this0.loadCourseEnrollments();\n            case 2:\n              _this0.$store.dispatch('showToast', {\n                message: 'Student removed from course successfully!',\n                type: 'success'\n              });\n              _this0.enrollmentToRemove = null;\n              _context8.n = 4;\n              break;\n            case 3:\n              _context8.p = 3;\n              _t5 = _context8.v;\n              console.error('Error removing enrollment:', _t5);\n              _this0.$store.dispatch('showToast', {\n                message: _t5.message || 'Error removing student',\n                type: 'error'\n              });\n            case 4:\n              return _context8.a(2);\n          }\n        }, _callee8, null, [[0, 3]]);\n      }))();\n    },\n    viewStudentDetails: function viewStudentDetails(studentId) {\n      // Navigate to student details page\n      this.$router.push(\"/admin/student/\".concat(studentId));\n    },\n    openStudentEnrollmentHistoryModal: function openStudentEnrollmentHistoryModal() {\n      // This could open a modal to search and view student enrollment history\n      this.$store.dispatch('showToast', {\n        message: 'Student enrollment history feature coming soon',\n        type: 'info'\n      });\n    },\n    openTransferStudentModal: function openTransferStudentModal() {\n      var student = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      if (!student) {\n        this.$store.dispatch('showToast', {\n          message: 'Please select a student to transfer from the enrollment list',\n          type: 'warning'\n        });\n        return;\n      }\n      if (!this.selectedCourseId) {\n        this.$store.dispatch('showToast', {\n          message: 'Please select a course first',\n          type: 'warning'\n        });\n        return;\n      }\n\n      // Set up transfer form\n      this.transferForm.student = student;\n      this.transferForm.targetCourseId = '';\n\n      // Show modal\n      var modal = new bootstrap.Modal(document.getElementById('transferStudentModal'));\n      modal.show();\n    },\n    transferStudent: function transferStudent() {\n      var _this1 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {\n        var targetCourse, studentName, studentIndex, enrollmentToTransfer, currentCourseId, targetCourseId, modal, _t6;\n        return _regenerator().w(function (_context9) {\n          while (1) switch (_context9.n) {\n            case 0:\n              if (!(!_this1.transferForm.student || !_this1.transferForm.targetCourseId)) {\n                _context9.n = 1;\n                break;\n              }\n              _this1.$store.dispatch('showToast', {\n                message: 'Please select a target course',\n                type: 'error'\n              });\n              return _context9.a(2);\n            case 1:\n              _context9.p = 1;\n              // Find target course info\n              targetCourse = _this1.courses.find(function (c) {\n                return c.id == _this1.transferForm.targetCourseId;\n              });\n              studentName = _this1.transferForm.student.student_name; // Remove from current course\n              studentIndex = _this1.currentCourseEnrollments.findIndex(function (e) {\n                return e.enrollment_id === _this1.transferForm.student.enrollment_id;\n              });\n              if (!(studentIndex !== -1)) {\n                _context9.n = 2;\n                break;\n              }\n              // Store the enrollment data before removing it\n              enrollmentToTransfer = _objectSpread({}, _this1.currentCourseEnrollments[studentIndex]); // Track student transferred OUT of current course\n              currentCourseId = parseInt(_this1.selectedCourseId);\n              if (!_this1.transferredOutStudents.has(currentCourseId)) {\n                _this1.transferredOutStudents.set(currentCourseId, []);\n              }\n              _this1.transferredOutStudents.get(currentCourseId).push(enrollmentToTransfer.enrollment_id);\n\n              // Remove from current course enrollments\n              _this1.currentCourseEnrollments.splice(studentIndex, 1);\n\n              // Update the enrollment data for the target course\n              enrollmentToTransfer.course_id = _this1.transferForm.targetCourseId;\n              enrollmentToTransfer.course_code = targetCourse.code;\n              enrollmentToTransfer.course_name = targetCourse.name;\n              enrollmentToTransfer.lecturer_id = targetCourse.lecturer_id;\n              enrollmentToTransfer.enrolled_at = new Date().toISOString();\n\n              // Store the transfer in a temporary data structure for persistence\n              targetCourseId = parseInt(_this1.transferForm.targetCourseId); // Store by target course ID\n              if (!_this1.transferredStudents.has(targetCourseId)) {\n                _this1.transferredStudents.set(targetCourseId, []);\n              }\n              _this1.transferredStudents.get(targetCourseId).push(enrollmentToTransfer);\n\n              // Save to localStorage for persistence\n              _this1.saveTransferredStudents();\n\n              // Update the loadEnrollments method to include transferred students\n              // Refresh the current course view to reflect the removal\n              _context9.n = 2;\n              return _this1.loadCourseEnrollments();\n            case 2:\n              // Hide modal\n              modal = bootstrap.Modal.getInstance(document.getElementById('transferStudentModal'));\n              modal.hide();\n\n              // Clear form\n              _this1.transferForm.student = null;\n              _this1.transferForm.targetCourseId = '';\n\n              // Show success message\n              _this1.$store.dispatch('showToast', {\n                message: \"Student \".concat(studentName, \" has been transferred to \").concat((targetCourse === null || targetCourse === void 0 ? void 0 : targetCourse.code) || 'target course'),\n                type: 'success'\n              });\n              _context9.n = 4;\n              break;\n            case 3:\n              _context9.p = 3;\n              _t6 = _context9.v;\n              console.error('Error transferring student:', _t6);\n              _this1.$store.dispatch('showToast', {\n                message: 'Error transferring student. Please try again.',\n                type: 'error'\n              });\n            case 4:\n              return _context9.a(2);\n          }\n        }, _callee9, null, [[1, 3]]);\n      }))();\n    },\n    exportAllEnrollments: function exportAllEnrollments() {\n      var _this10 = this,\n        _this$selectedCourse2;\n      if (!this.currentCourseEnrollments.length) {\n        this.$store.dispatch('showToast', {\n          message: 'No enrollments to export',\n          type: 'warning'\n        });\n        return;\n      }\n\n      // Create CSV content\n      var headers = ['Course Code', 'Course Name', 'Student Name', 'Matric Number', 'Email', 'Academic Year', 'Semester', 'Enrolled Date'];\n      var csvContent = headers.join(',') + '\\n';\n      this.currentCourseEnrollments.forEach(function (enrollment) {\n        var _this10$selectedCours, _this10$selectedCours2;\n        var row = [((_this10$selectedCours = _this10.selectedCourse) === null || _this10$selectedCours === void 0 ? void 0 : _this10$selectedCours.code) || 'N/A', \"\\\"\".concat(((_this10$selectedCours2 = _this10.selectedCourse) === null || _this10$selectedCours2 === void 0 ? void 0 : _this10$selectedCours2.name) || 'N/A', \"\\\"\"), \"\\\"\".concat(enrollment.student_name, \"\\\"\"), enrollment.matric_number || 'N/A', enrollment.student_email, enrollment.academic_year, enrollment.semester, _this10.formatDate(enrollment.enrolled_at)];\n        csvContent += row.join(',') + '\\n';\n      });\n\n      // Download CSV\n      var blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n      });\n      var url = URL.createObjectURL(blob);\n      var link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', \"\".concat(((_this$selectedCourse2 = this.selectedCourse) === null || _this$selectedCourse2 === void 0 ? void 0 : _this$selectedCourse2.code) || 'course', \"_enrollments.csv\"));\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    },\n    logout: function logout() {\n      var _this11 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {\n        return _regenerator().w(function (_context0) {\n          while (1) switch (_context0.n) {\n            case 0:\n              if (!confirm('Are you sure you want to logout?')) {\n                _context0.n = 2;\n                break;\n              }\n              _context0.n = 1;\n              return _this11.$store.dispatch('auth/logout');\n            case 1:\n              _this11.$router.push('/login');\n            case 2:\n              return _context0.a(2);\n          }\n        }, _callee0);\n      }))();\n    },\n    // Persistence methods for transferred students\n    saveTransferredStudents: function saveTransferredStudents() {\n      try {\n        var transfersObj = {};\n        this.transferredStudents.forEach(function (students, courseId) {\n          transfersObj[courseId] = students;\n        });\n        var transfersOutObj = {};\n        this.transferredOutStudents.forEach(function (enrollmentIds, courseId) {\n          transfersOutObj[courseId] = enrollmentIds;\n        });\n        localStorage.setItem('enrollmentTransfers', JSON.stringify({\n          transfersIn: transfersObj,\n          transfersOut: transfersOutObj\n        }));\n      } catch (error) {\n        console.error('Error saving transferred students:', error);\n      }\n    },\n    loadTransferredStudents: function loadTransferredStudents() {\n      var _this12 = this;\n      try {\n        var saved = localStorage.getItem('enrollmentTransfers');\n        if (saved) {\n          var data = JSON.parse(saved);\n\n          // Load transfers IN\n          this.transferredStudents = new Map();\n          if (data.transfersIn) {\n            Object.keys(data.transfersIn).forEach(function (courseId) {\n              _this12.transferredStudents.set(parseInt(courseId), data.transfersIn[courseId]);\n            });\n          }\n\n          // Load transfers OUT\n          this.transferredOutStudents = new Map();\n          if (data.transfersOut) {\n            Object.keys(data.transfersOut).forEach(function (courseId) {\n              _this12.transferredOutStudents.set(parseInt(courseId), data.transfersOut[courseId]);\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error loading transferred students:', error);\n        this.transferredStudents = new Map();\n        this.transferredOutStudents = new Map();\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","bootstrap","name","data","selectedCourseId","searchQuery","currentCourseEnrollments","allStudents","bulkEnrollForm","studentIds","academicYear","semester","enrollmentToRemove","transferForm","student","targetCourseId","transferredStudents","Map","transferredOutStudents","computed","_objectSpread","userInfo","getUser","courses","getCourses","availableStudents","getAvailableStudents","selectedCourse","_this$courses","_this","find","c","id","filteredCourseEnrollments","query","toLowerCase","filter","enrollment","student_name","includes","student_email","matric_number","totalStudents","_this$allStudents","length","totalCourses","_this$courses2","totalEnrollments","_this$allStudents2","reduce","total","enrollment_count","availableTargetCourses","_this$courses3","_this2","course","created","_this3","_asyncToGenerator","_regenerator","m","_callee","w","_context","n","loadTransferredStudents","loadTemporaryData","a","methods","_this4","_callee2","_context2","$store","commit","code","academic_year","lecturer_id","lecturer_name","email","role","console","log","error","loadInitialData","_this5","_callee3","_t","_context3","p","Promise","all","dispatch","loadAllStudents","v","message","type","_this6","_callee4","response","_t2","_context4","user","loadCourseEnrollments","_this7","_callee5","currentCourseId","transferredOutIds","transferredToThisCourse","_context5","enrollment_id","student_id","enrolled_at","parseInt","has","get","concat","loadCourseEnrollmentsOriginal","_this8","_callee6","_t3","_context6","getters","getLecturerName","lecturerId","getUsers","Array","isArray","lecturer","u","getStudentInitials","split","map","join","toUpperCase","formatDate","dateString","Date","toLocaleDateString","day","month","year","openBulkEnrollModal","_this$selectedCourse","modal","Modal","document","getElementById","show","toggleSelectAllStudents","event","target","checked","s","bulkEnrollStudents","_this9","_callee7","result","modalElement","_t4","_context7","courseId","getInstance","hide","confirmRemoveEnrollment","removeEnrollment","_this0","_callee8","_t5","_context8","enrollmentId","viewStudentDetails","studentId","$router","push","openStudentEnrollmentHistoryModal","openTransferStudentModal","arguments","undefined","transferStudent","_this1","_callee9","targetCourse","studentName","studentIndex","enrollmentToTransfer","_t6","_context9","findIndex","e","set","splice","course_id","course_code","course_name","toISOString","saveTransferredStudents","exportAllEnrollments","_this10","_this$selectedCourse2","headers","csvContent","forEach","_this10$selectedCours","_this10$selectedCours2","row","blob","Blob","url","URL","createObjectURL","link","createElement","href","setAttribute","body","appendChild","click","removeChild","logout","_this11","_callee0","_context0","confirm","transfersObj","students","transfersOutObj","enrollmentIds","localStorage","setItem","JSON","stringify","transfersIn","transfersOut","_this12","saved","getItem","parse","Object","keys"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\admin\\EnrollmentManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"admin-enrollment-management\">\r\n    <!-- Dashboard Header -->\r\n    <div class=\"dashboard-header d-flex justify-content-between align-items-center mb-4\">\r\n      <h1 class=\"mb-0\">Student Enrollment Management</h1>\r\n      <div class=\"user-info d-flex align-items-center\">\r\n        <span class=\"me-3\">Welcome, {{ userInfo.name }}</span>\r\n        <button class=\"btn btn-outline-danger btn-sm\" @click=\"logout\">\r\n          <i class=\"fas fa-sign-out-alt me-1\"></i>\r\n          Logout\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Stats Overview -->\r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-md-3\">\r\n        <div class=\"card bg-primary text-white\">\r\n          <div class=\"card-body\">\r\n            <div class=\"d-flex justify-content-between\">\r\n              <div>\r\n                <h5 class=\"card-title\">Total Students</h5>\r\n                <h2 class=\"mb-0\">{{ totalStudents }}</h2>\r\n              </div>\r\n              <div class=\"align-self-center\">\r\n                <i class=\"fas fa-user-graduate fa-2x\"></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"card bg-success text-white\">\r\n          <div class=\"card-body\">\r\n            <div class=\"d-flex justify-content-between\">\r\n              <div>\r\n                <h5 class=\"card-title\">Total Courses</h5>\r\n                <h2 class=\"mb-0\">{{ totalCourses }}</h2>\r\n              </div>\r\n              <div class=\"align-self-center\">\r\n                <i class=\"fas fa-book fa-2x\"></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"card bg-info text-white\">\r\n          <div class=\"card-body\">\r\n            <div class=\"d-flex justify-content-between\">\r\n              <div>\r\n                <h5 class=\"card-title\">Total Enrollments</h5>\r\n                <h2 class=\"mb-0\">{{ totalEnrollments }}</h2>\r\n              </div>\r\n              <div class=\"align-self-center\">\r\n                <i class=\"fas fa-users fa-2x\"></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-3\">\r\n        <div class=\"card bg-warning text-white\">\r\n          <div class=\"card-body\">\r\n            <div class=\"d-flex justify-content-between\">\r\n              <div>\r\n                <h5 class=\"card-title\">Current Semester</h5>\r\n                <h2 class=\"mb-0\">Fall 2025</h2>\r\n              </div>\r\n              <div class=\"align-self-center\">\r\n                <i class=\"fas fa-calendar fa-2x\"></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Course Selection and Management -->\r\n    <div class=\"row\">\r\n      <div class=\"col-md-8\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <div class=\"d-flex justify-content-between align-items-center\">\r\n              <h5 class=\"mb-0\">Course Enrollments</h5>\r\n              <div class=\"d-flex gap-2\">\r\n                <select class=\"form-select form-select-sm\" v-model=\"selectedCourseId\" @change=\"loadCourseEnrollments\" style=\"width: 250px;\">\r\n                  <option value=\"\">Select a course...</option>\r\n                  <option v-for=\"course in courses\" :key=\"course.id\" :value=\"course.id\">\r\n                    {{ course.code }} - {{ course.name }}\r\n                  </option>\r\n                </select>\r\n                <button class=\"btn btn-success btn-sm\" @click=\"openBulkEnrollModal\" :disabled=\"!selectedCourseId\">\r\n                  <i class=\"fas fa-users me-1\"></i>Bulk Enroll\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"!selectedCourseId\" class=\"text-center py-4\">\r\n              <i class=\"fas fa-book-open fa-3x text-muted mb-3\"></i>\r\n              <h6 class=\"text-muted\">Select a course to manage enrollments</h6>\r\n              <p class=\"text-muted\">Choose a course from the dropdown above to view and manage student enrollments.</p>\r\n            </div>\r\n\r\n            <div v-else-if=\"isLoading\" class=\"text-center py-4\">\r\n              <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n              </div>\r\n            </div>\r\n\r\n            <div v-else-if=\"currentCourseEnrollments.length === 0\" class=\"text-center py-4\">\r\n              <i class=\"fas fa-users fa-3x text-muted mb-3\"></i>\r\n              <h6 class=\"text-muted\">No students enrolled</h6>\r\n              <p class=\"text-muted\">This course has no enrolled students yet.</p>\r\n              <button class=\"btn btn-primary\" @click=\"openBulkEnrollModal\">\r\n                <i class=\"fas fa-user-plus me-2\"></i>Enroll Students\r\n              </button>\r\n            </div>\r\n\r\n            <div v-else>\r\n              <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n                <div>\r\n                  <span class=\"badge bg-primary me-2\">{{ currentCourseEnrollments.length }} enrolled</span>\r\n                  <span class=\"text-muted\">{{ selectedCourse?.code }} - {{ selectedCourse?.name }}</span>\r\n                </div>\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control form-control-sm\" \r\n                  placeholder=\"Search students...\"\r\n                  v-model=\"searchQuery\"\r\n                  style=\"width: 200px;\"\r\n                >\r\n              </div>\r\n\r\n              <div class=\"table-responsive\">\r\n                <table class=\"table table-hover align-middle\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Student</th>\r\n                      <th>Matric Number</th>\r\n                      <th>Email</th>\r\n                      <th>Academic Year</th>\r\n                      <th>Semester</th>\r\n                      <th>Enrolled Date</th>\r\n                      <th>Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr v-for=\"enrollment in filteredCourseEnrollments\" :key=\"enrollment.enrollment_id\">\r\n                      <td>\r\n                        <div class=\"d-flex align-items-center\">\r\n                          <div class=\"avatar avatar-sm me-3\">\r\n                            {{ getStudentInitials(enrollment.student_name) }}\r\n                          </div>\r\n                          <strong>{{ enrollment.student_name }}</strong>\r\n                        </div>\r\n                      </td>\r\n                      <td>{{ enrollment.matric_number || 'N/A' }}</td>\r\n                      <td>{{ enrollment.student_email }}</td>\r\n                      <td>{{ enrollment.academic_year }}</td>\r\n                      <td>{{ enrollment.semester }}</td>\r\n                      <td>{{ formatDate(enrollment.enrolled_at) }}</td>\r\n                      <td>\r\n                        <div class=\"btn-group btn-group-sm\">\r\n                          <button \r\n                            class=\"btn btn-outline-info\"\r\n                            @click=\"viewStudentDetails(enrollment.student_id)\"\r\n                            title=\"View Student Details\"\r\n                          >\r\n                            <i class=\"fas fa-eye\"></i>\r\n                          </button>\r\n                          <button \r\n                            class=\"btn btn-outline-warning\"\r\n                            @click=\"openTransferStudentModal(enrollment)\"\r\n                            title=\"Transfer to Another Course\"\r\n                          >\r\n                            <i class=\"fas fa-exchange-alt\"></i>\r\n                          </button>\r\n                          <button \r\n                            class=\"btn btn-outline-danger\" \r\n                            @click=\"confirmRemoveEnrollment(enrollment)\"\r\n                            title=\"Remove from Course\"\r\n                          >\r\n                            <i class=\"fas fa-user-minus\"></i>\r\n                          </button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-4\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"mb-0\">Quick Actions</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"d-grid gap-2\">\r\n              <button class=\"btn btn-primary\" @click=\"openStudentEnrollmentHistoryModal\">\r\n                <i class=\"fas fa-history me-2\"></i>View Student History\r\n              </button>\r\n              <button class=\"btn btn-info\" @click=\"exportAllEnrollments\">\r\n                <i class=\"fas fa-file-export me-2\"></i>Export All Enrollments\r\n              </button>\r\n              <button class=\"btn btn-warning\" @click=\"openTransferStudentModal\">\r\n                <i class=\"fas fa-exchange-alt me-2\"></i>Transfer Student\r\n              </button>\r\n              <router-link to=\"/admin/dashboard\" class=\"btn btn-outline-secondary\">\r\n                <i class=\"fas fa-arrow-left me-2\"></i>Back to Dashboard\r\n              </router-link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card mt-3\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"mb-0\">Course Statistics</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"selectedCourse\">\r\n              <div class=\"stat-item\">\r\n                <strong>Course Code:</strong> {{ selectedCourse.code }}\r\n              </div>\r\n              <div class=\"stat-item\">\r\n                <strong>Course Name:</strong> {{ selectedCourse.name }}\r\n              </div>\r\n              <div class=\"stat-item\">\r\n                <strong>Lecturer:</strong> {{ getLecturerName(selectedCourse.lecturer_id) }}\r\n              </div>\r\n              <div class=\"stat-item\">\r\n                <strong>Academic Year:</strong> {{ selectedCourse.academic_year || 'N/A' }}\r\n              </div>\r\n              <div class=\"stat-item\">\r\n                <strong>Semester:</strong> {{ selectedCourse.semester || 'N/A' }}\r\n              </div>\r\n              <div class=\"stat-item\">\r\n                <strong>Enrolled Students:</strong> {{ currentCourseEnrollments.length }}\r\n              </div>\r\n            </div>\r\n            <div v-else class=\"text-muted text-center\">\r\n              Select a course to view statistics\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Bulk Enrollment Modal -->\r\n    <div class=\"modal fade\" id=\"bulkEnrollModal\" tabindex=\"-1\" aria-labelledby=\"bulkEnrollModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"bulkEnrollModalLabel\">Bulk Enroll Students</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <div v-if=\"selectedCourse\" class=\"alert alert-info\">\r\n              <strong>Course:</strong> {{ selectedCourse.code }} - {{ selectedCourse.name }}\r\n            </div>\r\n            \r\n            <form @submit.prevent=\"bulkEnrollStudents\">\r\n              <div class=\"row mb-3\">\r\n                <div class=\"col-md-6\">\r\n                  <label for=\"bulkAcademicYear\" class=\"form-label\">Academic Year</label>\r\n                  <input \r\n                    type=\"text\" \r\n                    class=\"form-control\" \r\n                    id=\"bulkAcademicYear\" \r\n                    v-model=\"bulkEnrollForm.academicYear\"\r\n                    placeholder=\"e.g., 2025-2026\"\r\n                    required\r\n                  >\r\n                </div>\r\n                <div class=\"col-md-6\">\r\n                  <label for=\"bulkSemester\" class=\"form-label\">Semester</label>\r\n                  <select class=\"form-select\" id=\"bulkSemester\" v-model=\"bulkEnrollForm.semester\" required>\r\n                    <option value=\"\">Select Semester</option>\r\n                    <option value=\"Fall\">Fall</option>\r\n                    <option value=\"Spring\">Spring</option>\r\n                    <option value=\"Summer\">Summer</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Select Students to Enroll</label>\r\n                <div class=\"d-flex justify-content-between align-items-center mb-2\">\r\n                  <div class=\"form-check\">\r\n                    <input \r\n                      class=\"form-check-input\" \r\n                      type=\"checkbox\" \r\n                      id=\"selectAllStudents\"\r\n                      @change=\"toggleSelectAllStudents\"\r\n                      :checked=\"bulkEnrollForm.studentIds.length === availableStudents.length && availableStudents.length > 0\"\r\n                    >\r\n                    <label class=\"form-check-label\" for=\"selectAllStudents\">\r\n                      Select All ({{ availableStudents.length }} available)\r\n                    </label>\r\n                  </div>\r\n                  <span class=\"badge bg-primary\">{{ bulkEnrollForm.studentIds.length }} selected</span>\r\n                </div>\r\n                \r\n                <div class=\"student-list\" style=\"max-height: 300px; overflow-y: auto;\">\r\n                  <div v-for=\"student in availableStudents\" :key=\"student.id\" class=\"form-check\">\r\n                    <input \r\n                      class=\"form-check-input\" \r\n                      type=\"checkbox\" \r\n                      :id=\"`bulk-student-${student.id}`\"\r\n                      :value=\"student.id\"\r\n                      v-model=\"bulkEnrollForm.studentIds\"\r\n                    >\r\n                    <label class=\"form-check-label\" :for=\"`bulk-student-${student.id}`\">\r\n                      <strong>{{ student.name }}</strong> - {{ student.email }}\r\n                      <small class=\"text-muted d-block\">{{ student.matric_number || 'No matric number' }}</small>\r\n                      <small class=\"text-muted\">{{ student.enrollment_count }} current enrollments</small>\r\n                    </label>\r\n                  </div>\r\n                  \r\n                  <div v-if=\"availableStudents.length === 0\" class=\"text-center py-3 text-muted\">\r\n                    <div v-if=\"isLoading\">Loading available students...</div>\r\n                    <div v-else>No students available for enrollment</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"d-flex justify-content-end gap-2\">\r\n                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n                <button \r\n                  type=\"submit\" \r\n                  class=\"btn btn-primary\" \r\n                  :disabled=\"isLoading || bulkEnrollForm.studentIds.length === 0\"\r\n                >\r\n                  <span v-if=\"isLoading\" class=\"spinner-border spinner-border-sm me-2\"></span>\r\n                  Enroll {{ bulkEnrollForm.studentIds.length }} Students\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Remove Enrollment Confirmation Modal -->\r\n    <div class=\"modal fade\" id=\"removeEnrollmentModal\" tabindex=\"-1\" aria-labelledby=\"removeEnrollmentModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"removeEnrollmentModalLabel\">Remove Student Enrollment</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <div v-if=\"enrollmentToRemove\">\r\n              <div class=\"alert alert-warning\">\r\n                <i class=\"fas fa-exclamation-triangle me-2\"></i>\r\n                <strong>Warning:</strong> This action will remove the student from the course and delete all their marks.\r\n              </div>\r\n              <p>Are you sure you want to remove <strong>{{ enrollmentToRemove.student_name }}</strong> from <strong>{{ selectedCourse?.code }}</strong>?</p>\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n            <button \r\n              type=\"button\" \r\n              class=\"btn btn-danger\" \r\n              @click=\"removeEnrollment\"\r\n              :disabled=\"isLoading\"\r\n            >\r\n              <span v-if=\"isLoading\" class=\"spinner-border spinner-border-sm me-2\"></span>\r\n              Remove Student\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Transfer Student Modal -->\r\n    <div class=\"modal fade\" id=\"transferStudentModal\" tabindex=\"-1\" aria-labelledby=\"transferStudentModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"transferStudentModalLabel\">Transfer Student</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <div v-if=\"transferForm.student\">\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Student to Transfer:</label>\r\n                <div class=\"card\">\r\n                  <div class=\"card-body py-2\">\r\n                    <strong>{{ transferForm.student.student_name }}</strong>\r\n                    <br>\r\n                    <small class=\"text-muted\">{{ transferForm.student.student_email }}</small>\r\n                    <br>\r\n                    <small class=\"text-muted\">Matric: {{ transferForm.student.matric_number }}</small>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">From Course:</label>\r\n                <div class=\"card\">\r\n                  <div class=\"card-body py-2\">\r\n                    <strong>{{ selectedCourse.code }} - {{ selectedCourse.name }}</strong>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"mb-3\">\r\n                <label for=\"targetCourse\" class=\"form-label\">Transfer to Course:</label>\r\n                <select \r\n                  id=\"targetCourse\" \r\n                  v-model=\"transferForm.targetCourseId\" \r\n                  class=\"form-select\"\r\n                  required\r\n                >\r\n                  <option value=\"\">Select target course...</option>\r\n                  <option \r\n                    v-for=\"course in availableTargetCourses\" \r\n                    :key=\"course.id\" \r\n                    :value=\"course.id\"\r\n                  >\r\n                    {{ course.code }} - {{ course.name }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n              \r\n              <div class=\"alert alert-warning\">\r\n                <i class=\"fas fa-exclamation-triangle me-2\"></i>\r\n                This will remove the student from the current course and enroll them in the selected target course.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n            <button \r\n              type=\"button\" \r\n              class=\"btn btn-warning\" \r\n              @click=\"transferStudent\"\r\n              :disabled=\"isLoading || !transferForm.targetCourseId\"\r\n            >\r\n              <span v-if=\"isLoading\" class=\"spinner-border spinner-border-sm me-2\"></span>\r\n              Transfer Student\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex';\r\nimport * as bootstrap from 'bootstrap';\r\n\r\nexport default {\r\n  name: 'AdminEnrollmentManagement',\r\n  data() {\r\n    return {\r\n      selectedCourseId: '',\r\n      searchQuery: '',\r\n      currentCourseEnrollments: [],\r\n      allStudents: [],\r\n      bulkEnrollForm: {\r\n        studentIds: [],\r\n        academicYear: '2025-2026',\r\n        semester: 'Fall'\r\n      },\r\n      enrollmentToRemove: null,\r\n      transferForm: {\r\n        student: null,\r\n        targetCourseId: ''\r\n      },\r\n      transferredStudents: new Map(), // Store transferred students by target course ID\r\n      transferredOutStudents: new Map() // Store students transferred OUT of each course\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters('auth', ['getUser']),\r\n    ...mapGetters('courses', ['getCourses']),\r\n    ...mapGetters('enrollments', ['getAvailableStudents', 'isLoading']),\r\n    ...mapGetters('users', ['getUsers']),\r\n    \r\n    userInfo() {\r\n      return this.getUser || { name: 'Admin' };\r\n    },\r\n    \r\n    courses() {\r\n      return this.getCourses || [];\r\n    },\r\n    \r\n    availableStudents() {\r\n      return this.getAvailableStudents || [];\r\n    },\r\n    \r\n    selectedCourse() {\r\n      return this.courses?.find(c => c.id == this.selectedCourseId) || null;\r\n    },\r\n    \r\n    filteredCourseEnrollments() {\r\n      if (!this.searchQuery) return this.currentCourseEnrollments || [];\r\n      \r\n      const query = this.searchQuery.toLowerCase();\r\n      return (this.currentCourseEnrollments || []).filter(enrollment => \r\n        enrollment.student_name.toLowerCase().includes(query) ||\r\n        enrollment.student_email.toLowerCase().includes(query) ||\r\n        (enrollment.matric_number && enrollment.matric_number.toLowerCase().includes(query))\r\n      );\r\n    },\r\n    \r\n    totalStudents() {\r\n      return this.allStudents?.length || 0;\r\n    },\r\n    \r\n    totalCourses() {\r\n      return this.courses?.length || 0;\r\n    },\r\n    \r\n    totalEnrollments() {\r\n      return this.allStudents?.reduce((total, student) => total + (student.enrollment_count || 0), 0) || 0;\r\n    },\r\n    \r\n    availableTargetCourses() {\r\n      // Return all courses except the currently selected one\r\n      return this.courses?.filter(course => course.id != this.selectedCourseId) || [];\r\n    }\r\n  },\r\n  async created() {\r\n    // Load any previously transferred students from localStorage\r\n    this.loadTransferredStudents();\r\n    await this.loadTemporaryData();\r\n  },\r\n  methods: {\r\n    async loadTemporaryData() {\r\n      try {\r\n        // Load temporary courses\r\n        this.$store.commit('courses/SET_COURSES', [\r\n          {\r\n            id: 1,\r\n            code: 'CS101',\r\n            name: 'Introduction to Programming',\r\n            academic_year: '2025-2026',\r\n            semester: 'Fall',\r\n            lecturer_id: 2,\r\n            lecturer_name: 'Lecturer One'\r\n          },\r\n          {\r\n            id: 2,\r\n            code: 'CS201',\r\n            name: 'Data Structures',\r\n            academic_year: '2025-2026',\r\n            semester: 'Fall',\r\n            lecturer_id: 2,\r\n            lecturer_name: 'Lecturer One'\r\n          }\r\n        ]);\r\n        \r\n        // Load temporary students\r\n        this.allStudents = [\r\n          {\r\n            id: 4,\r\n            name: 'Student One',\r\n            email: 'student1@example.com',\r\n            role: 'student',\r\n            matric_number: 'S123456',\r\n            enrollment_count: 2\r\n          },\r\n          {\r\n            id: 5,\r\n            name: 'Student Two',\r\n            email: 'student2@example.com',\r\n            role: 'student',\r\n            matric_number: 'S123457',\r\n            enrollment_count: 1\r\n          },\r\n          {\r\n            id: 6,\r\n            name: 'Student Three',\r\n            email: 'student3@example.com',\r\n            role: 'student',\r\n            matric_number: 'S123458',\r\n            enrollment_count: 0\r\n          }\r\n        ];\r\n        \r\n        // Load temporary users (including lecturers) into the store\r\n        this.$store.commit('users/SET_USERS', [\r\n          {\r\n            id: 1,\r\n            name: 'Admin User',\r\n            email: 'admin@example.com',\r\n            role: 'admin'\r\n          },\r\n          {\r\n            id: 2,\r\n            name: 'Lecturer One',\r\n            email: 'lecturer1@example.com',\r\n            role: 'lecturer'\r\n          },\r\n          {\r\n            id: 3,\r\n            name: 'Advisor One',\r\n            email: 'advisor1@example.com',\r\n            role: 'advisor'\r\n          },\r\n          {\r\n            id: 4,\r\n            name: 'Student One',\r\n            email: 'student1@example.com',\r\n            role: 'student',\r\n            matric_number: 'S123456'\r\n          },\r\n          {\r\n            id: 5,\r\n            name: 'Student Two',\r\n            email: 'student2@example.com',\r\n            role: 'student',\r\n            matric_number: 'S123457'\r\n          },\r\n          {\r\n            id: 6,\r\n            name: 'Student Three',\r\n            email: 'student3@example.com',\r\n            role: 'student',\r\n            matric_number: 'S123458'\r\n          }\r\n        ]);\r\n        \r\n        console.log('Temporary admin enrollment data loaded');\r\n      } catch (error) {\r\n        console.error('Error loading temporary data:', error);\r\n      }\r\n    },\r\n\r\n    async loadInitialData() {\r\n      try {\r\n        // Load courses and all students\r\n        await Promise.all([\r\n          this.$store.dispatch('courses/fetchCourses'),\r\n          this.loadAllStudents()\r\n        ]);\r\n      } catch (error) {\r\n        console.error('Error loading initial data:', error);\r\n        this.$store.dispatch('showToast', {\r\n          message: 'Error loading data',\r\n          type: 'error'\r\n        });\r\n      }\r\n    },\r\n    \r\n    async loadAllStudents() {\r\n      try {\r\n        const response = await this.$store.dispatch('users/fetchUsers');\r\n        this.allStudents = response.filter(user => user.role === 'student');\r\n      } catch (error) {\r\n        console.error('Error loading students:', error);\r\n      }\r\n    },\r\n    \r\n    async loadCourseEnrollments() {\r\n      if (!this.selectedCourseId) {\r\n        this.currentCourseEnrollments = [];\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        console.log('Loading enrollments for course:', this.selectedCourseId);\r\n        \r\n        // Load temporary course enrollments based on selected course\r\n        if (this.selectedCourseId == 1) {\r\n          this.currentCourseEnrollments = [\r\n            {\r\n              enrollment_id: 1,\r\n              student_id: 4,\r\n              student_name: 'Student One',\r\n              student_email: 'student1@example.com',\r\n              matric_number: 'S123456',\r\n              academic_year: '2025-2026',\r\n              semester: 'Fall',\r\n              enrolled_at: '2025-01-15'\r\n            },\r\n            {\r\n              enrollment_id: 2,\r\n              student_id: 5,\r\n              student_name: 'Student Two',\r\n              student_email: 'student2@example.com',\r\n              matric_number: 'S123457',\r\n              academic_year: '2025-2026',\r\n              semester: 'Fall',\r\n              enrolled_at: '2025-01-16'\r\n            }\r\n          ];\r\n          \r\n          console.log('Set enrollments for CS101:', this.currentCourseEnrollments);\r\n          \r\n          // Set available students for this course\r\n          this.$store.commit('enrollments/SET_AVAILABLE_STUDENTS', [\r\n            {\r\n              id: 6,\r\n              name: 'Student Three',\r\n              email: 'student3@example.com',\r\n              matric_number: 'S123458',\r\n              enrollment_count: 0\r\n            }\r\n          ]);\r\n        } else if (this.selectedCourseId == 2) {\r\n          this.currentCourseEnrollments = [\r\n            {\r\n              enrollment_id: 3,\r\n              student_id: 5,\r\n              student_name: 'Student Two',\r\n              student_email: 'student2@example.com',\r\n              matric_number: 'S123457',\r\n              academic_year: '2025-2026',\r\n              semester: 'Fall',\r\n              enrolled_at: '2025-01-17'\r\n            }\r\n          ];\r\n          \r\n          console.log('Set enrollments for CS201:', this.currentCourseEnrollments);\r\n          \r\n          // Set available students for this course\r\n          this.$store.commit('enrollments/SET_AVAILABLE_STUDENTS', [\r\n            {\r\n              id: 4,\r\n              name: 'Student One',\r\n              email: 'student1@example.com',\r\n              matric_number: 'S123456',\r\n              enrollment_count: 1\r\n            },\r\n            {\r\n              id: 6,\r\n              name: 'Student Three',\r\n              email: 'student3@example.com',\r\n              matric_number: 'S123458',\r\n              enrollment_count: 0\r\n            }\r\n          ]);\r\n        } else {\r\n          this.currentCourseEnrollments = [];\r\n          console.log('No enrollments for course:', this.selectedCourseId);\r\n        }\r\n        \r\n        // Filter out students that have been transferred OUT of this course\r\n        const currentCourseId = parseInt(this.selectedCourseId);\r\n        if (this.transferredOutStudents && this.transferredOutStudents.has(currentCourseId)) {\r\n          const transferredOutIds = this.transferredOutStudents.get(currentCourseId);\r\n          this.currentCourseEnrollments = this.currentCourseEnrollments.filter(\r\n            enrollment => !transferredOutIds.includes(enrollment.enrollment_id)\r\n          );\r\n        }\r\n        \r\n        // Add any transferred students to this course\r\n        if (this.transferredStudents && this.transferredStudents.has(parseInt(this.selectedCourseId))) {\r\n          const transferredToThisCourse = this.transferredStudents.get(parseInt(this.selectedCourseId));\r\n          this.currentCourseEnrollments = this.currentCourseEnrollments.concat(transferredToThisCourse);\r\n        }\r\n        \r\n        console.log('Course enrollments loaded for course:', this.selectedCourseId);\r\n      } catch (error) {\r\n        console.error('Error loading course enrollments:', error);\r\n        this.$store.dispatch('showToast', {\r\n          message: 'Error loading course enrollments',\r\n          type: 'error'\r\n        });\r\n      }\r\n    },\r\n\r\n    async loadCourseEnrollmentsOriginal() {\r\n      if (!this.selectedCourseId) {\r\n        this.currentCourseEnrollments = [];\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        await Promise.all([\r\n          this.$store.dispatch('enrollments/fetchCourseEnrollments', this.selectedCourseId),\r\n          this.$store.dispatch('enrollments/fetchAvailableStudents', this.selectedCourseId)\r\n        ]);\r\n        \r\n        this.currentCourseEnrollments = this.$store.getters['enrollments/getEnrollments'];\r\n      } catch (error) {\r\n        console.error('Error loading course enrollments:', error);\r\n        this.$store.dispatch('showToast', {\r\n          message: 'Error loading course enrollments',\r\n          type: 'error'\r\n        });\r\n      }\r\n    },\r\n    \r\n    getLecturerName(lecturerId) {\r\n      if (!this.getUsers || !Array.isArray(this.getUsers)) {\r\n        return 'Unknown Lecturer';\r\n      }\r\n      const lecturer = this.getUsers.find(u => u.id === lecturerId && u.role === 'lecturer');\r\n      return lecturer ? lecturer.name : 'Unknown Lecturer';\r\n    },\r\n    \r\n    getStudentInitials(name) {\r\n      return name\r\n        .split(' ')\r\n        .map(n => n[0])\r\n        .join('')\r\n        .toUpperCase();\r\n    },\r\n    \r\n    formatDate(dateString) {\r\n      if (!dateString) return 'N/A';\r\n      return new Date(dateString).toLocaleDateString('en-GB', {\r\n        day: 'numeric',\r\n        month: 'short',\r\n        year: 'numeric'\r\n      });\r\n    },\r\n    \r\n    openBulkEnrollModal() {\r\n      this.bulkEnrollForm = {\r\n        studentIds: [],\r\n        academicYear: this.selectedCourse?.academic_year || '2025-2026',\r\n        semester: 'Fall'\r\n      };\r\n      \r\n      const modal = new bootstrap.Modal(document.getElementById('bulkEnrollModal'));\r\n      modal.show();\r\n    },\r\n    \r\n    toggleSelectAllStudents(event) {\r\n      if (event.target.checked) {\r\n        this.bulkEnrollForm.studentIds = this.availableStudents.map(s => s.id);\r\n      } else {\r\n        this.bulkEnrollForm.studentIds = [];\r\n      }\r\n    },\r\n    \r\n    async bulkEnrollStudents() {\r\n      try {\r\n        const result = await this.$store.dispatch('enrollments/bulkEnrollStudents', {\r\n          courseId: this.selectedCourseId,\r\n          studentIds: this.bulkEnrollForm.studentIds,\r\n          academicYear: this.bulkEnrollForm.academicYear,\r\n          semester: this.bulkEnrollForm.semester\r\n        });\r\n        \r\n        // Close modal\r\n        const modalElement = document.getElementById('bulkEnrollModal');\r\n        const modal = bootstrap.Modal.getInstance(modalElement);\r\n        modal.hide();\r\n        \r\n        // Refresh enrollments\r\n        await this.loadCourseEnrollments();\r\n        \r\n        this.$store.dispatch('showToast', {\r\n          message: result.message,\r\n          type: 'success'\r\n        });\r\n      } catch (error) {\r\n        console.error('Error bulk enrolling students:', error);\r\n        this.$store.dispatch('showToast', {\r\n          message: error.message || 'Error enrolling students',\r\n          type: 'error'\r\n        });\r\n      }\r\n    },\r\n    \r\n    confirmRemoveEnrollment(enrollment) {\r\n      this.enrollmentToRemove = enrollment;\r\n      \r\n      const modal = new bootstrap.Modal(document.getElementById('removeEnrollmentModal'));\r\n      modal.show();\r\n    },\r\n    \r\n    async removeEnrollment() {\r\n      try {\r\n        await this.$store.dispatch('enrollments/removeEnrollment', {\r\n          enrollmentId: this.enrollmentToRemove.enrollment_id,\r\n          courseId: this.selectedCourseId\r\n        });\r\n        \r\n        // Close modal\r\n        const modalElement = document.getElementById('removeEnrollmentModal');\r\n        const modal = bootstrap.Modal.getInstance(modalElement);\r\n        modal.hide();\r\n        \r\n        // Refresh enrollments\r\n        await this.loadCourseEnrollments();\r\n        \r\n        this.$store.dispatch('showToast', {\r\n          message: 'Student removed from course successfully!',\r\n          type: 'success'\r\n        });\r\n        \r\n        this.enrollmentToRemove = null;\r\n      } catch (error) {\r\n        console.error('Error removing enrollment:', error);\r\n        this.$store.dispatch('showToast', {\r\n          message: error.message || 'Error removing student',\r\n          type: 'error'\r\n        });\r\n      }\r\n    },\r\n    \r\n    viewStudentDetails(studentId) {\r\n      // Navigate to student details page\r\n      this.$router.push(`/admin/student/${studentId}`);\r\n    },\r\n    \r\n    openStudentEnrollmentHistoryModal() {\r\n      // This could open a modal to search and view student enrollment history\r\n      this.$store.dispatch('showToast', {\r\n        message: 'Student enrollment history feature coming soon',\r\n        type: 'info'\r\n      });\r\n    },\r\n    \r\n    openTransferStudentModal(student = null) {\r\n      if (!student) {\r\n        this.$store.dispatch('showToast', {\r\n          message: 'Please select a student to transfer from the enrollment list',\r\n          type: 'warning'\r\n        });\r\n        return;\r\n      }\r\n      \r\n      if (!this.selectedCourseId) {\r\n        this.$store.dispatch('showToast', {\r\n          message: 'Please select a course first',\r\n          type: 'warning'\r\n        });\r\n        return;\r\n      }\r\n      \r\n      // Set up transfer form\r\n      this.transferForm.student = student;\r\n      this.transferForm.targetCourseId = '';\r\n      \r\n      // Show modal\r\n      const modal = new bootstrap.Modal(document.getElementById('transferStudentModal'));\r\n      modal.show();\r\n    },\r\n    \r\n    async transferStudent() {\r\n      if (!this.transferForm.student || !this.transferForm.targetCourseId) {\r\n        this.$store.dispatch('showToast', {\r\n          message: 'Please select a target course',\r\n          type: 'error'\r\n        });\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        // Find target course info\r\n        const targetCourse = this.courses.find(c => c.id == this.transferForm.targetCourseId);\r\n        const studentName = this.transferForm.student.student_name;\r\n        \r\n        // Remove from current course\r\n        const studentIndex = this.currentCourseEnrollments.findIndex(\r\n          e => e.enrollment_id === this.transferForm.student.enrollment_id\r\n        );\r\n        \r\n        if (studentIndex !== -1) {\r\n          // Store the enrollment data before removing it\r\n          const enrollmentToTransfer = { ...this.currentCourseEnrollments[studentIndex] };\r\n          \r\n          // Track student transferred OUT of current course\r\n          const currentCourseId = parseInt(this.selectedCourseId);\r\n          if (!this.transferredOutStudents.has(currentCourseId)) {\r\n            this.transferredOutStudents.set(currentCourseId, []);\r\n          }\r\n          this.transferredOutStudents.get(currentCourseId).push(enrollmentToTransfer.enrollment_id);\r\n          \r\n          // Remove from current course enrollments\r\n          this.currentCourseEnrollments.splice(studentIndex, 1);\r\n          \r\n          // Update the enrollment data for the target course\r\n          enrollmentToTransfer.course_id = this.transferForm.targetCourseId;\r\n          enrollmentToTransfer.course_code = targetCourse.code;\r\n          enrollmentToTransfer.course_name = targetCourse.name;\r\n          enrollmentToTransfer.lecturer_id = targetCourse.lecturer_id;\r\n          enrollmentToTransfer.enrolled_at = new Date().toISOString();\r\n          \r\n          // Store the transfer in a temporary data structure for persistence\r\n          const targetCourseId = parseInt(this.transferForm.targetCourseId);\r\n          \r\n          // Store by target course ID\r\n          if (!this.transferredStudents.has(targetCourseId)) {\r\n            this.transferredStudents.set(targetCourseId, []);\r\n          }\r\n          this.transferredStudents.get(targetCourseId).push(enrollmentToTransfer);\r\n          \r\n          // Save to localStorage for persistence\r\n          this.saveTransferredStudents();\r\n          \r\n          // Update the loadEnrollments method to include transferred students\r\n          // Refresh the current course view to reflect the removal\r\n          await this.loadCourseEnrollments();\r\n        }\r\n        \r\n        // Hide modal\r\n        const modal = bootstrap.Modal.getInstance(document.getElementById('transferStudentModal'));\r\n        modal.hide();\r\n        \r\n        // Clear form\r\n        this.transferForm.student = null;\r\n        this.transferForm.targetCourseId = '';\r\n        \r\n        // Show success message\r\n        this.$store.dispatch('showToast', {\r\n          message: `Student ${studentName} has been transferred to ${targetCourse?.code || 'target course'}`,\r\n          type: 'success'\r\n        });\r\n        \r\n      } catch (error) {\r\n        console.error('Error transferring student:', error);\r\n        this.$store.dispatch('showToast', {\r\n          message: 'Error transferring student. Please try again.',\r\n          type: 'error'\r\n        });\r\n      }\r\n    },\r\n    \r\n    exportAllEnrollments() {\r\n      if (!this.currentCourseEnrollments.length) {\r\n        this.$store.dispatch('showToast', {\r\n          message: 'No enrollments to export',\r\n          type: 'warning'\r\n        });\r\n        return;\r\n      }\r\n      \r\n      // Create CSV content\r\n      const headers = ['Course Code', 'Course Name', 'Student Name', 'Matric Number', 'Email', 'Academic Year', 'Semester', 'Enrolled Date'];\r\n      let csvContent = headers.join(',') + '\\n';\r\n      \r\n      this.currentCourseEnrollments.forEach(enrollment => {\r\n        const row = [\r\n          this.selectedCourse?.code || 'N/A',\r\n          `\"${this.selectedCourse?.name || 'N/A'}\"`,\r\n          `\"${enrollment.student_name}\"`,\r\n          enrollment.matric_number || 'N/A',\r\n          enrollment.student_email,\r\n          enrollment.academic_year,\r\n          enrollment.semester,\r\n          this.formatDate(enrollment.enrolled_at)\r\n        ];\r\n        csvContent += row.join(',') + '\\n';\r\n      });\r\n      \r\n      // Download CSV\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', `${this.selectedCourse?.code || 'course'}_enrollments.csv`);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    },\r\n\r\n    async logout() {\r\n      if (confirm('Are you sure you want to logout?')) {\r\n        await this.$store.dispatch('auth/logout');\r\n        this.$router.push('/login');\r\n      }\r\n    },\r\n\r\n    // Persistence methods for transferred students\r\n    saveTransferredStudents() {\r\n      try {\r\n        const transfersObj = {};\r\n        this.transferredStudents.forEach((students, courseId) => {\r\n          transfersObj[courseId] = students;\r\n        });\r\n        \r\n        const transfersOutObj = {};\r\n        this.transferredOutStudents.forEach((enrollmentIds, courseId) => {\r\n          transfersOutObj[courseId] = enrollmentIds;\r\n        });\r\n        \r\n        localStorage.setItem('enrollmentTransfers', JSON.stringify({\r\n          transfersIn: transfersObj,\r\n          transfersOut: transfersOutObj\r\n        }));\r\n      } catch (error) {\r\n        console.error('Error saving transferred students:', error);\r\n      }\r\n    },\r\n\r\n    loadTransferredStudents() {\r\n      try {\r\n        const saved = localStorage.getItem('enrollmentTransfers');\r\n        if (saved) {\r\n          const data = JSON.parse(saved);\r\n          \r\n          // Load transfers IN\r\n          this.transferredStudents = new Map();\r\n          if (data.transfersIn) {\r\n            Object.keys(data.transfersIn).forEach(courseId => {\r\n              this.transferredStudents.set(parseInt(courseId), data.transfersIn[courseId]);\r\n            });\r\n          }\r\n          \r\n          // Load transfers OUT\r\n          this.transferredOutStudents = new Map();\r\n          if (data.transfersOut) {\r\n            Object.keys(data.transfersOut).forEach(courseId => {\r\n              this.transferredOutStudents.set(parseInt(courseId), data.transfersOut[courseId]);\r\n            });\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading transferred students:', error);\r\n        this.transferredStudents = new Map();\r\n        this.transferredOutStudents = new Map();\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.admin-enrollment-management h1 {\r\n  color: #2c3e50;\r\n  font-weight: 700;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  border: none;\r\n  border-radius: 10px;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.avatar {\r\n  width: 40px;\r\n  height: 40px;\r\n  background: linear-gradient(45deg, #007bff, #0056b3);\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n}\r\n\r\n.avatar.avatar-sm {\r\n  width: 32px;\r\n  height: 32px;\r\n  font-size: 12px;\r\n}\r\n\r\n.student-list {\r\n  border: 1px solid #dee2e6;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n}\r\n\r\n.form-check {\r\n  padding: 8px;\r\n  border-bottom: 1px solid #f8f9fa;\r\n}\r\n\r\n.form-check:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.form-check:hover {\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.stat-item {\r\n  margin-bottom: 10px;\r\n  padding-bottom: 10px;\r\n  border-bottom: 1px solid #f8f9fa;\r\n}\r\n\r\n.stat-item:last-child {\r\n  border-bottom: none;\r\n  margin-bottom: 0;\r\n}\r\n\r\n.table th {\r\n  font-weight: 600;\r\n  color: #2c3e50;\r\n  border-top: none;\r\n}\r\n\r\n.btn-group .btn {\r\n  margin-right: 0;\r\n}\r\n</style>\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAycA,SAASA,UAAS,QAAS,MAAM;AACjC,OAAO,KAAKC,SAAQ,MAAO,WAAW;AAEtC,eAAe;EACbC,IAAI,EAAE,2BAA2B;EACjCC,IAAI,WAAJA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,gBAAgB,EAAE,EAAE;MACpBC,WAAW,EAAE,EAAE;MACfC,wBAAwB,EAAE,EAAE;MAC5BC,WAAW,EAAE,EAAE;MACfC,cAAc,EAAE;QACdC,UAAU,EAAE,EAAE;QACdC,YAAY,EAAE,WAAW;QACzBC,QAAQ,EAAE;MACZ,CAAC;MACDC,kBAAkB,EAAE,IAAI;MACxBC,YAAY,EAAE;QACZC,OAAO,EAAE,IAAI;QACbC,cAAc,EAAE;MAClB,CAAC;MACDC,mBAAmB,EAAE,IAAIC,GAAG,CAAC,CAAC;MAAE;MAChCC,sBAAsB,EAAE,IAAID,GAAG,CAAC,EAAE;IACpC,CAAC;EACH,CAAC;EACDE,QAAQ,EAAAC,aAAA,CAAAA,aAAA,CAAAA,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACHpB,UAAU,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,GAC/BA,UAAU,CAAC,SAAS,EAAE,CAAC,YAAY,CAAC,CAAC,GACrCA,UAAU,CAAC,aAAa,EAAE,CAAC,sBAAsB,EAAE,WAAW,CAAC,CAAC,GAChEA,UAAU,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,CAAC;IAEpCqB,QAAQ,WAARA,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACC,OAAM,IAAK;QAAEpB,IAAI,EAAE;MAAQ,CAAC;IAC1C,CAAC;IAEDqB,OAAO,WAAPA,OAAOA,CAAA,EAAG;MACR,OAAO,IAAI,CAACC,UAAS,IAAK,EAAE;IAC9B,CAAC;IAEDC,iBAAiB,WAAjBA,iBAAiBA,CAAA,EAAG;MAClB,OAAO,IAAI,CAACC,oBAAmB,IAAK,EAAE;IACxC,CAAC;IAEDC,cAAc,WAAdA,cAAcA,CAAA,EAAG;MAAA,IAAAC,aAAA;QAAAC,KAAA;MACf,OAAO,EAAAD,aAAA,OAAI,CAACL,OAAO,cAAAK,aAAA,uBAAZA,aAAA,CAAcE,IAAI,CAAC,UAAAC,CAAA;QAAA,OAAKA,CAAC,CAACC,EAAC,IAAKH,KAAI,CAACzB,gBAAgB;MAAA,OAAK,IAAI;IACvE,CAAC;IAED6B,yBAAyB,WAAzBA,yBAAyBA,CAAA,EAAG;MAC1B,IAAI,CAAC,IAAI,CAAC5B,WAAW,EAAE,OAAO,IAAI,CAACC,wBAAuB,IAAK,EAAE;MAEjE,IAAM4B,KAAI,GAAI,IAAI,CAAC7B,WAAW,CAAC8B,WAAW,CAAC,CAAC;MAC5C,OAAO,CAAC,IAAI,CAAC7B,wBAAuB,IAAK,EAAE,EAAE8B,MAAM,CAAC,UAAAC,UAAS;QAAA,OAC3DA,UAAU,CAACC,YAAY,CAACH,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,KAAK,KACpDG,UAAU,CAACG,aAAa,CAACL,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,KAAK,KACpDG,UAAU,CAACI,aAAY,IAAKJ,UAAU,CAACI,aAAa,CAACN,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,KAAK,CAAC;MAAA,CACrF,CAAC;IACH,CAAC;IAEDQ,aAAa,WAAbA,aAAaA,CAAA,EAAG;MAAA,IAAAC,iBAAA;MACd,OAAO,EAAAA,iBAAA,OAAI,CAACpC,WAAW,cAAAoC,iBAAA,uBAAhBA,iBAAA,CAAkBC,MAAK,KAAK,CAAC;IACtC,CAAC;IAEDC,YAAY,WAAZA,YAAYA,CAAA,EAAG;MAAA,IAAAC,cAAA;MACb,OAAO,EAAAA,cAAA,OAAI,CAACvB,OAAO,cAAAuB,cAAA,uBAAZA,cAAA,CAAcF,MAAK,KAAK,CAAC;IAClC,CAAC;IAEDG,gBAAgB,WAAhBA,gBAAgBA,CAAA,EAAG;MAAA,IAAAC,kBAAA;MACjB,OAAO,EAAAA,kBAAA,OAAI,CAACzC,WAAW,cAAAyC,kBAAA,uBAAhBA,kBAAA,CAAkBC,MAAM,CAAC,UAACC,KAAK,EAAEpC,OAAO;QAAA,OAAKoC,KAAI,IAAKpC,OAAO,CAACqC,gBAAe,IAAK,CAAC,CAAC;MAAA,GAAE,CAAC,MAAK,CAAC;IACtG,CAAC;IAEDC,sBAAsB,WAAtBA,sBAAsBA,CAAA,EAAG;MAAA,IAAAC,cAAA;QAAAC,MAAA;MACvB;MACA,OAAO,EAAAD,cAAA,OAAI,CAAC9B,OAAO,cAAA8B,cAAA,uBAAZA,cAAA,CAAcjB,MAAM,CAAC,UAAAmB,MAAK;QAAA,OAAKA,MAAM,CAACvB,EAAC,IAAKsB,MAAI,CAAClD,gBAAgB;MAAA,OAAK,EAAE;IACjF;EAAA,EACD;EACKoD,OAAO,WAAPA,OAAOA,CAAA,EAAG;IAAA,IAAAC,MAAA;IAAA,OAAAC,iBAAA,cAAAC,YAAA,GAAAC,CAAA,UAAAC,QAAA;MAAA,OAAAF,YAAA,GAAAG,CAAA,WAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,CAAA;UAAA;YACd;YACAP,MAAI,CAACQ,uBAAuB,CAAC,CAAC;YAAAF,QAAA,CAAAC,CAAA;YAAA,OACxBP,MAAI,CAACS,iBAAiB,CAAC,CAAC;UAAA;YAAA,OAAAH,QAAA,CAAAI,CAAA;QAAA;MAAA,GAAAN,OAAA;IAAA;EAChC,CAAC;EACDO,OAAO,EAAE;IACDF,iBAAiB,WAAjBA,iBAAiBA,CAAA,EAAG;MAAA,IAAAG,MAAA;MAAA,OAAAX,iBAAA,cAAAC,YAAA,GAAAC,CAAA,UAAAU,SAAA;QAAA,OAAAX,YAAA,GAAAG,CAAA,WAAAS,SAAA;UAAA,kBAAAA,SAAA,CAAAP,CAAA;YAAA;cACxB,IAAI;gBACF;gBACAK,MAAI,CAACG,MAAM,CAACC,MAAM,CAAC,qBAAqB,EAAE,CACxC;kBACEzC,EAAE,EAAE,CAAC;kBACL0C,IAAI,EAAE,OAAO;kBACbxE,IAAI,EAAE,6BAA6B;kBACnCyE,aAAa,EAAE,WAAW;kBAC1BhE,QAAQ,EAAE,MAAM;kBAChBiE,WAAW,EAAE,CAAC;kBACdC,aAAa,EAAE;gBACjB,CAAC,EACD;kBACE7C,EAAE,EAAE,CAAC;kBACL0C,IAAI,EAAE,OAAO;kBACbxE,IAAI,EAAE,iBAAiB;kBACvByE,aAAa,EAAE,WAAW;kBAC1BhE,QAAQ,EAAE,MAAM;kBAChBiE,WAAW,EAAE,CAAC;kBACdC,aAAa,EAAE;gBACjB,EACD,CAAC;;gBAEF;gBACAR,MAAI,CAAC9D,WAAU,GAAI,CACjB;kBACEyB,EAAE,EAAE,CAAC;kBACL9B,IAAI,EAAE,aAAa;kBACnB4E,KAAK,EAAE,sBAAsB;kBAC7BC,IAAI,EAAE,SAAS;kBACftC,aAAa,EAAE,SAAS;kBACxBU,gBAAgB,EAAE;gBACpB,CAAC,EACD;kBACEnB,EAAE,EAAE,CAAC;kBACL9B,IAAI,EAAE,aAAa;kBACnB4E,KAAK,EAAE,sBAAsB;kBAC7BC,IAAI,EAAE,SAAS;kBACftC,aAAa,EAAE,SAAS;kBACxBU,gBAAgB,EAAE;gBACpB,CAAC,EACD;kBACEnB,EAAE,EAAE,CAAC;kBACL9B,IAAI,EAAE,eAAe;kBACrB4E,KAAK,EAAE,sBAAsB;kBAC7BC,IAAI,EAAE,SAAS;kBACftC,aAAa,EAAE,SAAS;kBACxBU,gBAAgB,EAAE;gBACpB,EACD;;gBAED;gBACAkB,MAAI,CAACG,MAAM,CAACC,MAAM,CAAC,iBAAiB,EAAE,CACpC;kBACEzC,EAAE,EAAE,CAAC;kBACL9B,IAAI,EAAE,YAAY;kBAClB4E,KAAK,EAAE,mBAAmB;kBAC1BC,IAAI,EAAE;gBACR,CAAC,EACD;kBACE/C,EAAE,EAAE,CAAC;kBACL9B,IAAI,EAAE,cAAc;kBACpB4E,KAAK,EAAE,uBAAuB;kBAC9BC,IAAI,EAAE;gBACR,CAAC,EACD;kBACE/C,EAAE,EAAE,CAAC;kBACL9B,IAAI,EAAE,aAAa;kBACnB4E,KAAK,EAAE,sBAAsB;kBAC7BC,IAAI,EAAE;gBACR,CAAC,EACD;kBACE/C,EAAE,EAAE,CAAC;kBACL9B,IAAI,EAAE,aAAa;kBACnB4E,KAAK,EAAE,sBAAsB;kBAC7BC,IAAI,EAAE,SAAS;kBACftC,aAAa,EAAE;gBACjB,CAAC,EACD;kBACET,EAAE,EAAE,CAAC;kBACL9B,IAAI,EAAE,aAAa;kBACnB4E,KAAK,EAAE,sBAAsB;kBAC7BC,IAAI,EAAE,SAAS;kBACftC,aAAa,EAAE;gBACjB,CAAC,EACD;kBACET,EAAE,EAAE,CAAC;kBACL9B,IAAI,EAAE,eAAe;kBACrB4E,KAAK,EAAE,sBAAsB;kBAC7BC,IAAI,EAAE,SAAS;kBACftC,aAAa,EAAE;gBACjB,EACD,CAAC;gBAEFuC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;cACvD,EAAE,OAAOC,KAAK,EAAE;gBACdF,OAAO,CAACE,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;cACvD;YAAA;cAAA,OAAAX,SAAA,CAAAJ,CAAA;UAAA;QAAA,GAAAG,QAAA;MAAA;IACF,CAAC;IAEKa,eAAe,WAAfA,eAAeA,CAAA,EAAG;MAAA,IAAAC,MAAA;MAAA,OAAA1B,iBAAA,cAAAC,YAAA,GAAAC,CAAA,UAAAyB,SAAA;QAAA,IAAAC,EAAA;QAAA,OAAA3B,YAAA,GAAAG,CAAA,WAAAyB,SAAA;UAAA,kBAAAA,SAAA,CAAAvB,CAAA;YAAA;cAAAuB,SAAA,CAAAC,CAAA;cAAAD,SAAA,CAAAvB,CAAA;cAAA,OAGdyB,OAAO,CAACC,GAAG,CAAC,CAChBN,MAAI,CAACZ,MAAM,CAACmB,QAAQ,CAAC,sBAAsB,CAAC,EAC5CP,MAAI,CAACQ,eAAe,CAAC,EACtB,CAAC;YAAA;cAAAL,SAAA,CAAAvB,CAAA;cAAA;YAAA;cAAAuB,SAAA,CAAAC,CAAA;cAAAF,EAAA,GAAAC,SAAA,CAAAM,CAAA;cAEFb,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAAI,EAAO,CAAC;cACnDF,MAAI,CAACZ,MAAM,CAACmB,QAAQ,CAAC,WAAW,EAAE;gBAChCG,OAAO,EAAE,oBAAoB;gBAC7BC,IAAI,EAAE;cACR,CAAC,CAAC;YAAA;cAAA,OAAAR,SAAA,CAAApB,CAAA;UAAA;QAAA,GAAAkB,QAAA;MAAA;IAEN,CAAC;IAEKO,eAAe,WAAfA,eAAeA,CAAA,EAAG;MAAA,IAAAI,MAAA;MAAA,OAAAtC,iBAAA,cAAAC,YAAA,GAAAC,CAAA,UAAAqC,SAAA;QAAA,IAAAC,QAAA,EAAAC,GAAA;QAAA,OAAAxC,YAAA,GAAAG,CAAA,WAAAsC,SAAA;UAAA,kBAAAA,SAAA,CAAApC,CAAA;YAAA;cAAAoC,SAAA,CAAAZ,CAAA;cAAAY,SAAA,CAAApC,CAAA;cAAA,OAEGgC,MAAI,CAACxB,MAAM,CAACmB,QAAQ,CAAC,kBAAkB,CAAC;YAAA;cAAzDO,QAAO,GAAAE,SAAA,CAAAP,CAAA;cACbG,MAAI,CAACzF,WAAU,GAAI2F,QAAQ,CAAC9D,MAAM,CAAC,UAAAiE,IAAG;gBAAA,OAAKA,IAAI,CAACtB,IAAG,KAAM,SAAS;cAAA,EAAC;cAAAqB,SAAA,CAAApC,CAAA;cAAA;YAAA;cAAAoC,SAAA,CAAAZ,CAAA;cAAAW,GAAA,GAAAC,SAAA,CAAAP,CAAA;cAEnEb,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAAiB,GAAO,CAAC;YAAA;cAAA,OAAAC,SAAA,CAAAjC,CAAA;UAAA;QAAA,GAAA8B,QAAA;MAAA;IAEnD,CAAC;IAEKK,qBAAqB,WAArBA,qBAAqBA,CAAA,EAAG;MAAA,IAAAC,MAAA;MAAA,OAAA7C,iBAAA,cAAAC,YAAA,GAAAC,CAAA,UAAA4C,SAAA;QAAA,IAAAC,eAAA,EAAAC,iBAAA,EAAAC,uBAAA;QAAA,OAAAhD,YAAA,GAAAG,CAAA,WAAA8C,SAAA;UAAA,kBAAAA,SAAA,CAAA5C,CAAA;YAAA;cAAA,IACvBuC,MAAI,CAACnG,gBAAgB;gBAAAwG,SAAA,CAAA5C,CAAA;gBAAA;cAAA;cACxBuC,MAAI,CAACjG,wBAAuB,GAAI,EAAE;cAAA,OAAAsG,SAAA,CAAAzC,CAAA;YAAA;cAIpC,IAAI;gBACFa,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEsB,MAAI,CAACnG,gBAAgB,CAAC;;gBAErE;gBACA,IAAImG,MAAI,CAACnG,gBAAe,IAAK,CAAC,EAAE;kBAC9BmG,MAAI,CAACjG,wBAAuB,GAAI,CAC9B;oBACEuG,aAAa,EAAE,CAAC;oBAChBC,UAAU,EAAE,CAAC;oBACbxE,YAAY,EAAE,aAAa;oBAC3BE,aAAa,EAAE,sBAAsB;oBACrCC,aAAa,EAAE,SAAS;oBACxBkC,aAAa,EAAE,WAAW;oBAC1BhE,QAAQ,EAAE,MAAM;oBAChBoG,WAAW,EAAE;kBACf,CAAC,EACD;oBACEF,aAAa,EAAE,CAAC;oBAChBC,UAAU,EAAE,CAAC;oBACbxE,YAAY,EAAE,aAAa;oBAC3BE,aAAa,EAAE,sBAAsB;oBACrCC,aAAa,EAAE,SAAS;oBACxBkC,aAAa,EAAE,WAAW;oBAC1BhE,QAAQ,EAAE,MAAM;oBAChBoG,WAAW,EAAE;kBACf,EACD;kBAED/B,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEsB,MAAI,CAACjG,wBAAwB,CAAC;;kBAExE;kBACAiG,MAAI,CAAC/B,MAAM,CAACC,MAAM,CAAC,oCAAoC,EAAE,CACvD;oBACEzC,EAAE,EAAE,CAAC;oBACL9B,IAAI,EAAE,eAAe;oBACrB4E,KAAK,EAAE,sBAAsB;oBAC7BrC,aAAa,EAAE,SAAS;oBACxBU,gBAAgB,EAAE;kBACpB,EACD,CAAC;gBACJ,OAAO,IAAIoD,MAAI,CAACnG,gBAAe,IAAK,CAAC,EAAE;kBACrCmG,MAAI,CAACjG,wBAAuB,GAAI,CAC9B;oBACEuG,aAAa,EAAE,CAAC;oBAChBC,UAAU,EAAE,CAAC;oBACbxE,YAAY,EAAE,aAAa;oBAC3BE,aAAa,EAAE,sBAAsB;oBACrCC,aAAa,EAAE,SAAS;oBACxBkC,aAAa,EAAE,WAAW;oBAC1BhE,QAAQ,EAAE,MAAM;oBAChBoG,WAAW,EAAE;kBACf,EACD;kBAED/B,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEsB,MAAI,CAACjG,wBAAwB,CAAC;;kBAExE;kBACAiG,MAAI,CAAC/B,MAAM,CAACC,MAAM,CAAC,oCAAoC,EAAE,CACvD;oBACEzC,EAAE,EAAE,CAAC;oBACL9B,IAAI,EAAE,aAAa;oBACnB4E,KAAK,EAAE,sBAAsB;oBAC7BrC,aAAa,EAAE,SAAS;oBACxBU,gBAAgB,EAAE;kBACpB,CAAC,EACD;oBACEnB,EAAE,EAAE,CAAC;oBACL9B,IAAI,EAAE,eAAe;oBACrB4E,KAAK,EAAE,sBAAsB;oBAC7BrC,aAAa,EAAE,SAAS;oBACxBU,gBAAgB,EAAE;kBACpB,EACD,CAAC;gBACJ,OAAO;kBACLoD,MAAI,CAACjG,wBAAuB,GAAI,EAAE;kBAClC0E,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEsB,MAAI,CAACnG,gBAAgB,CAAC;gBAClE;;gBAEA;gBACMqG,eAAc,GAAIO,QAAQ,CAACT,MAAI,CAACnG,gBAAgB,CAAC;gBACvD,IAAImG,MAAI,CAACrF,sBAAqB,IAAKqF,MAAI,CAACrF,sBAAsB,CAAC+F,GAAG,CAACR,eAAe,CAAC,EAAE;kBAC7EC,iBAAgB,GAAIH,MAAI,CAACrF,sBAAsB,CAACgG,GAAG,CAACT,eAAe,CAAC;kBAC1EF,MAAI,CAACjG,wBAAuB,GAAIiG,MAAI,CAACjG,wBAAwB,CAAC8B,MAAM,CAClE,UAAAC,UAAS;oBAAA,OAAK,CAACqE,iBAAiB,CAACnE,QAAQ,CAACF,UAAU,CAACwE,aAAa;kBAAA,CACpE,CAAC;gBACH;;gBAEA;gBACA,IAAIN,MAAI,CAACvF,mBAAkB,IAAKuF,MAAI,CAACvF,mBAAmB,CAACiG,GAAG,CAACD,QAAQ,CAACT,MAAI,CAACnG,gBAAgB,CAAC,CAAC,EAAE;kBACvFuG,uBAAsB,GAAIJ,MAAI,CAACvF,mBAAmB,CAACkG,GAAG,CAACF,QAAQ,CAACT,MAAI,CAACnG,gBAAgB,CAAC,CAAC;kBAC7FmG,MAAI,CAACjG,wBAAuB,GAAIiG,MAAI,CAACjG,wBAAwB,CAAC6G,MAAM,CAACR,uBAAuB,CAAC;gBAC/F;gBAEA3B,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEsB,MAAI,CAACnG,gBAAgB,CAAC;cAC7E,EAAE,OAAO8E,KAAK,EAAE;gBACdF,OAAO,CAACE,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;gBACzDqB,MAAI,CAAC/B,MAAM,CAACmB,QAAQ,CAAC,WAAW,EAAE;kBAChCG,OAAO,EAAE,kCAAkC;kBAC3CC,IAAI,EAAE;gBACR,CAAC,CAAC;cACJ;YAAA;cAAA,OAAAa,SAAA,CAAAzC,CAAA;UAAA;QAAA,GAAAqC,QAAA;MAAA;IACF,CAAC;IAEKY,6BAA6B,WAA7BA,6BAA6BA,CAAA,EAAG;MAAA,IAAAC,MAAA;MAAA,OAAA3D,iBAAA,cAAAC,YAAA,GAAAC,CAAA,UAAA0D,SAAA;QAAA,IAAAC,GAAA;QAAA,OAAA5D,YAAA,GAAAG,CAAA,WAAA0D,SAAA;UAAA,kBAAAA,SAAA,CAAAxD,CAAA;YAAA;cAAA,IAC/BqD,MAAI,CAACjH,gBAAgB;gBAAAoH,SAAA,CAAAxD,CAAA;gBAAA;cAAA;cACxBqD,MAAI,CAAC/G,wBAAuB,GAAI,EAAE;cAAA,OAAAkH,SAAA,CAAArD,CAAA;YAAA;cAAAqD,SAAA,CAAAhC,CAAA;cAAAgC,SAAA,CAAAxD,CAAA;cAAA,OAK5ByB,OAAO,CAACC,GAAG,CAAC,CAChB2B,MAAI,CAAC7C,MAAM,CAACmB,QAAQ,CAAC,oCAAoC,EAAE0B,MAAI,CAACjH,gBAAgB,CAAC,EACjFiH,MAAI,CAAC7C,MAAM,CAACmB,QAAQ,CAAC,oCAAoC,EAAE0B,MAAI,CAACjH,gBAAgB,EACjF,CAAC;YAAA;cAEFiH,MAAI,CAAC/G,wBAAuB,GAAI+G,MAAI,CAAC7C,MAAM,CAACiD,OAAO,CAAC,4BAA4B,CAAC;cAAAD,SAAA,CAAAxD,CAAA;cAAA;YAAA;cAAAwD,SAAA,CAAAhC,CAAA;cAAA+B,GAAA,GAAAC,SAAA,CAAA3B,CAAA;cAEjFb,OAAO,CAACE,KAAK,CAAC,mCAAmC,EAAAqC,GAAO,CAAC;cACzDF,MAAI,CAAC7C,MAAM,CAACmB,QAAQ,CAAC,WAAW,EAAE;gBAChCG,OAAO,EAAE,kCAAkC;gBAC3CC,IAAI,EAAE;cACR,CAAC,CAAC;YAAA;cAAA,OAAAyB,SAAA,CAAArD,CAAA;UAAA;QAAA,GAAAmD,QAAA;MAAA;IAEN,CAAC;IAEDI,eAAe,WAAfA,eAAeA,CAACC,UAAU,EAAE;MAC1B,IAAI,CAAC,IAAI,CAACC,QAAO,IAAK,CAACC,KAAK,CAACC,OAAO,CAAC,IAAI,CAACF,QAAQ,CAAC,EAAE;QACnD,OAAO,kBAAkB;MAC3B;MACA,IAAMG,QAAO,GAAI,IAAI,CAACH,QAAQ,CAAC9F,IAAI,CAAC,UAAAkG,CAAA;QAAA,OAAKA,CAAC,CAAChG,EAAC,KAAM2F,UAAS,IAAKK,CAAC,CAACjD,IAAG,KAAM,UAAU;MAAA,EAAC;MACtF,OAAOgD,QAAO,GAAIA,QAAQ,CAAC7H,IAAG,GAAI,kBAAkB;IACtD,CAAC;IAED+H,kBAAkB,WAAlBA,kBAAkBA,CAAC/H,IAAI,EAAE;MACvB,OAAOA,IAAG,CACPgI,KAAK,CAAC,GAAG,EACTC,GAAG,CAAC,UAAAnE,CAAA;QAAA,OAAKA,CAAC,CAAC,CAAC,CAAC;MAAA,GACboE,IAAI,CAAC,EAAE,EACPC,WAAW,CAAC,CAAC;IAClB,CAAC;IAEDC,UAAU,WAAVA,UAAUA,CAACC,UAAU,EAAE;MACrB,IAAI,CAACA,UAAU,EAAE,OAAO,KAAK;MAC7B,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACE,kBAAkB,CAAC,OAAO,EAAE;QACtDC,GAAG,EAAE,SAAS;QACdC,KAAK,EAAE,OAAO;QACdC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;IAEDC,mBAAmB,WAAnBA,mBAAmBA,CAAA,EAAG;MAAA,IAAAC,oBAAA;MACpB,IAAI,CAACtI,cAAa,GAAI;QACpBC,UAAU,EAAE,EAAE;QACdC,YAAY,EAAE,EAAAoI,oBAAA,OAAI,CAACnH,cAAc,cAAAmH,oBAAA,uBAAnBA,oBAAA,CAAqBnE,aAAY,KAAK,WAAW;QAC/DhE,QAAQ,EAAE;MACZ,CAAC;MAED,IAAMoI,KAAI,GAAI,IAAI9I,SAAS,CAAC+I,KAAK,CAACC,QAAQ,CAACC,cAAc,CAAC,iBAAiB,CAAC,CAAC;MAC7EH,KAAK,CAACI,IAAI,CAAC,CAAC;IACd,CAAC;IAEDC,uBAAuB,WAAvBA,uBAAuBA,CAACC,KAAK,EAAE;MAC7B,IAAIA,KAAK,CAACC,MAAM,CAACC,OAAO,EAAE;QACxB,IAAI,CAAC/I,cAAc,CAACC,UAAS,GAAI,IAAI,CAACgB,iBAAiB,CAAC0G,GAAG,CAAC,UAAAqB,CAAA;UAAA,OAAKA,CAAC,CAACxH,EAAE;QAAA,EAAC;MACxE,OAAO;QACL,IAAI,CAACxB,cAAc,CAACC,UAAS,GAAI,EAAE;MACrC;IACF,CAAC;IAEKgJ,kBAAkB,WAAlBA,kBAAkBA,CAAA,EAAG;MAAA,IAAAC,MAAA;MAAA,OAAAhG,iBAAA,cAAAC,YAAA,GAAAC,CAAA,UAAA+F,SAAA;QAAA,IAAAC,MAAA,EAAAC,YAAA,EAAAd,KAAA,EAAAe,GAAA;QAAA,OAAAnG,YAAA,GAAAG,CAAA,WAAAiG,SAAA;UAAA,kBAAAA,SAAA,CAAA/F,CAAA;YAAA;cAAA+F,SAAA,CAAAvE,CAAA;cAAAuE,SAAA,CAAA/F,CAAA;cAAA,OAEF0F,MAAI,CAAClF,MAAM,CAACmB,QAAQ,CAAC,gCAAgC,EAAE;gBAC1EqE,QAAQ,EAAEN,MAAI,CAACtJ,gBAAgB;gBAC/BK,UAAU,EAAEiJ,MAAI,CAAClJ,cAAc,CAACC,UAAU;gBAC1CC,YAAY,EAAEgJ,MAAI,CAAClJ,cAAc,CAACE,YAAY;gBAC9CC,QAAQ,EAAE+I,MAAI,CAAClJ,cAAc,CAACG;cAChC,CAAC,CAAC;YAAA;cALIiJ,MAAK,GAAAG,SAAA,CAAAlE,CAAA;cAOX;cACMgE,YAAW,GAAIZ,QAAQ,CAACC,cAAc,CAAC,iBAAiB,CAAC;cACzDH,KAAI,GAAI9I,SAAS,CAAC+I,KAAK,CAACiB,WAAW,CAACJ,YAAY,CAAC;cACvDd,KAAK,CAACmB,IAAI,CAAC,CAAC;;cAEZ;cAAAH,SAAA,CAAA/F,CAAA;cAAA,OACM0F,MAAI,CAACpD,qBAAqB,CAAC,CAAC;YAAA;cAElCoD,MAAI,CAAClF,MAAM,CAACmB,QAAQ,CAAC,WAAW,EAAE;gBAChCG,OAAO,EAAE8D,MAAM,CAAC9D,OAAO;gBACvBC,IAAI,EAAE;cACR,CAAC,CAAC;cAAAgE,SAAA,CAAA/F,CAAA;cAAA;YAAA;cAAA+F,SAAA,CAAAvE,CAAA;cAAAsE,GAAA,GAAAC,SAAA,CAAAlE,CAAA;cAEFb,OAAO,CAACE,KAAK,CAAC,gCAAgC,EAAA4E,GAAO,CAAC;cACtDJ,MAAI,CAAClF,MAAM,CAACmB,QAAQ,CAAC,WAAW,EAAE;gBAChCG,OAAO,EAAEgE,GAAA,CAAMhE,OAAM,IAAK,0BAA0B;gBACpDC,IAAI,EAAE;cACR,CAAC,CAAC;YAAA;cAAA,OAAAgE,SAAA,CAAA5F,CAAA;UAAA;QAAA,GAAAwF,QAAA;MAAA;IAEN,CAAC;IAEDQ,uBAAuB,WAAvBA,uBAAuBA,CAAC9H,UAAU,EAAE;MAClC,IAAI,CAACzB,kBAAiB,GAAIyB,UAAU;MAEpC,IAAM0G,KAAI,GAAI,IAAI9I,SAAS,CAAC+I,KAAK,CAACC,QAAQ,CAACC,cAAc,CAAC,uBAAuB,CAAC,CAAC;MACnFH,KAAK,CAACI,IAAI,CAAC,CAAC;IACd,CAAC;IAEKiB,gBAAgB,WAAhBA,gBAAgBA,CAAA,EAAG;MAAA,IAAAC,MAAA;MAAA,OAAA3G,iBAAA,cAAAC,YAAA,GAAAC,CAAA,UAAA0G,SAAA;QAAA,IAAAT,YAAA,EAAAd,KAAA,EAAAwB,GAAA;QAAA,OAAA5G,YAAA,GAAAG,CAAA,WAAA0G,SAAA;UAAA,kBAAAA,SAAA,CAAAxG,CAAA;YAAA;cAAAwG,SAAA,CAAAhF,CAAA;cAAAgF,SAAA,CAAAxG,CAAA;cAAA,OAEfqG,MAAI,CAAC7F,MAAM,CAACmB,QAAQ,CAAC,8BAA8B,EAAE;gBACzD8E,YAAY,EAAEJ,MAAI,CAACzJ,kBAAkB,CAACiG,aAAa;gBACnDmD,QAAQ,EAAEK,MAAI,CAACjK;cACjB,CAAC,CAAC;YAAA;cAEF;cACMyJ,YAAW,GAAIZ,QAAQ,CAACC,cAAc,CAAC,uBAAuB,CAAC;cAC/DH,KAAI,GAAI9I,SAAS,CAAC+I,KAAK,CAACiB,WAAW,CAACJ,YAAY,CAAC;cACvDd,KAAK,CAACmB,IAAI,CAAC,CAAC;;cAEZ;cAAAM,SAAA,CAAAxG,CAAA;cAAA,OACMqG,MAAI,CAAC/D,qBAAqB,CAAC,CAAC;YAAA;cAElC+D,MAAI,CAAC7F,MAAM,CAACmB,QAAQ,CAAC,WAAW,EAAE;gBAChCG,OAAO,EAAE,2CAA2C;gBACpDC,IAAI,EAAE;cACR,CAAC,CAAC;cAEFsE,MAAI,CAACzJ,kBAAiB,GAAI,IAAI;cAAA4J,SAAA,CAAAxG,CAAA;cAAA;YAAA;cAAAwG,SAAA,CAAAhF,CAAA;cAAA+E,GAAA,GAAAC,SAAA,CAAA3E,CAAA;cAE9Bb,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAAqF,GAAO,CAAC;cAClDF,MAAI,CAAC7F,MAAM,CAACmB,QAAQ,CAAC,WAAW,EAAE;gBAChCG,OAAO,EAAEyE,GAAA,CAAMzE,OAAM,IAAK,wBAAwB;gBAClDC,IAAI,EAAE;cACR,CAAC,CAAC;YAAA;cAAA,OAAAyE,SAAA,CAAArG,CAAA;UAAA;QAAA,GAAAmG,QAAA;MAAA;IAEN,CAAC;IAEDI,kBAAkB,WAAlBA,kBAAkBA,CAACC,SAAS,EAAE;MAC5B;MACA,IAAI,CAACC,OAAO,CAACC,IAAI,mBAAA1D,MAAA,CAAmBwD,SAAS,CAAE,CAAC;IAClD,CAAC;IAEDG,iCAAiC,WAAjCA,iCAAiCA,CAAA,EAAG;MAClC;MACA,IAAI,CAACtG,MAAM,CAACmB,QAAQ,CAAC,WAAW,EAAE;QAChCG,OAAO,EAAE,gDAAgD;QACzDC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;IAEDgF,wBAAwB,WAAxBA,wBAAwBA,CAAA,EAAiB;MAAA,IAAhBjK,OAAM,GAAAkK,SAAA,CAAApI,MAAA,QAAAoI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAI,IAAI;MACrC,IAAI,CAAClK,OAAO,EAAE;QACZ,IAAI,CAAC0D,MAAM,CAACmB,QAAQ,CAAC,WAAW,EAAE;UAChCG,OAAO,EAAE,8DAA8D;UACvEC,IAAI,EAAE;QACR,CAAC,CAAC;QACF;MACF;MAEA,IAAI,CAAC,IAAI,CAAC3F,gBAAgB,EAAE;QAC1B,IAAI,CAACoE,MAAM,CAACmB,QAAQ,CAAC,WAAW,EAAE;UAChCG,OAAO,EAAE,8BAA8B;UACvCC,IAAI,EAAE;QACR,CAAC,CAAC;QACF;MACF;;MAEA;MACA,IAAI,CAAClF,YAAY,CAACC,OAAM,GAAIA,OAAO;MACnC,IAAI,CAACD,YAAY,CAACE,cAAa,GAAI,EAAE;;MAErC;MACA,IAAMgI,KAAI,GAAI,IAAI9I,SAAS,CAAC+I,KAAK,CAACC,QAAQ,CAACC,cAAc,CAAC,sBAAsB,CAAC,CAAC;MAClFH,KAAK,CAACI,IAAI,CAAC,CAAC;IACd,CAAC;IAEK+B,eAAe,WAAfA,eAAeA,CAAA,EAAG;MAAA,IAAAC,MAAA;MAAA,OAAAzH,iBAAA,cAAAC,YAAA,GAAAC,CAAA,UAAAwH,SAAA;QAAA,IAAAC,YAAA,EAAAC,WAAA,EAAAC,YAAA,EAAAC,oBAAA,EAAA/E,eAAA,EAAA1F,cAAA,EAAAgI,KAAA,EAAA0C,GAAA;QAAA,OAAA9H,YAAA,GAAAG,CAAA,WAAA4H,SAAA;UAAA,kBAAAA,SAAA,CAAA1H,CAAA;YAAA;cAAA,MAClB,CAACmH,MAAI,CAACtK,YAAY,CAACC,OAAM,IAAK,CAACqK,MAAI,CAACtK,YAAY,CAACE,cAAc;gBAAA2K,SAAA,CAAA1H,CAAA;gBAAA;cAAA;cACjEmH,MAAI,CAAC3G,MAAM,CAACmB,QAAQ,CAAC,WAAW,EAAE;gBAChCG,OAAO,EAAE,+BAA+B;gBACxCC,IAAI,EAAE;cACR,CAAC,CAAC;cAAA,OAAA2F,SAAA,CAAAvH,CAAA;YAAA;cAAAuH,SAAA,CAAAlG,CAAA;cAKF;cACM6F,YAAW,GAAIF,MAAI,CAAC5J,OAAO,CAACO,IAAI,CAAC,UAAAC,CAAA;gBAAA,OAAKA,CAAC,CAACC,EAAC,IAAKmJ,MAAI,CAACtK,YAAY,CAACE,cAAc;cAAA,EAAC;cAC/EuK,WAAU,GAAIH,MAAI,CAACtK,YAAY,CAACC,OAAO,CAACwB,YAAY,EAE1D;cACMiJ,YAAW,GAAIJ,MAAI,CAAC7K,wBAAwB,CAACqL,SAAS,CAC1D,UAAAC,CAAA;gBAAA,OAAKA,CAAC,CAAC/E,aAAY,KAAMsE,MAAI,CAACtK,YAAY,CAACC,OAAO,CAAC+F,aAAY;cAAA,CACjE,CAAC;cAAA,MAEG0E,YAAW,KAAM,CAAC,CAAC;gBAAAG,SAAA,CAAA1H,CAAA;gBAAA;cAAA;cACrB;cACMwH,oBAAmB,GAAApK,aAAA,KAAS+J,MAAI,CAAC7K,wBAAwB,CAACiL,YAAY,IAE5E;cACM9E,eAAc,GAAIO,QAAQ,CAACmE,MAAI,CAAC/K,gBAAgB,CAAC;cACvD,IAAI,CAAC+K,MAAI,CAACjK,sBAAsB,CAAC+F,GAAG,CAACR,eAAe,CAAC,EAAE;gBACrD0E,MAAI,CAACjK,sBAAsB,CAAC2K,GAAG,CAACpF,eAAe,EAAE,EAAE,CAAC;cACtD;cACA0E,MAAI,CAACjK,sBAAsB,CAACgG,GAAG,CAACT,eAAe,CAAC,CAACoE,IAAI,CAACW,oBAAoB,CAAC3E,aAAa,CAAC;;cAEzF;cACAsE,MAAI,CAAC7K,wBAAwB,CAACwL,MAAM,CAACP,YAAY,EAAE,CAAC,CAAC;;cAErD;cACAC,oBAAoB,CAACO,SAAQ,GAAIZ,MAAI,CAACtK,YAAY,CAACE,cAAc;cACjEyK,oBAAoB,CAACQ,WAAU,GAAIX,YAAY,CAAC3G,IAAI;cACpD8G,oBAAoB,CAACS,WAAU,GAAIZ,YAAY,CAACnL,IAAI;cACpDsL,oBAAoB,CAAC5G,WAAU,GAAIyG,YAAY,CAACzG,WAAW;cAC3D4G,oBAAoB,CAACzE,WAAU,GAAI,IAAIyB,IAAI,CAAC,CAAC,CAAC0D,WAAW,CAAC,CAAC;;cAE3D;cACMnL,cAAa,GAAIiG,QAAQ,CAACmE,MAAI,CAACtK,YAAY,CAACE,cAAc,CAAC,EAEjE;cACA,IAAI,CAACoK,MAAI,CAACnK,mBAAmB,CAACiG,GAAG,CAAClG,cAAc,CAAC,EAAE;gBACjDoK,MAAI,CAACnK,mBAAmB,CAAC6K,GAAG,CAAC9K,cAAc,EAAE,EAAE,CAAC;cAClD;cACAoK,MAAI,CAACnK,mBAAmB,CAACkG,GAAG,CAACnG,cAAc,CAAC,CAAC8J,IAAI,CAACW,oBAAoB,CAAC;;cAEvE;cACAL,MAAI,CAACgB,uBAAuB,CAAC,CAAC;;cAE9B;cACA;cAAAT,SAAA,CAAA1H,CAAA;cAAA,OACMmH,MAAI,CAAC7E,qBAAqB,CAAC,CAAC;YAAA;cAGpC;cACMyC,KAAI,GAAI9I,SAAS,CAAC+I,KAAK,CAACiB,WAAW,CAAChB,QAAQ,CAACC,cAAc,CAAC,sBAAsB,CAAC,CAAC;cAC1FH,KAAK,CAACmB,IAAI,CAAC,CAAC;;cAEZ;cACAiB,MAAI,CAACtK,YAAY,CAACC,OAAM,GAAI,IAAI;cAChCqK,MAAI,CAACtK,YAAY,CAACE,cAAa,GAAI,EAAE;;cAErC;cACAoK,MAAI,CAAC3G,MAAM,CAACmB,QAAQ,CAAC,WAAW,EAAE;gBAChCG,OAAO,aAAAqB,MAAA,CAAamE,WAAW,+BAAAnE,MAAA,CAA4B,CAAAkE,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE3G,IAAG,KAAK,eAAe,CAAE;gBAClGqB,IAAI,EAAE;cACR,CAAC,CAAC;cAAA2F,SAAA,CAAA1H,CAAA;cAAA;YAAA;cAAA0H,SAAA,CAAAlG,CAAA;cAAAiG,GAAA,GAAAC,SAAA,CAAA7F,CAAA;cAGFb,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAAuG,GAAO,CAAC;cACnDN,MAAI,CAAC3G,MAAM,CAACmB,QAAQ,CAAC,WAAW,EAAE;gBAChCG,OAAO,EAAE,+CAA+C;gBACxDC,IAAI,EAAE;cACR,CAAC,CAAC;YAAA;cAAA,OAAA2F,SAAA,CAAAvH,CAAA;UAAA;QAAA,GAAAiH,QAAA;MAAA;IAEN,CAAC;IAEDgB,oBAAoB,WAApBA,oBAAoBA,CAAA,EAAG;MAAA,IAAAC,OAAA;QAAAC,qBAAA;MACrB,IAAI,CAAC,IAAI,CAAChM,wBAAwB,CAACsC,MAAM,EAAE;QACzC,IAAI,CAAC4B,MAAM,CAACmB,QAAQ,CAAC,WAAW,EAAE;UAChCG,OAAO,EAAE,0BAA0B;UACnCC,IAAI,EAAE;QACR,CAAC,CAAC;QACF;MACF;;MAEA;MACA,IAAMwG,OAAM,GAAI,CAAC,aAAa,EAAE,aAAa,EAAE,cAAc,EAAE,eAAe,EAAE,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,eAAe,CAAC;MACtI,IAAIC,UAAS,GAAID,OAAO,CAACnE,IAAI,CAAC,GAAG,IAAI,IAAI;MAEzC,IAAI,CAAC9H,wBAAwB,CAACmM,OAAO,CAAC,UAAApK,UAAS,EAAK;QAAA,IAAAqK,qBAAA,EAAAC,sBAAA;QAClD,IAAMC,GAAE,GAAI,CACV,EAAAF,qBAAA,GAAAL,OAAI,CAAC1K,cAAc,cAAA+K,qBAAA,uBAAnBA,qBAAA,CAAqBhI,IAAG,KAAK,KAAK,OAAAyC,MAAA,CAC9B,EAAAwF,sBAAA,GAAAN,OAAI,CAAC1K,cAAc,cAAAgL,sBAAA,uBAAnBA,sBAAA,CAAqBzM,IAAG,KAAK,KAAK,cAAAiH,MAAA,CAClC9E,UAAU,CAACC,YAAY,SAC3BD,UAAU,CAACI,aAAY,IAAK,KAAK,EACjCJ,UAAU,CAACG,aAAa,EACxBH,UAAU,CAACsC,aAAa,EACxBtC,UAAU,CAAC1B,QAAQ,EACnB0L,OAAI,CAAC/D,UAAU,CAACjG,UAAU,CAAC0E,WAAW,EACvC;QACDyF,UAAS,IAAKI,GAAG,CAACxE,IAAI,CAAC,GAAG,IAAI,IAAI;MACpC,CAAC,CAAC;;MAEF;MACA,IAAMyE,IAAG,GAAI,IAAIC,IAAI,CAAC,CAACN,UAAU,CAAC,EAAE;QAAEzG,IAAI,EAAE;MAA0B,CAAC,CAAC;MACxE,IAAMgH,GAAE,GAAIC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;MACrC,IAAMK,IAAG,GAAIjE,QAAQ,CAACkE,aAAa,CAAC,GAAG,CAAC;MACxCD,IAAI,CAACE,IAAG,GAAIL,GAAG;MACfG,IAAI,CAACG,YAAY,CAAC,UAAU,KAAAlG,MAAA,CAAK,EAAAmF,qBAAA,OAAI,CAAC3K,cAAc,cAAA2K,qBAAA,uBAAnBA,qBAAA,CAAqB5H,IAAG,KAAK,QAAQ,qBAAkB,CAAC;MACzFuE,QAAQ,CAACqE,IAAI,CAACC,WAAW,CAACL,IAAI,CAAC;MAC/BA,IAAI,CAACM,KAAK,CAAC,CAAC;MACZvE,QAAQ,CAACqE,IAAI,CAACG,WAAW,CAACP,IAAI,CAAC;IACjC,CAAC;IAEKQ,MAAM,WAANA,MAAMA,CAAA,EAAG;MAAA,IAAAC,OAAA;MAAA,OAAAjK,iBAAA,cAAAC,YAAA,GAAAC,CAAA,UAAAgK,SAAA;QAAA,OAAAjK,YAAA,GAAAG,CAAA,WAAA+J,SAAA;UAAA,kBAAAA,SAAA,CAAA7J,CAAA;YAAA;cAAA,KACT8J,OAAO,CAAC,kCAAkC,CAAC;gBAAAD,SAAA,CAAA7J,CAAA;gBAAA;cAAA;cAAA6J,SAAA,CAAA7J,CAAA;cAAA,OACvC2J,OAAI,CAACnJ,MAAM,CAACmB,QAAQ,CAAC,aAAa,CAAC;YAAA;cACzCgI,OAAI,CAAC/C,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;YAAA;cAAA,OAAAgD,SAAA,CAAA1J,CAAA;UAAA;QAAA,GAAAyJ,QAAA;MAAA;IAE/B,CAAC;IAED;IACAzB,uBAAuB,WAAvBA,uBAAuBA,CAAA,EAAG;MACxB,IAAI;QACF,IAAM4B,YAAW,GAAI,CAAC,CAAC;QACvB,IAAI,CAAC/M,mBAAmB,CAACyL,OAAO,CAAC,UAACuB,QAAQ,EAAEhE,QAAQ,EAAK;UACvD+D,YAAY,CAAC/D,QAAQ,IAAIgE,QAAQ;QACnC,CAAC,CAAC;QAEF,IAAMC,eAAc,GAAI,CAAC,CAAC;QAC1B,IAAI,CAAC/M,sBAAsB,CAACuL,OAAO,CAAC,UAACyB,aAAa,EAAElE,QAAQ,EAAK;UAC/DiE,eAAe,CAACjE,QAAQ,IAAIkE,aAAa;QAC3C,CAAC,CAAC;QAEFC,YAAY,CAACC,OAAO,CAAC,qBAAqB,EAAEC,IAAI,CAACC,SAAS,CAAC;UACzDC,WAAW,EAAER,YAAY;UACzBS,YAAY,EAAEP;QAChB,CAAC,CAAC,CAAC;MACL,EAAE,OAAO/I,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC5D;IACF,CAAC;IAEDjB,uBAAuB,WAAvBA,uBAAuBA,CAAA,EAAG;MAAA,IAAAwK,OAAA;MACxB,IAAI;QACF,IAAMC,KAAI,GAAIP,YAAY,CAACQ,OAAO,CAAC,qBAAqB,CAAC;QACzD,IAAID,KAAK,EAAE;UACT,IAAMvO,IAAG,GAAIkO,IAAI,CAACO,KAAK,CAACF,KAAK,CAAC;;UAE9B;UACA,IAAI,CAAC1N,mBAAkB,GAAI,IAAIC,GAAG,CAAC,CAAC;UACpC,IAAId,IAAI,CAACoO,WAAW,EAAE;YACpBM,MAAM,CAACC,IAAI,CAAC3O,IAAI,CAACoO,WAAW,CAAC,CAAC9B,OAAO,CAAC,UAAAzC,QAAO,EAAK;cAChDyE,OAAI,CAACzN,mBAAmB,CAAC6K,GAAG,CAAC7E,QAAQ,CAACgD,QAAQ,CAAC,EAAE7J,IAAI,CAACoO,WAAW,CAACvE,QAAQ,CAAC,CAAC;YAC9E,CAAC,CAAC;UACJ;;UAEA;UACA,IAAI,CAAC9I,sBAAqB,GAAI,IAAID,GAAG,CAAC,CAAC;UACvC,IAAId,IAAI,CAACqO,YAAY,EAAE;YACrBK,MAAM,CAACC,IAAI,CAAC3O,IAAI,CAACqO,YAAY,CAAC,CAAC/B,OAAO,CAAC,UAAAzC,QAAO,EAAK;cACjDyE,OAAI,CAACvN,sBAAsB,CAAC2K,GAAG,CAAC7E,QAAQ,CAACgD,QAAQ,CAAC,EAAE7J,IAAI,CAACqO,YAAY,CAACxE,QAAQ,CAAC,CAAC;YAClF,CAAC,CAAC;UACJ;QACF;MACF,EAAE,OAAO9E,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC3D,IAAI,CAAClE,mBAAkB,GAAI,IAAIC,GAAG,CAAC,CAAC;QACpC,IAAI,CAACC,sBAAqB,GAAI,IAAID,GAAG,CAAC,CAAC;MACzC;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}