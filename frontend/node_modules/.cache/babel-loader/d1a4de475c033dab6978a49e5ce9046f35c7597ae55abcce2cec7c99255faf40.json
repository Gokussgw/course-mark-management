{"ast":null,"code":"import _regenerator from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/ansmu/Desktop/Web/NEW/course-mark-management/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'MarkSimulation',\n  data: function data() {\n    return {\n      courseId: null,\n      isLoading: true,\n      course: null,\n      assessments: [],\n      performance: null,\n      simulatedMarks: {},\n      // assessment_type -> simulated_mark\n      requiredMarks: {\n        pass: 0,\n        distinction: 0,\n        a_grade: 0\n      },\n      error: null\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters(\"auth\", [\"getUser\"])), {}, {\n    userId: function userId() {\n      return this.getUser ? this.getUser.id : null;\n    },\n    sortedAssessments: function sortedAssessments() {\n      return _toConsumableArray(this.assessments).sort(function (a, b) {\n        // Sort by weightage (highest first)\n        return b.weightage - a.weightage;\n      });\n    },\n    currentOverallMark: function currentOverallMark() {\n      return this.performance ? this.performance.overall_percentage : 0;\n    },\n    simulatedOverallMark: function simulatedOverallMark() {\n      var _this = this;\n      var weightedSum = 0;\n      var totalWeight = 0;\n      this.assessments.forEach(function (assessment) {\n        var simulatedMark = _this.simulatedMarks[assessment.assessment_type];\n        var actualMark = parseFloat(assessment.mark) || 0;\n        var weight = parseFloat(assessment.weightage);\n\n        // Use simulated mark if it has a value, otherwise use actual mark\n        var markToUse = simulatedMark !== null && simulatedMark !== undefined ? simulatedMark : actualMark;\n        var percentage = _this.calculatePercentage(markToUse, parseFloat(assessment.max_mark));\n        weightedSum += percentage * weight;\n        totalWeight += weight;\n      });\n      if (totalWeight === 0) return 0;\n      return Math.round(weightedSum / totalWeight);\n    },\n    simulatedGrade: function simulatedGrade() {\n      return this.calculateGrade(this.simulatedOverallMark);\n    },\n    simulatedGPA: function simulatedGPA() {\n      return this.calculateGPA(this.simulatedOverallMark);\n    },\n    markChange: function markChange() {\n      return this.simulatedOverallMark - this.currentOverallMark;\n    },\n    getSimulatedMarkClass: function getSimulatedMarkClass() {\n      if (this.simulatedOverallMark >= 80) return 'text-success';\n      if (this.simulatedOverallMark >= 70) return 'text-primary';\n      if (this.simulatedOverallMark >= 60) return 'text-warning';\n      return 'text-danger';\n    },\n    getSimulatedGradeBadgeClass: function getSimulatedGradeBadgeClass() {\n      var grade = this.simulatedGrade;\n      if (['A+', 'A', 'A-'].includes(grade)) return 'bg-success';\n      if (['B+', 'B', 'B-'].includes(grade)) return 'bg-primary';\n      if (['C+', 'C', 'C-'].includes(grade)) return 'bg-warning';\n      if (['D+', 'D'].includes(grade)) return 'bg-orange';\n      return 'bg-danger';\n    },\n    getCurrentMarkClass: function getCurrentMarkClass() {\n      if (this.currentOverallMark >= 80) return 'text-success';\n      if (this.currentOverallMark >= 70) return 'text-primary';\n      if (this.currentOverallMark >= 60) return 'text-warning';\n      return 'text-danger';\n    },\n    getMarkChangeClass: function getMarkChangeClass() {\n      if (this.markChange > 0) return 'text-success';\n      if (this.markChange < 0) return 'text-danger';\n      return 'text-muted';\n    },\n    unassessedItems: function unassessedItems() {\n      return this.assessments.filter(function (assessment) {\n        return assessment.mark_id === null;\n      });\n    },\n    totalRemainingWeight: function totalRemainingWeight() {\n      return this.unassessedItems.reduce(function (sum, assessment) {\n        return sum + parseFloat(assessment.weightage);\n      }, 0);\n    }\n  }),\n  created: function created() {\n    var _this2 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            _this2.courseId = parseInt(_this2.$route.params.id);\n            console.log('MarkSimulation created, getUser:', _this2.getUser);\n\n            // Wait a bit for authentication to be ready, then try to load data\n            setTimeout(function () {\n              console.log('After timeout, getUser:', _this2.getUser);\n              if (_this2.getUser) {\n                _this2.loadCourseData();\n              } else {\n                _this2.error = 'Please log in to access the grade simulator';\n                _this2.isLoading = false;\n              }\n            }, 100);\n          case 1:\n            return _context.a(2);\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    loadCourseData: function loadCourseData() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n        var requestData, response, errorText, data, _t;\n        return _regenerator().w(function (_context2) {\n          while (1) switch (_context2.n) {\n            case 0:\n              _this3.isLoading = true;\n              _this3.error = null;\n              if (_this3.userId) {\n                _context2.n = 1;\n                break;\n              }\n              _this3.error = 'User not authenticated';\n              _this3.isLoading = false;\n              return _context2.a(2);\n            case 1:\n              _context2.p = 1;\n              requestData = {\n                student_id: _this3.userId,\n                course_id: _this3.courseId\n              };\n              _context2.n = 2;\n              return fetch('http://localhost:3000/api/marks/student_course_detail', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(requestData)\n              });\n            case 2:\n              response = _context2.v;\n              if (response.ok) {\n                _context2.n = 4;\n                break;\n              }\n              _context2.n = 3;\n              return response.text();\n            case 3:\n              errorText = _context2.v;\n              throw new Error(\"HTTP error! status: \".concat(response.status, \", body: \").concat(errorText));\n            case 4:\n              _context2.n = 5;\n              return response.json();\n            case 5:\n              data = _context2.v;\n              if (data.success) {\n                _this3.course = data.course;\n                _this3.assessments = data.assessments;\n                _this3.performance = data.performance;\n\n                // Initialize simulation\n                _this3.initializeSimulation();\n                _this3.calculateRequiredMarks();\n              } else {\n                _this3.error = data.error || 'Failed to load course data';\n              }\n              _context2.n = 7;\n              break;\n            case 6:\n              _context2.p = 6;\n              _t = _context2.v;\n              console.error('Error loading course data:', _t);\n              _this3.error = 'Failed to load course data. Please try again later.';\n            case 7:\n              _context2.p = 7;\n              _this3.isLoading = false;\n              return _context2.f(7);\n            case 8:\n              return _context2.a(2);\n          }\n        }, _callee2, null, [[1, 6, 7, 8]]);\n      }))();\n    },\n    initializeSimulation: function initializeSimulation() {\n      var _this4 = this;\n      // Initialize simulated marks for assessments\n      this.simulatedMarks = {};\n      this.assessments.forEach(function (assessment) {\n        // Allow simulation for all assessments to enable \"what-if\" scenarios\n        _this4.simulatedMarks[assessment.assessment_type] = null;\n      });\n    },\n    hasMarkForAssessment: function hasMarkForAssessment(assessmentType) {\n      var assessment = this.assessments.find(function (a) {\n        return a.assessment_type === assessmentType;\n      });\n      return assessment && assessment.mark_id !== null;\n    },\n    isSimulatedAssessment: function isSimulatedAssessment(assessmentType) {\n      return assessmentType in this.simulatedMarks;\n    },\n    calculatePercentage: function calculatePercentage(mark, maxMark) {\n      if (!mark || !maxMark) return 0;\n      return Math.round(mark / maxMark * 100);\n    },\n    calculateGrade: function calculateGrade(percentage) {\n      if (percentage >= 90) return 'A+';\n      if (percentage >= 85) return 'A';\n      if (percentage >= 80) return 'A-';\n      if (percentage >= 75) return 'B+';\n      if (percentage >= 70) return 'B';\n      if (percentage >= 65) return 'B-';\n      if (percentage >= 60) return 'C+';\n      if (percentage >= 55) return 'C';\n      if (percentage >= 50) return 'C-';\n      if (percentage >= 45) return 'D+';\n      if (percentage >= 40) return 'D';\n      return 'F';\n    },\n    calculateGPA: function calculateGPA(percentage) {\n      if (percentage >= 90) return 4.3;\n      if (percentage >= 85) return 4.0;\n      if (percentage >= 80) return 3.7;\n      if (percentage >= 75) return 3.3;\n      if (percentage >= 70) return 3.0;\n      if (percentage >= 65) return 2.7;\n      if (percentage >= 60) return 2.3;\n      if (percentage >= 55) return 2.0;\n      if (percentage >= 50) return 1.7;\n      if (percentage >= 45) return 1.3;\n      if (percentage >= 40) return 1.0;\n      return 0.0;\n    },\n    calculateRequiredMarks: function calculateRequiredMarks() {\n      this.requiredMarks.pass = this.calculateRequiredMarkForGrade(50);\n      this.requiredMarks.distinction = this.calculateRequiredMarkForGrade(70);\n      this.requiredMarks.a_grade = this.calculateRequiredMarkForGrade(80);\n    },\n    calculateRequiredMarkForGrade: function calculateRequiredMarkForGrade(targetPercentage) {\n      var _this5 = this;\n      // Calculate current assessed weight and marks from actual marks only\n      var assessedWeightedMarks = 0;\n      this.assessments.forEach(function (assessment) {\n        // Only include assessments that have actual marks (not simulated)\n        if (assessment.mark_id !== null) {\n          var percentage = _this5.calculatePercentage(parseFloat(assessment.mark), parseFloat(assessment.max_mark));\n          assessedWeightedMarks += percentage * parseFloat(assessment.weightage);\n        }\n      });\n\n      // If no remaining assessments, return 0\n      if (this.totalRemainingWeight === 0) return 0;\n\n      // Calculate required weighted marks from remaining assessments\n      var totalRequiredWeightedMarks = targetPercentage * 100; // 100% total weight\n      var requiredFromRemaining = totalRequiredWeightedMarks - assessedWeightedMarks;\n\n      // Calculate required percentage on remaining assessments\n      var requiredPercentage = requiredFromRemaining / this.totalRemainingWeight;\n      return Math.max(0, Math.round(requiredPercentage));\n    },\n    updateSimulatedMark: function updateSimulatedMark(assessmentType, value) {\n      if (value === '' || value === null) {\n        this.$delete(this.simulatedMarks, assessmentType);\n      } else {\n        this.$set(this.simulatedMarks, assessmentType, parseFloat(value));\n      }\n      this.calculateRequiredMarks();\n    },\n    clearSimulation: function clearSimulation() {\n      var _this6 = this;\n      this.simulatedMarks = {};\n      this.assessments.forEach(function (assessment) {\n        _this6.simulatedMarks[assessment.assessment_type] = null;\n      });\n      this.calculateRequiredMarks();\n    },\n    applyPreset: function applyPreset(type) {\n      var _this7 = this;\n      this.assessments.forEach(function (assessment) {\n        var targetMark;\n        var maxMark = parseFloat(assessment.max_mark);\n        switch (type) {\n          case 'best':\n            targetMark = maxMark;\n            break;\n          case 'good':\n            targetMark = maxMark * 0.85;\n            break;\n          case 'average':\n            targetMark = maxMark * 0.70;\n            break;\n          case 'minimal':\n            targetMark = maxMark * 0.50;\n            break;\n          default:\n            targetMark = 0;\n        }\n        _this7.simulatedMarks[assessment.assessment_type] = Math.round(targetMark);\n      });\n      this.calculateRequiredMarks();\n    },\n    getCurrentMarkForAssessment: function getCurrentMarkForAssessment(assessmentType) {\n      var assessment = this.assessments.find(function (a) {\n        return a.assessment_type === assessmentType;\n      });\n      return assessment && assessment.mark ? parseFloat(assessment.mark) : null;\n    },\n    getMaxMarkForAssessment: function getMaxMarkForAssessment(assessmentType) {\n      var assessment = this.assessments.find(function (a) {\n        return a.assessment_type === assessmentType;\n      });\n      return assessment ? parseFloat(assessment.max_mark) : 0;\n    },\n    getAssessmentWeight: function getAssessmentWeight(assessmentType) {\n      var assessment = this.assessments.find(function (a) {\n        return a.assessment_type === assessmentType;\n      });\n      return assessment ? parseFloat(assessment.weightage) : 0;\n    },\n    getAssessmentTypeBadgeClass: function getAssessmentTypeBadgeClass(type) {\n      var types = {\n        'Assignment': 'bg-success',\n        'Quiz': 'bg-info',\n        'Test': 'bg-warning',\n        'Final Exam': 'bg-danger',\n        'Project': 'bg-primary',\n        'Lab': 'bg-secondary'\n      };\n      return types[type] || 'bg-secondary';\n    },\n    formatRequiredMark: function formatRequiredMark(value) {\n      if (value <= 0) return 'Already achieved';\n      if (value > 100) return 'Not possible';\n      return \"\".concat(value, \"% needed\");\n    },\n    formatDate: function formatDate(dateString) {\n      if (!dateString) return 'Not set';\n      return new Date(dateString).toLocaleDateString();\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","name","data","courseId","isLoading","course","assessments","performance","simulatedMarks","requiredMarks","pass","distinction","a_grade","error","computed","_objectSpread","userId","getUser","id","sortedAssessments","_toConsumableArray","sort","a","b","weightage","currentOverallMark","overall_percentage","simulatedOverallMark","_this","weightedSum","totalWeight","forEach","assessment","simulatedMark","assessment_type","actualMark","parseFloat","mark","weight","markToUse","undefined","percentage","calculatePercentage","max_mark","Math","round","simulatedGrade","calculateGrade","simulatedGPA","calculateGPA","markChange","getSimulatedMarkClass","getSimulatedGradeBadgeClass","grade","includes","getCurrentMarkClass","getMarkChangeClass","unassessedItems","filter","mark_id","totalRemainingWeight","reduce","sum","created","_this2","_asyncToGenerator","_regenerator","m","_callee","w","_context","n","parseInt","$route","params","console","log","setTimeout","loadCourseData","methods","_this3","_callee2","requestData","response","errorText","_t","_context2","p","student_id","course_id","fetch","method","headers","body","JSON","stringify","v","ok","text","Error","concat","status","json","success","initializeSimulation","calculateRequiredMarks","f","_this4","hasMarkForAssessment","assessmentType","find","isSimulatedAssessment","maxMark","calculateRequiredMarkForGrade","targetPercentage","_this5","assessedWeightedMarks","totalRequiredWeightedMarks","requiredFromRemaining","requiredPercentage","max","updateSimulatedMark","value","$delete","$set","clearSimulation","_this6","applyPreset","type","_this7","targetMark","getCurrentMarkForAssessment","getMaxMarkForAssessment","getAssessmentWeight","getAssessmentTypeBadgeClass","types","formatRequiredMark","formatDate","dateString","Date","toLocaleDateString"],"sources":["C:\\Users\\ansmu\\Desktop\\Web\\NEW\\course-mark-management\\frontend\\src\\views\\student\\MarkSimulation.vue"],"sourcesContent":["<template>\r\n  <div class=\"mark-simulation\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/student/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link :to=\"`/student/course/${courseId}`\">\r\n                {{ course?.code }} - {{ course?.name }}\r\n              </router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Grade Simulator\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">Grade Simulator</h1>\r\n        <p class=\"text-muted\">\r\n          {{ course?.code }} | {{ course?.name }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"error\" class=\"alert alert-danger\">\r\n      {{ error }}\r\n    </div>\r\n\r\n    <div v-else-if=\"!course\" class=\"alert alert-danger\">\r\n      Course not found or you don't have access to this course.\r\n    </div>\r\n\r\n    <div v-else class=\"row\">\r\n      <div class=\"col-md-8 mb-4\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Assessment Marks</h5>\r\n            <p class=\"text-muted small mb-0\">\r\n              Enter hypothetical marks for assessments to simulate your final grade\r\n            </p>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"alert alert-info mb-4\">\r\n              <i class=\"fas fa-info-circle me-2\"></i>\r\n              Enter the marks you expect to get for assessments that haven't been graded yet. Your actual marks are pre-filled where available.\r\n            </div>\r\n\r\n            <div class=\"table-responsive\">\r\n              <table class=\"table table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Assessment</th>\r\n                    <th>Type</th>\r\n                    <th>Weight</th>\r\n                    <th>Status</th>\r\n                    <th>Mark</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr v-for=\"assessment in sortedAssessments\" :key=\"assessment.assessment_type\">\r\n                    <td>\r\n                      <strong>{{ assessment.assessment_type }}</strong>\r\n                    </td>\r\n                    <td>\r\n                      <span class=\"badge\" :class=\"getAssessmentTypeBadgeClass(assessment.assessment_type)\">\r\n                        {{ assessment.assessment_type }}\r\n                      </span>\r\n                    </td>\r\n                    <td>{{ assessment.weightage }}%</td>\r\n                    <td>\r\n                      <span \r\n                        class=\"badge\" \r\n                        :class=\"assessment.mark_id ? 'bg-success' : 'bg-secondary'\"\r\n                      >\r\n                        {{ assessment.mark_id ? 'Completed' : 'Pending' }}\r\n                      </span>\r\n                    </td>\r\n                    <td style=\"width: 180px;\">\r\n                      <div class=\"input-group input-group-sm\">\r\n                        <input \r\n                          type=\"number\" \r\n                          class=\"form-control\"\r\n                          v-model.number=\"simulatedMarks[assessment.assessment_type]\"\r\n                          :min=\"0\" \r\n                          :max=\"assessment.max_mark\"\r\n                          :placeholder=\"assessment.mark || 'Enter mark'\"\r\n                          @input=\"updateSimulatedMark(assessment.assessment_type, $event.target.value)\"\r\n                        >\r\n                        <span class=\"input-group-text\">/ {{ assessment.max_mark }}</span>\r\n                      </div>\r\n                      <small class=\"text-muted\" v-if=\"assessment.mark_id && simulatedMarks[assessment.assessment_type] === null\">\r\n                        Current: {{ assessment.mark }} ({{ calculatePercentage(parseFloat(assessment.mark), parseFloat(assessment.max_mark)) }}%)\r\n                      </small>\r\n                      <small class=\"text-muted\" v-else-if=\"simulatedMarks[assessment.assessment_type] !== null && simulatedMarks[assessment.assessment_type] !== undefined\">\r\n                        Simulated ({{ calculatePercentage(simulatedMarks[assessment.assessment_type], parseFloat(assessment.max_mark)) }}%)\r\n                      </small>\r\n                      <small class=\"text-muted\" v-else>\r\n                        {{ assessment.mark_id ? 'Override current mark' : 'Enter expected mark' }}\r\n                      </small>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div class=\"d-flex justify-content-end mt-3\">\r\n              <button class=\"btn btn-outline-secondary me-2\" @click=\"clearSimulation\">\r\n                Clear Simulation\r\n              </button>\r\n              <div class=\"dropdown\">\r\n                <button \r\n                  class=\"btn btn-outline-primary dropdown-toggle\" \r\n                  type=\"button\" \r\n                  id=\"presetDropdown\" \r\n                  data-bs-toggle=\"dropdown\" \r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Apply Preset\r\n                </button>\r\n                <ul class=\"dropdown-menu\" aria-labelledby=\"presetDropdown\">\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('best')\">Best Case (90%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('good')\">Good Case (75%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('average')\">Average Case (65%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('minimal')\">Minimal Pass (50%)</a></li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-4 mb-4\">\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Simulation Results</h5>\r\n          </div>\r\n          <div class=\"card-body text-center\">\r\n            <div class=\"mb-4\">\r\n              <div class=\"display-4 fw-bold\" :class=\"getSimulatedMarkClass\">\r\n                {{ simulatedOverallMark }}%\r\n              </div>\r\n              <div class=\"badge fs-6 my-2\" :class=\"getSimulatedGradeBadgeClass\">\r\n                {{ simulatedGrade }}\r\n              </div>\r\n              <p class=\"text-muted\">Projected Final Grade</p>\r\n            </div>\r\n            \r\n            <hr class=\"my-4\">\r\n            \r\n            <div class=\"comparison mb-3\">\r\n              <div class=\"row\">\r\n                <div class=\"col-6 text-start\">\r\n                  <p class=\"mb-1 small text-muted\">Current Mark</p>\r\n                  <h4 :class=\"getCurrentMarkClass\">{{ currentOverallMark }}%</h4>\r\n                </div>\r\n                <div class=\"col-6 text-end\">\r\n                  <p class=\"mb-1 small text-muted\">Change</p>\r\n                  <h4 :class=\"getMarkChangeClass\">\r\n                    {{ markChange > 0 ? '+' : '' }}{{ markChange }}%\r\n                  </h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"progress mb-3\" style=\"height: 10px;\">\r\n              <div \r\n                class=\"progress-bar bg-danger\" \r\n                role=\"progressbar\" \r\n                :style=\"`width: 50%`\"\r\n                aria-valuenow=\"50\" \r\n                aria-valuemin=\"0\" \r\n                aria-valuemax=\"100\">\r\n              </div>\r\n              <div \r\n                class=\"progress-bar bg-warning\" \r\n                role=\"progressbar\" \r\n                :style=\"`width: 20%`\"\r\n                aria-valuenow=\"20\" \r\n                aria-valuemin=\"0\" \r\n                aria-valuemax=\"100\">\r\n              </div>\r\n              <div \r\n                class=\"progress-bar bg-success\" \r\n                role=\"progressbar\" \r\n                :style=\"`width: 30%`\"\r\n                aria-valuenow=\"30\" \r\n                aria-valuemin=\"0\" \r\n                aria-valuemax=\"100\">\r\n              </div>\r\n            </div>\r\n            <div class=\"d-flex justify-content-between\">\r\n              <small>0%</small>\r\n              <small>50% (Pass)</small>\r\n              <small>70% (Distinction)</small>\r\n              <small>100%</small>\r\n            </div>\r\n            \r\n            <div \r\n              class=\"position-indicator\" \r\n              :style=\"`left: ${Math.min(Math.max(simulatedOverallMark, 0), 100)}%`\"\r\n            >\r\n              <i class=\"fas fa-caret-down\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Required Marks</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <p class=\"text-muted small mb-3\">\r\n              Marks required on remaining assessments to achieve these grades:\r\n            </p>\r\n            \r\n            <div class=\"required-mark-row\">\r\n              <div class=\"d-flex justify-content-between mb-2\">\r\n                <span class=\"badge bg-warning\">A+ Grade (80%+)</span>\r\n                <span \r\n                  :class=\"{ 'text-success': requiredMarks.a_grade <= 100, 'text-danger': requiredMarks.a_grade > 100 }\"\r\n                >\r\n                  {{ formatRequiredMark(requiredMarks.a_grade) }}\r\n                </span>\r\n              </div>\r\n              <div class=\"progress mb-3\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-warning\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${Math.min(requiredMarks.a_grade, 100)}%`\"\r\n                  :aria-valuenow=\"Math.min(requiredMarks.a_grade, 100)\"\r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"required-mark-row\">\r\n              <div class=\"d-flex justify-content-between mb-2\">\r\n                <span class=\"badge bg-success\">Distinction (70%+)</span>\r\n                <span \r\n                  :class=\"{ 'text-success': requiredMarks.distinction <= 100, 'text-danger': requiredMarks.distinction > 100 }\"\r\n                >\r\n                  {{ formatRequiredMark(requiredMarks.distinction) }}\r\n                </span>\r\n              </div>\r\n              <div class=\"progress mb-3\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-success\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${Math.min(requiredMarks.distinction, 100)}%`\"\r\n                  :aria-valuenow=\"Math.min(requiredMarks.distinction, 100)\"\r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"required-mark-row\">\r\n              <div class=\"d-flex justify-content-between mb-2\">\r\n                <span class=\"badge bg-primary\">Pass (50%+)</span>\r\n                <span\r\n                  :class=\"{ 'text-success': requiredMarks.pass <= 100, 'text-danger': requiredMarks.pass > 100 }\"\r\n                >\r\n                  {{ formatRequiredMark(requiredMarks.pass) }}\r\n                </span>\r\n              </div>\r\n              <div class=\"progress mb-3\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-primary\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${Math.min(requiredMarks.pass, 100)}%`\"\r\n                  :aria-valuenow=\"Math.min(requiredMarks.pass, 100)\"\r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"alert alert-secondary mt-3 small\">\r\n              <i class=\"fas fa-info-circle me-2\"></i>\r\n              These calculations show the average mark needed on all remaining assessments to achieve the target grade.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  name: 'MarkSimulation',\r\n  data() {\r\n    return {\r\n      courseId: null,\r\n      isLoading: true,\r\n      course: null,\r\n      assessments: [],\r\n      performance: null,\r\n      simulatedMarks: {}, // assessment_type -> simulated_mark\r\n      requiredMarks: {\r\n        pass: 0,\r\n        distinction: 0,\r\n        a_grade: 0\r\n      },\r\n      error: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(\"auth\", [\"getUser\"]),\r\n    userId() {\r\n      return this.getUser ? this.getUser.id : null;\r\n    },\r\n    sortedAssessments() {\r\n      return [...this.assessments].sort((a, b) => {\r\n        // Sort by weightage (highest first)\r\n        return b.weightage - a.weightage;\r\n      });\r\n    },\r\n    currentOverallMark() {\r\n      return this.performance ? this.performance.overall_percentage : 0;\r\n    },\r\n    simulatedOverallMark() {\r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      this.assessments.forEach(assessment => {\r\n        const simulatedMark = this.simulatedMarks[assessment.assessment_type];\r\n        const actualMark = parseFloat(assessment.mark) || 0;\r\n        const weight = parseFloat(assessment.weightage);\r\n        \r\n        // Use simulated mark if it has a value, otherwise use actual mark\r\n        const markToUse = (simulatedMark !== null && simulatedMark !== undefined) ? simulatedMark : actualMark;\r\n        \r\n        const percentage = this.calculatePercentage(markToUse, parseFloat(assessment.max_mark));\r\n        weightedSum += percentage * weight;\r\n        totalWeight += weight;\r\n      });\r\n      \r\n      if (totalWeight === 0) return 0;\r\n      return Math.round(weightedSum / totalWeight);\r\n    },\r\n    simulatedGrade() {\r\n      return this.calculateGrade(this.simulatedOverallMark);\r\n    },\r\n    simulatedGPA() {\r\n      return this.calculateGPA(this.simulatedOverallMark);\r\n    },\r\n    markChange() {\r\n      return this.simulatedOverallMark - this.currentOverallMark;\r\n    },\r\n    getSimulatedMarkClass() {\r\n      if (this.simulatedOverallMark >= 80) return 'text-success';\r\n      if (this.simulatedOverallMark >= 70) return 'text-primary';\r\n      if (this.simulatedOverallMark >= 60) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getSimulatedGradeBadgeClass() {\r\n      const grade = this.simulatedGrade;\r\n      if (['A+', 'A', 'A-'].includes(grade)) return 'bg-success';\r\n      if (['B+', 'B', 'B-'].includes(grade)) return 'bg-primary';\r\n      if (['C+', 'C', 'C-'].includes(grade)) return 'bg-warning';\r\n      if (['D+', 'D'].includes(grade)) return 'bg-orange';\r\n      return 'bg-danger';\r\n    },\r\n    getCurrentMarkClass() {\r\n      if (this.currentOverallMark >= 80) return 'text-success';\r\n      if (this.currentOverallMark >= 70) return 'text-primary';\r\n      if (this.currentOverallMark >= 60) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getMarkChangeClass() {\r\n      if (this.markChange > 0) return 'text-success';\r\n      if (this.markChange < 0) return 'text-danger';\r\n      return 'text-muted';\r\n    },\r\n    unassessedItems() {\r\n      return this.assessments.filter(assessment => \r\n        assessment.mark_id === null\r\n      );\r\n    },\r\n    totalRemainingWeight() {\r\n      return this.unassessedItems.reduce((sum, assessment) => \r\n        sum + parseFloat(assessment.weightage), 0\r\n      );\r\n    }\r\n  },\r\n  async created() {\r\n    this.courseId = parseInt(this.$route.params.id);\r\n    \r\n    console.log('MarkSimulation created, getUser:', this.getUser);\r\n    \r\n    // Wait a bit for authentication to be ready, then try to load data\r\n    setTimeout(() => {\r\n      console.log('After timeout, getUser:', this.getUser);\r\n      if (this.getUser) {\r\n        this.loadCourseData();\r\n      } else {\r\n        this.error = 'Please log in to access the grade simulator';\r\n        this.isLoading = false;\r\n      }\r\n    }, 100);\r\n  },\r\n  methods: {\r\n    async loadCourseData() {\r\n      this.isLoading = true;\r\n      this.error = null;\r\n      \r\n      if (!this.userId) {\r\n        this.error = 'User not authenticated';\r\n        this.isLoading = false;\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        const requestData = {\r\n          student_id: this.userId,\r\n          course_id: this.courseId\r\n        };\r\n        \r\n        const response = await fetch('http://localhost:3000/api/marks/student_course_detail', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(requestData)\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorText = await response.text();\r\n          throw new Error(`HTTP error! status: ${response.status}, body: ${errorText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        \r\n        if (data.success) {\r\n          this.course = data.course;\r\n          this.assessments = data.assessments;\r\n          this.performance = data.performance;\r\n          \r\n          // Initialize simulation\r\n          this.initializeSimulation();\r\n          this.calculateRequiredMarks();\r\n        } else {\r\n          this.error = data.error || 'Failed to load course data';\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading course data:', error);\r\n        this.error = 'Failed to load course data. Please try again later.';\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    initializeSimulation() {\r\n      // Initialize simulated marks for assessments\r\n      this.simulatedMarks = {};\r\n      this.assessments.forEach(assessment => {\r\n        // Allow simulation for all assessments to enable \"what-if\" scenarios\r\n        this.simulatedMarks[assessment.assessment_type] = null;\r\n      });\r\n    },\r\n    hasMarkForAssessment(assessmentType) {\r\n      const assessment = this.assessments.find(a => a.assessment_type === assessmentType);\r\n      return assessment && assessment.mark_id !== null;\r\n    },\r\n    isSimulatedAssessment(assessmentType) {\r\n      return assessmentType in this.simulatedMarks;\r\n    },\r\n    calculatePercentage(mark, maxMark) {\r\n      if (!mark || !maxMark) return 0;\r\n      return Math.round((mark / maxMark) * 100);\r\n    },\r\n    calculateGrade(percentage) {\r\n      if (percentage >= 90) return 'A+';\r\n      if (percentage >= 85) return 'A';\r\n      if (percentage >= 80) return 'A-';\r\n      if (percentage >= 75) return 'B+';\r\n      if (percentage >= 70) return 'B';\r\n      if (percentage >= 65) return 'B-';\r\n      if (percentage >= 60) return 'C+';\r\n      if (percentage >= 55) return 'C';\r\n      if (percentage >= 50) return 'C-';\r\n      if (percentage >= 45) return 'D+';\r\n      if (percentage >= 40) return 'D';\r\n      return 'F';\r\n    },\r\n    calculateGPA(percentage) {\r\n      if (percentage >= 90) return 4.3;\r\n      if (percentage >= 85) return 4.0;\r\n      if (percentage >= 80) return 3.7;\r\n      if (percentage >= 75) return 3.3;\r\n      if (percentage >= 70) return 3.0;\r\n      if (percentage >= 65) return 2.7;\r\n      if (percentage >= 60) return 2.3;\r\n      if (percentage >= 55) return 2.0;\r\n      if (percentage >= 50) return 1.7;\r\n      if (percentage >= 45) return 1.3;\r\n      if (percentage >= 40) return 1.0;\r\n      return 0.0;\r\n    },\r\n    calculateRequiredMarks() {\r\n      this.requiredMarks.pass = this.calculateRequiredMarkForGrade(50);\r\n      this.requiredMarks.distinction = this.calculateRequiredMarkForGrade(70);\r\n      this.requiredMarks.a_grade = this.calculateRequiredMarkForGrade(80);\r\n    },\r\n    calculateRequiredMarkForGrade(targetPercentage) {\r\n      // Calculate current assessed weight and marks from actual marks only\r\n      let assessedWeightedMarks = 0;\r\n      \r\n      this.assessments.forEach(assessment => {\r\n        // Only include assessments that have actual marks (not simulated)\r\n        if (assessment.mark_id !== null) {\r\n          const percentage = this.calculatePercentage(parseFloat(assessment.mark), parseFloat(assessment.max_mark));\r\n          assessedWeightedMarks += percentage * parseFloat(assessment.weightage);\r\n        }\r\n      });\r\n      \r\n      // If no remaining assessments, return 0\r\n      if (this.totalRemainingWeight === 0) return 0;\r\n      \r\n      // Calculate required weighted marks from remaining assessments\r\n      const totalRequiredWeightedMarks = targetPercentage * 100; // 100% total weight\r\n      const requiredFromRemaining = totalRequiredWeightedMarks - assessedWeightedMarks;\r\n      \r\n      // Calculate required percentage on remaining assessments\r\n      const requiredPercentage = requiredFromRemaining / this.totalRemainingWeight;\r\n      \r\n      return Math.max(0, Math.round(requiredPercentage));\r\n    },\r\n    updateSimulatedMark(assessmentType, value) {\r\n      if (value === '' || value === null) {\r\n        this.$delete(this.simulatedMarks, assessmentType);\r\n      } else {\r\n        this.$set(this.simulatedMarks, assessmentType, parseFloat(value));\r\n      }\r\n      this.calculateRequiredMarks();\r\n    },\r\n    clearSimulation() {\r\n      this.simulatedMarks = {};\r\n      this.assessments.forEach(assessment => {\r\n        this.simulatedMarks[assessment.assessment_type] = null;\r\n      });\r\n      this.calculateRequiredMarks();\r\n    },\r\n    applyPreset(type) {\r\n      this.assessments.forEach(assessment => {\r\n        let targetMark;\r\n        const maxMark = parseFloat(assessment.max_mark);\r\n        \r\n        switch(type) {\r\n          case 'best':\r\n            targetMark = maxMark;\r\n            break;\r\n          case 'good':\r\n            targetMark = maxMark * 0.85;\r\n            break;\r\n          case 'average':\r\n            targetMark = maxMark * 0.70;\r\n            break;\r\n          case 'minimal':\r\n            targetMark = maxMark * 0.50;\r\n            break;\r\n          default:\r\n            targetMark = 0;\r\n        }\r\n        \r\n        this.simulatedMarks[assessment.assessment_type] = Math.round(targetMark);\r\n      });\r\n      \r\n      this.calculateRequiredMarks();\r\n    },\r\n    getCurrentMarkForAssessment(assessmentType) {\r\n      const assessment = this.assessments.find(a => a.assessment_type === assessmentType);\r\n      return assessment && assessment.mark ? parseFloat(assessment.mark) : null;\r\n    },\r\n    getMaxMarkForAssessment(assessmentType) {\r\n      const assessment = this.assessments.find(a => a.assessment_type === assessmentType);\r\n      return assessment ? parseFloat(assessment.max_mark) : 0;\r\n    },\r\n    getAssessmentWeight(assessmentType) {\r\n      const assessment = this.assessments.find(a => a.assessment_type === assessmentType);\r\n      return assessment ? parseFloat(assessment.weightage) : 0;\r\n    },\r\n    getAssessmentTypeBadgeClass(type) {\r\n      const types = {\r\n        'Assignment': 'bg-success',\r\n        'Quiz': 'bg-info',\r\n        'Test': 'bg-warning',\r\n        'Final Exam': 'bg-danger',\r\n        'Project': 'bg-primary',\r\n        'Lab': 'bg-secondary'\r\n      };\r\n      return types[type] || 'bg-secondary';\r\n    },\r\n    formatRequiredMark(value) {\r\n      if (value <= 0) return 'Already achieved';\r\n      if (value > 100) return 'Not possible';\r\n      return `${value}% needed`;\r\n    },\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not set';\r\n      return new Date(dateString).toLocaleDateString();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.mark-simulation h1 {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.progress {\r\n  border-radius: 0.25rem;\r\n  overflow: hidden;\r\n}\r\n\r\n.display-4 {\r\n  font-size: 3rem;\r\n}\r\n\r\n.position-indicator {\r\n  position: relative;\r\n  width: 0;\r\n  height: 0;\r\n  margin-top: -24px;\r\n  z-index: 2;\r\n  color: #343a40;\r\n  font-size: 1.5rem;\r\n  transform: translateX(-50%);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .display-4 {\r\n    font-size: 2.5rem;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}