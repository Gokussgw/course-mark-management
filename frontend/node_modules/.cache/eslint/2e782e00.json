[{"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\main.js":"1","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\App.vue":"2","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\router\\index.js":"3","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\index.js":"4","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\Login.vue":"5","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\Register.vue":"6","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\advisor\\AdviseeDetail.vue":"7","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\NotFound.vue":"8","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\AssessmentForm.vue":"9","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\StudentDetail.vue":"10","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\advisor\\AdviseeList.vue":"11","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\advisor\\Dashboard.vue":"12","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\CourseDetail.vue":"13","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\Dashboard.vue":"14","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\student\\MarkSimulation.vue":"15","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\student\\CourseMarks.vue":"16","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\student\\Dashboard.vue":"17","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\courses.js":"18","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\auth.js":"19","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\assessments.js":"20","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\marks.js":"21","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\users.js":"22","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\components\\layout\\Navbar.vue":"23","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\components\\charts\\AssessmentChart.vue":"24","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\components\\charts\\MarkDistributionChart.vue":"25","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\CSVImport.vue":"26","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\student\\RemarkRequest.vue":"27","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\advisor\\AtRiskStudents.vue":"28","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\admin\\Dashboard.vue":"29","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\admin\\UserManagement.vue":"30","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\admin\\SystemLogs.vue":"31","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\notification.js":"32","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\components\\notifications\\NotificationList.vue":"33","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\components\\admin\\SystemHealthMonitor.vue":"34","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\components\\notifications\\NotificationsDropdown.vue":"35"},{"size":1132,"mtime":1752257256597,"results":"36","hashOfConfig":"37"},{"size":1980,"mtime":1752262796983,"results":"38","hashOfConfig":"37"},{"size":6054,"mtime":1752258984464,"results":"39","hashOfConfig":"37"},{"size":1603,"mtime":1752262796983,"results":"40","hashOfConfig":"37"},{"size":11212,"mtime":1752255833926,"results":"41","hashOfConfig":"37"},{"size":5291,"mtime":1752252422360,"results":"42","hashOfConfig":"37"},{"size":16859,"mtime":1752252422383,"results":"43","hashOfConfig":"37"},{"size":705,"mtime":1752252422359,"results":"44","hashOfConfig":"37"},{"size":15635,"mtime":1752251040231,"results":"45","hashOfConfig":"37"},{"size":22937,"mtime":1752251040231,"results":"46","hashOfConfig":"37"},{"size":4062,"mtime":1752252422373,"results":"47","hashOfConfig":"37"},{"size":17020,"mtime":1752251040231,"results":"48","hashOfConfig":"37"},{"size":21660,"mtime":1752251040231,"results":"49","hashOfConfig":"37"},{"size":21472,"mtime":1752257256602,"results":"50","hashOfConfig":"37"},{"size":23466,"mtime":1752251040267,"results":"51","hashOfConfig":"37"},{"size":20145,"mtime":1752251040267,"results":"52","hashOfConfig":"37"},{"size":12433,"mtime":1752251040231,"results":"53","hashOfConfig":"37"},{"size":4918,"mtime":1752251040231,"results":"54","hashOfConfig":"37"},{"size":3488,"mtime":1752255833926,"results":"55","hashOfConfig":"37"},{"size":5364,"mtime":1752251040231,"results":"56","hashOfConfig":"37"},{"size":6824,"mtime":1752251040231,"results":"57","hashOfConfig":"37"},{"size":8416,"mtime":1752251040231,"results":"58","hashOfConfig":"37"},{"size":10646,"mtime":1752262796983,"results":"59","hashOfConfig":"37"},{"size":3090,"mtime":1752257256597,"results":"60","hashOfConfig":"37"},{"size":2351,"mtime":1752257256618,"results":"61","hashOfConfig":"37"},{"size":10162,"mtime":1752258984464,"results":"62","hashOfConfig":"37"},{"size":10692,"mtime":1752258984464,"results":"63","hashOfConfig":"37"},{"size":18987,"mtime":1752258984477,"results":"64","hashOfConfig":"37"},{"size":27283,"mtime":1752262796983,"results":"65","hashOfConfig":"37"},{"size":20188,"mtime":1752262796983,"results":"66","hashOfConfig":"37"},{"size":13014,"mtime":1752262796983,"results":"67","hashOfConfig":"37"},{"size":1503,"mtime":1752262796983,"results":"68","hashOfConfig":"37"},{"size":3179,"mtime":1752262796983,"results":"69","hashOfConfig":"37"},{"size":12280,"mtime":1752262797004,"results":"70","hashOfConfig":"37"},{"size":8478,"mtime":1752262797004,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kikacu",{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"82"},{"filePath":"86","messages":"87","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"82"},{"filePath":"98","messages":"99","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"121"},{"filePath":"125","messages":"126","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"121"},{"filePath":"128","messages":"129","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"121"},{"filePath":"131","messages":"132","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"121"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\main.js",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\App.vue",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\router\\index.js",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\index.js",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\Login.vue",[],[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\Register.vue",["161"],"<template>\r\n  <div class=\"register-container\">\r\n    <div class=\"card\">\r\n      <div class=\"card-header bg-primary text-white\">\r\n        <h2 class=\"mb-0\">Register</h2>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form @submit.prevent=\"handleRegister\">\r\n          <div class=\"alert alert-danger\" v-if=\"error\">\r\n            {{ error }}\r\n          </div>\r\n\r\n          <!-- User Information -->\r\n          <div class=\"form-group mb-3\">\r\n            <label for=\"fullName\">Full Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"fullName\"\r\n              v-model=\"user.fullName\"\r\n              class=\"form-control\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div class=\"form-group mb-3\">\r\n            <label for=\"email\">Email</label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              v-model=\"user.email\"\r\n              class=\"form-control\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <!-- Role Selection -->\r\n          <div class=\"form-group mb-3\">\r\n            <label for=\"role\">Role</label>\r\n            <select id=\"role\" v-model=\"user.role\" class=\"form-control\" required>\r\n              <option value=\"\">Select your role</option>\r\n              <option value=\"student\">Student</option>\r\n              <option value=\"lecturer\">Lecturer</option>\r\n              <option value=\"advisor\">Academic Advisor</option>\r\n            </select>\r\n          </div>\r\n\r\n          <!-- Student-specific fields -->\r\n          <div v-if=\"user.role === 'student'\" class=\"student-fields\">\r\n            <div class=\"form-group mb-3\">\r\n              <label for=\"studentId\">Student ID</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"studentId\"\r\n                v-model=\"user.studentId\"\r\n                class=\"form-control\"\r\n                required\r\n              />\r\n            </div>\r\n            \r\n            <div class=\"form-group mb-3\">\r\n              <label for=\"program\">Program</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"program\"\r\n                v-model=\"user.program\"\r\n                class=\"form-control\"\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Lecturer-specific fields -->\r\n          <div v-if=\"user.role === 'lecturer'\" class=\"lecturer-fields\">\r\n            <div class=\"form-group mb-3\">\r\n              <label for=\"department\">Department</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"department\"\r\n                v-model=\"user.department\"\r\n                class=\"form-control\"\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Password fields -->\r\n          <div class=\"form-group mb-3\">\r\n            <label for=\"password\">Password</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              v-model=\"user.password\"\r\n              class=\"form-control\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div class=\"form-group mb-3\">\r\n            <label for=\"confirmPassword\">Confirm Password</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"confirmPassword\"\r\n              v-model=\"user.confirmPassword\"\r\n              class=\"form-control\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n            <router-link to=\"/login\" class=\"text-decoration-none\">Already have an account? Login</router-link>\r\n            <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"loading\">\r\n              <span v-if=\"loading\" class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n              {{ loading ? 'Registering...' : 'Register' }}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'Register',\r\n  data() {\r\n    return {\r\n      user: {\r\n        fullName: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        role: '',\r\n        studentId: '',\r\n        program: '',\r\n        department: ''\r\n      },\r\n      loading: false,\r\n      error: null\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions('auth', ['register']),\r\n    async handleRegister() {\r\n      // Reset error\r\n      this.error = null\r\n\r\n      // Validate passwords match\r\n      if (this.user.password !== this.user.confirmPassword) {\r\n        this.error = 'Passwords do not match';\r\n        return;\r\n      }\r\n\r\n      // Start loading\r\n      this.loading = true;\r\n\r\n      try {\r\n        // Call register action from auth store\r\n        await this.register(this.user);\r\n        // Redirect to login page after successful registration\r\n        this.$router.push('/login');\r\n      } catch (err) {\r\n        this.error = err.message || 'Failed to register. Please try again.';\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.register-container {\r\n  max-width: 600px;\r\n  margin: 2rem auto;\r\n  padding: 0 1rem;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n</style>\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\advisor\\AdviseeDetail.vue",["162"],"<template>\r\n  <div class=\"advisee-detail-container\">\r\n    <!-- Loading state -->\r\n    <div v-if=\"loading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Error state -->\r\n    <div v-else-if=\"error\" class=\"alert alert-danger\">\r\n      {{ error }}\r\n    </div>\r\n\r\n    <!-- Content -->\r\n    <div v-else>\r\n      <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n        <div>\r\n          <router-link to=\"/advisor/advisees\" class=\"btn btn-outline-secondary mb-3\">\r\n            <i class=\"fas fa-arrow-left\"></i> Back to Advisees\r\n          </router-link>\r\n          <h1>{{ student.fullName }}</h1>\r\n          <p class=\"text-muted\">{{ student.studentId }} | {{ student.program }}</p>\r\n        </div>\r\n        <div class=\"student-contact\">\r\n          <div class=\"mb-2\">\r\n            <i class=\"fas fa-envelope\"></i> {{ student.email }}\r\n          </div>\r\n          <div v-if=\"student.phone\">\r\n            <i class=\"fas fa-phone\"></i> {{ student.phone }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Student Overview -->\r\n      <div class=\"row mb-5\">\r\n        <div class=\"col-md-6 mb-4\">\r\n          <div class=\"card h-100\">\r\n            <div class=\"card-header bg-primary text-white\">\r\n              <h5 class=\"mb-0\">Academic Overview</h5>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <div class=\"d-flex justify-content-between mb-3\">\r\n                <strong>Current GPA:</strong>\r\n                <span :class=\"{'text-success': student.gpa >= 3.0, 'text-warning': student.gpa < 3.0 && student.gpa >= 2.0, 'text-danger': student.gpa < 2.0}\">\r\n                  {{ student.gpa.toFixed(2) }}\r\n                </span>\r\n              </div>\r\n              <div class=\"d-flex justify-content-between mb-3\">\r\n                <strong>Completed Credits:</strong>\r\n                <span>{{ student.completedCredits }}</span>\r\n              </div>\r\n              <div class=\"d-flex justify-content-between mb-3\">\r\n                <strong>Current Status:</strong>\r\n                <span :class=\"{'text-success': student.status === 'Good Standing', 'text-warning': student.status === 'Academic Warning', 'text-danger': student.status === 'Academic Probation'}\">\r\n                  {{ student.status }}\r\n                </span>\r\n              </div>\r\n              <div class=\"d-flex justify-content-between\">\r\n                <strong>Program Progress:</strong>\r\n                <span>{{ (student.completedCredits / student.totalCreditsRequired * 100).toFixed(1) }}%</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"col-md-6 mb-4\">\r\n          <div class=\"card h-100\">\r\n            <div class=\"card-header bg-primary text-white\">\r\n              <h5 class=\"mb-0\">Current Semester Summary</h5>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <div class=\"d-flex justify-content-between mb-3\">\r\n                <strong>Enrolled Courses:</strong>\r\n                <span>{{ student.currentCourses.length }}</span>\r\n              </div>\r\n              <div class=\"d-flex justify-content-between mb-3\">\r\n                <strong>Total Credits:</strong>\r\n                <span>{{ totalCurrentCredits }}</span>\r\n              </div>\r\n              <div class=\"d-flex justify-content-between mb-3\">\r\n                <strong>At-Risk Courses:</strong>\r\n                <span class=\"text-danger\">{{ atRiskCourses.length }}</span>\r\n              </div>\r\n              <div class=\"d-flex justify-content-between\">\r\n                <strong>Projected GPA:</strong>\r\n                <span :class=\"{'text-success': projectedGpa >= 3.0, 'text-warning': projectedGpa < 3.0 && projectedGpa >= 2.0, 'text-danger': projectedGpa < 2.0}\">\r\n                  {{ projectedGpa.toFixed(2) }}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Current Courses -->\r\n      <h2 class=\"mb-4\">Current Courses</h2>\r\n      <div class=\"table-responsive mb-5\">\r\n        <table class=\"table table-hover\">\r\n          <thead class=\"table-light\">\r\n            <tr>\r\n              <th>Course</th>\r\n              <th>Code</th>\r\n              <th>Credits</th>\r\n              <th>Current Mark</th>\r\n              <th>Status</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"course in student.currentCourses\" :key=\"course.id\">\r\n              <td>{{ course.name }}</td>\r\n              <td>{{ course.code }}</td>\r\n              <td>{{ course.credits }}</td>\r\n              <td>\r\n                <span :class=\"{'text-success': course.currentMark >= 70, 'text-warning': course.currentMark < 70 && course.currentMark >= 50, 'text-danger': course.currentMark < 50}\">\r\n                  {{ course.currentMark }}%\r\n                </span>\r\n              </td>\r\n              <td>\r\n                <span class=\"badge\" :class=\"{'bg-success': course.currentMark >= 70, 'bg-warning': course.currentMark < 70 && course.currentMark >= 50, 'bg-danger': course.currentMark < 50}\">\r\n                  {{ getCourseStatus(course) }}\r\n                </span>\r\n              </td>\r\n              <td>\r\n                <button class=\"btn btn-sm btn-primary\" @click=\"viewCourseDetails(course)\">\r\n                  View Details\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <!-- Previous Courses -->\r\n      <h2 class=\"mb-4\">Academic History</h2>\r\n      <div class=\"card\">\r\n        <div class=\"card-header bg-light\">\r\n          <ul class=\"nav nav-pills\" role=\"tablist\">\r\n            <li class=\"nav-item\" role=\"presentation\">\r\n              <button class=\"nav-link active\" id=\"courses-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#courses\" type=\"button\" role=\"tab\" aria-controls=\"courses\" aria-selected=\"true\">\r\n                Previous Courses\r\n              </button>\r\n            </li>\r\n            <li class=\"nav-item\" role=\"presentation\">\r\n              <button class=\"nav-link\" id=\"gpa-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#gpa\" type=\"button\" role=\"tab\" aria-controls=\"gpa\" aria-selected=\"false\">\r\n                GPA Trend\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"tab-content\">\r\n            <!-- Previous Courses Tab -->\r\n            <div class=\"tab-pane fade show active\" id=\"courses\" role=\"tabpanel\" aria-labelledby=\"courses-tab\">\r\n              <div v-if=\"student.previousCourses.length === 0\" class=\"alert alert-info\">\r\n                No previous course records found.\r\n              </div>\r\n              <div v-else class=\"table-responsive\">\r\n                <table class=\"table table-striped\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Course</th>\r\n                      <th>Code</th>\r\n                      <th>Semester</th>\r\n                      <th>Credits</th>\r\n                      <th>Final Mark</th>\r\n                      <th>Grade</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr v-for=\"course in student.previousCourses\" :key=\"course.id\">\r\n                      <td>{{ course.name }}</td>\r\n                      <td>{{ course.code }}</td>\r\n                      <td>{{ course.semester }}</td>\r\n                      <td>{{ course.credits }}</td>\r\n                      <td>{{ course.finalMark }}%</td>\r\n                      <td>{{ getGradeLetter(course.finalMark) }}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- GPA Trend Tab -->\r\n            <div class=\"tab-pane fade\" id=\"gpa\" role=\"tabpanel\" aria-labelledby=\"gpa-tab\">\r\n              <div class=\"chart-container\">\r\n                <canvas id=\"gpaChart\" height=\"300\"></canvas>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Notes & Comments -->\r\n      <div class=\"card mt-5\">\r\n        <div class=\"card-header bg-primary text-white\">\r\n          <h5 class=\"mb-0\">Advisor Notes</h5>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div v-if=\"student.advisorNotes.length === 0\" class=\"text-muted mb-4\">\r\n            No notes added yet.\r\n          </div>\r\n          <div v-else class=\"notes-list mb-4\">\r\n            <div v-for=\"(note, index) in student.advisorNotes\" :key=\"index\" class=\"note-item mb-3\">\r\n              <div class=\"note-header d-flex justify-content-between\">\r\n                <strong>{{ note.date }}</strong>\r\n                <div>\r\n                  <button class=\"btn btn-sm btn-link text-danger\" @click=\"deleteNote(index)\">Delete</button>\r\n                </div>\r\n              </div>\r\n              <p class=\"note-content mb-0\">{{ note.content }}</p>\r\n            </div>\r\n          </div>\r\n          \r\n          <form @submit.prevent=\"addNote\">\r\n            <div class=\"form-group\">\r\n              <label for=\"newNote\" class=\"form-label\">Add New Note</label>\r\n              <textarea \r\n                id=\"newNote\" \r\n                v-model=\"newNote\" \r\n                class=\"form-control\" \r\n                rows=\"3\"\r\n                placeholder=\"Add a note about this student...\"\r\n              ></textarea>\r\n            </div>\r\n            <div class=\"mt-3\">\r\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"!newNote.trim()\">\r\n                Add Note\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'AdviseeDetail',\r\n  data() {\r\n    return {\r\n      student: null,\r\n      loading: true,\r\n      error: null,\r\n      newNote: '',\r\n      gpaChart: null\r\n    }\r\n  },\r\n  computed: {\r\n    studentId() {\r\n      return this.$route.params.id;\r\n    },\r\n    totalCurrentCredits() {\r\n      return this.student?.currentCourses.reduce((total, course) => total + course.credits, 0) || 0;\r\n    },\r\n    atRiskCourses() {\r\n      return this.student?.currentCourses.filter(course => course.currentMark < 50) || [];\r\n    },\r\n    projectedGpa() {\r\n      if (!this.student || !this.student.currentCourses.length) return 0;\r\n      \r\n      const totalCredits = this.totalCurrentCredits;\r\n      const weightedSum = this.student.currentCourses.reduce((sum, course) => {\r\n        return sum + (this.markToGpaPoints(course.currentMark) * course.credits);\r\n      }, 0);\r\n      \r\n      return totalCredits > 0 ? weightedSum / totalCredits : 0;\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions('users', ['fetchAdviseeById', 'updateAdviseeNotes']),\r\n    \r\n    async loadStudentData() {\r\n      try {\r\n        this.loading = true;\r\n        this.student = await this.fetchAdviseeById(this.studentId);\r\n        \r\n        // Initialize the student object with sample data if it doesn't have all properties\r\n        // This is just for demonstration purposes until the API is fully implemented\r\n        if (!this.student.advisorNotes) this.student.advisorNotes = [];\r\n        if (!this.student.status) {\r\n          this.student.status = this.student.gpa >= 3.0 ? 'Good Standing' : \r\n                               (this.student.gpa >= 2.0 ? 'Academic Warning' : 'Academic Probation');\r\n        }\r\n        if (!this.student.totalCreditsRequired) this.student.totalCreditsRequired = 120;\r\n        \r\n        this.$nextTick(() => {\r\n          this.initGpaChart();\r\n        });\r\n      } catch (err) {\r\n        this.error = 'Failed to load student data. Please try again.';\r\n        console.error('Error loading student data:', err);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    \r\n    getCourseStatus(course) {\r\n      if (course.currentMark >= 70) return 'Good';\r\n      if (course.currentMark >= 50) return 'Concern';\r\n      return 'At Risk';\r\n    },\r\n    \r\n    getGradeLetter(mark) {\r\n      if (mark >= 90) return 'A+';\r\n      if (mark >= 85) return 'A';\r\n      if (mark >= 80) return 'A-';\r\n      if (mark >= 75) return 'B+';\r\n      if (mark >= 70) return 'B';\r\n      if (mark >= 65) return 'C+';\r\n      if (mark >= 60) return 'C';\r\n      if (mark >= 50) return 'D';\r\n      return 'F';\r\n    },\r\n    \r\n    markToGpaPoints(mark) {\r\n      if (mark >= 90) return 4.0;\r\n      if (mark >= 85) return 4.0;\r\n      if (mark >= 80) return 3.7;\r\n      if (mark >= 75) return 3.3;\r\n      if (mark >= 70) return 3.0;\r\n      if (mark >= 65) return 2.3;\r\n      if (mark >= 60) return 2.0;\r\n      if (mark >= 50) return 1.0;\r\n      return 0.0;\r\n    },\r\n    \r\n    viewCourseDetails(course) {\r\n      // Implement course details view\r\n      alert(`Course details for ${course.name} will be shown here`);\r\n    },\r\n    \r\n    async addNote() {\r\n      if (!this.newNote.trim()) return;\r\n      \r\n      const today = new Date();\r\n      const formattedDate = today.toLocaleDateString('en-US', { \r\n        year: 'numeric', \r\n        month: 'short', \r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n      \r\n      const newNoteObj = {\r\n        content: this.newNote,\r\n        date: formattedDate\r\n      };\r\n      \r\n      // Add to local state\r\n      this.student.advisorNotes.unshift(newNoteObj);\r\n      \r\n      // Clear the input\r\n      this.newNote = '';\r\n      \r\n      try {\r\n        // Update in the store/backend\r\n        await this.updateAdviseeNotes({\r\n          studentId: this.studentId,\r\n          notes: this.student.advisorNotes\r\n        });\r\n      } catch (err) {\r\n        // Revert if there's an error\r\n        this.student.advisorNotes.shift();\r\n        this.$toast.error('Failed to save note. Please try again.');\r\n        console.error('Error saving note:', err);\r\n      }\r\n    },\r\n    \r\n    async deleteNote(index) {\r\n      if (!confirm('Are you sure you want to delete this note?')) return;\r\n      \r\n      const deletedNote = this.student.advisorNotes.splice(index, 1)[0];\r\n      \r\n      try {\r\n        // Update in the store/backend\r\n        await this.updateAdviseeNotes({\r\n          studentId: this.studentId,\r\n          notes: this.student.advisorNotes\r\n        });\r\n      } catch (err) {\r\n        // Revert if there's an error\r\n        this.student.advisorNotes.splice(index, 0, deletedNote);\r\n        this.$toast.error('Failed to delete note. Please try again.');\r\n        console.error('Error deleting note:', err);\r\n      }\r\n    },\r\n    \r\n    initGpaChart() {\r\n      // Sample GPA data by semester - replace with actual data when available\r\n      const labels = ['Fall 2021', 'Spring 2022', 'Fall 2022', 'Spring 2023'];\r\n      const data = [3.1, 3.3, 3.0, this.student.gpa];\r\n      \r\n      const ctx = document.getElementById('gpaChart');\r\n      if (!ctx) return;\r\n      \r\n      // Check if Chart.js is loaded\r\n      if (typeof Chart === 'undefined') {\r\n        console.error('Chart.js is not loaded');\r\n        return;\r\n      }\r\n      \r\n      this.gpaChart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [{\r\n            label: 'GPA by Semester',\r\n            data: data,\r\n            borderColor: '#0d6efd',\r\n            backgroundColor: 'rgba(13, 110, 253, 0.1)',\r\n            tension: 0.2,\r\n            fill: true\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: false,\r\n              min: Math.max(0, Math.min(...data) - 0.5),\r\n              max: Math.min(4.0, Math.max(...data) + 0.5),\r\n              ticks: {\r\n                stepSize: 0.5\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  return `GPA: ${context.parsed.y.toFixed(2)}`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  },\r\n  created() {\r\n    this.loadStudentData();\r\n  },\r\n  beforeUnmount() {\r\n    if (this.gpaChart) {\r\n      this.gpaChart.destroy();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.advisee-detail-container {\r\n  padding: 2rem 0;\r\n}\r\n\r\n.student-contact {\r\n  text-align: right;\r\n}\r\n\r\n.notes-list {\r\n  max-height: 300px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.note-item {\r\n  padding: 10px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 5px;\r\n}\r\n\r\n.note-header {\r\n  margin-bottom: 5px;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.note-content {\r\n  white-space: pre-line;\r\n}\r\n\r\n.chart-container {\r\n  height: 300px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .student-contact {\r\n    text-align: left;\r\n    margin-top: 1rem;\r\n  }\r\n}\r\n</style>\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\NotFound.vue",["163"],"<template>\r\n  <div class=\"not-found-container text-center\">\r\n    <div class=\"error-code\">404</div>\r\n    <h1 class=\"mb-4\">Page Not Found</h1>\r\n    <p class=\"lead mb-5\">The page you are looking for doesn't exist or has been moved.</p>\r\n    <router-link to=\"/\" class=\"btn btn-primary\">Back to Home</router-link>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'NotFound'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.not-found-container {\r\n  padding: 5rem 1rem;\r\n}\r\n\r\n.error-code {\r\n  font-size: 8rem;\r\n  font-weight: bold;\r\n  color: #6c757d;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\nh1 {\r\n  font-size: 2.5rem;\r\n  color: #343a40;\r\n}\r\n\r\n.lead {\r\n  color: #6c757d;\r\n  max-width: 500px;\r\n  margin: 0 auto;\r\n}\r\n</style>\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\AssessmentForm.vue",["164"],"<template>\r\n  <div class=\"assessment-form\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/lecturer/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item\" v-if=\"selectedCourse\">\r\n              <router-link :to=\"`/lecturer/course/${selectedCourse.id}`\">\r\n                {{ selectedCourse.code }} - {{ selectedCourse.name }}\r\n              </router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              {{ isEditing ? 'Edit Assessment' : 'Create Assessment' }}\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">\r\n          {{ isEditing ? 'Edit Assessment' : 'Create New Assessment' }}\r\n        </h1>\r\n        <p class=\"text-muted\" v-if=\"selectedCourse\">\r\n          For course: {{ selectedCourse.code }} - {{ selectedCourse.name }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else class=\"card\">\r\n      <div class=\"card-body\">\r\n        <form @submit.prevent=\"saveAssessment\">\r\n          <div class=\"row mb-3\" v-if=\"!selectedCourse && !isEditing\">\r\n            <div class=\"col-md-6\">\r\n              <label for=\"course\" class=\"form-label\">Course <span class=\"text-danger\">*</span></label>\r\n              <select \r\n                id=\"course\" \r\n                class=\"form-select\" \r\n                v-model=\"formData.course_id\" \r\n                required\r\n                :class=\"{ 'is-invalid': errors.course_id }\"\r\n              >\r\n                <option value=\"\">Select a course</option>\r\n                <option \r\n                  v-for=\"course in lecturerCourses\" \r\n                  :key=\"course.id\" \r\n                  :value=\"course.id\"\r\n                >\r\n                  {{ course.code }} - {{ course.name }}\r\n                </option>\r\n              </select>\r\n              <div class=\"invalid-feedback\" v-if=\"errors.course_id\">\r\n                {{ errors.course_id }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row mb-3\">\r\n            <div class=\"col-md-6\">\r\n              <label for=\"name\" class=\"form-label\">Assessment Name <span class=\"text-danger\">*</span></label>\r\n              <input \r\n                type=\"text\" \r\n                id=\"name\" \r\n                class=\"form-control\" \r\n                v-model=\"formData.name\" \r\n                required\r\n                :class=\"{ 'is-invalid': errors.name }\"\r\n                placeholder=\"e.g., Midterm Exam, Assignment 1\"\r\n              >\r\n              <div class=\"invalid-feedback\" v-if=\"errors.name\">\r\n                {{ errors.name }}\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6\">\r\n              <label for=\"type\" class=\"form-label\">Assessment Type <span class=\"text-danger\">*</span></label>\r\n              <select \r\n                id=\"type\" \r\n                class=\"form-select\" \r\n                v-model=\"formData.type\" \r\n                required\r\n                :class=\"{ 'is-invalid': errors.type }\"\r\n              >\r\n                <option value=\"\">Select type</option>\r\n                <option value=\"Assignment\">Assignment</option>\r\n                <option value=\"Quiz\">Quiz</option>\r\n                <option value=\"Midterm\">Midterm Exam</option>\r\n                <option value=\"Project\">Project</option>\r\n                <option value=\"Exam\">Final Exam</option>\r\n                <option value=\"Lab\">Lab Work</option>\r\n                <option value=\"Participation\">Participation</option>\r\n                <option value=\"Other\">Other</option>\r\n              </select>\r\n              <div class=\"invalid-feedback\" v-if=\"errors.type\">\r\n                {{ errors.type }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row mb-3\">\r\n            <div class=\"col-md-4\">\r\n              <label for=\"weightage\" class=\"form-label\">Weightage (%) <span class=\"text-danger\">*</span></label>\r\n              <input \r\n                type=\"number\" \r\n                id=\"weightage\" \r\n                class=\"form-control\" \r\n                v-model.number=\"formData.weightage\" \r\n                min=\"0\" \r\n                max=\"100\" \r\n                required\r\n                :class=\"{ 'is-invalid': errors.weightage }\"\r\n              >\r\n              <div class=\"invalid-feedback\" v-if=\"errors.weightage\">\r\n                {{ errors.weightage }}\r\n              </div>\r\n              <small class=\"form-text text-muted\">\r\n                Total weightage for all assessments should equal 100%.\r\n                Current total: {{ currentTotalWeightage }}%\r\n                <span \r\n                  v-if=\"currentTotalWeightage > 100\" \r\n                  class=\"text-danger\"\r\n                >\r\n                  (exceeds 100%)\r\n                </span>\r\n              </small>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <label for=\"max_mark\" class=\"form-label\">Maximum Mark <span class=\"text-danger\">*</span></label>\r\n              <input \r\n                type=\"number\" \r\n                id=\"max_mark\" \r\n                class=\"form-control\" \r\n                v-model.number=\"formData.max_mark\" \r\n                min=\"1\" \r\n                required\r\n                :class=\"{ 'is-invalid': errors.max_mark }\"\r\n              >\r\n              <div class=\"invalid-feedback\" v-if=\"errors.max_mark\">\r\n                {{ errors.max_mark }}\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4\">\r\n              <label for=\"due_date\" class=\"form-label\">Due Date</label>\r\n              <input \r\n                type=\"date\" \r\n                id=\"due_date\" \r\n                class=\"form-control\" \r\n                v-model=\"formData.due_date\"\r\n                :class=\"{ 'is-invalid': errors.due_date }\"\r\n              >\r\n              <div class=\"invalid-feedback\" v-if=\"errors.due_date\">\r\n                {{ errors.due_date }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"mb-3\">\r\n            <label for=\"description\" class=\"form-label\">Description</label>\r\n            <textarea \r\n              id=\"description\" \r\n              class=\"form-control\" \r\n              v-model=\"formData.description\"\r\n              rows=\"4\"\r\n              :class=\"{ 'is-invalid': errors.description }\"\r\n              placeholder=\"Provide details about the assessment...\"\r\n            ></textarea>\r\n            <div class=\"invalid-feedback\" v-if=\"errors.description\">\r\n              {{ errors.description }}\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"mb-3 form-check\">\r\n            <input \r\n              type=\"checkbox\" \r\n              class=\"form-check-input\" \r\n              id=\"is_final_exam\" \r\n              v-model=\"formData.is_final_exam\"\r\n            >\r\n            <label class=\"form-check-label\" for=\"is_final_exam\">\r\n              This is a final exam\r\n            </label>\r\n            <small class=\"form-text text-muted d-block\">\r\n              Mark this if this assessment is the final exam for the course.\r\n            </small>\r\n          </div>\r\n\r\n          <div class=\"mb-3 form-check\">\r\n            <input \r\n              type=\"checkbox\" \r\n              class=\"form-check-input\" \r\n              id=\"is_published\" \r\n              v-model=\"formData.is_published\"\r\n            >\r\n            <label class=\"form-check-label\" for=\"is_published\">\r\n              Publish to students\r\n            </label>\r\n            <small class=\"form-text text-muted d-block\">\r\n              If checked, students will be able to see this assessment in their course view.\r\n            </small>\r\n          </div>\r\n\r\n          <div class=\"d-flex justify-content-between mt-4\">\r\n            <button \r\n              type=\"button\" \r\n              class=\"btn btn-outline-secondary\" \r\n              @click=\"cancelForm\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button \r\n              type=\"submit\" \r\n              class=\"btn btn-primary\"\r\n              :disabled=\"!isFormValid || isSaving\"\r\n            >\r\n              <span v-if=\"isSaving\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n              {{ isEditing ? 'Update Assessment' : 'Create Assessment' }}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'AssessmentForm',\r\n  data() {\r\n    return {\r\n      formData: {\r\n        course_id: '',\r\n        name: '',\r\n        type: '',\r\n        description: '',\r\n        due_date: '',\r\n        weightage: 10,\r\n        max_mark: 100,\r\n        is_final_exam: false,\r\n        is_published: true\r\n      },\r\n      errors: {},\r\n      isSaving: false,\r\n      assessmentId: null,\r\n      courseIdFromQuery: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      isLoading: state => state.loading,\r\n      courses: state => state.courses.courses,\r\n      assessment: state => state.assessments.assessment\r\n    }),\r\n    ...mapGetters({\r\n      getCourseAssessments: 'assessments/getCourseAssessments'\r\n    }),\r\n    isEditing() {\r\n      return !!this.assessmentId;\r\n    },\r\n    lecturerCourses() {\r\n      return this.courses || [];\r\n    },\r\n    selectedCourse() {\r\n      if (!this.formData.course_id) return null;\r\n      return this.courses.find(course => course.id === parseInt(this.formData.course_id));\r\n    },\r\n    courseAssessments() {\r\n      if (!this.formData.course_id) return [];\r\n      return this.getCourseAssessments(this.formData.course_id) || [];\r\n    },\r\n    currentTotalWeightage() {\r\n      if (!this.formData.course_id) return this.formData.weightage || 0;\r\n      \r\n      // Calculate total weightage of all assessments in this course, including the current one if editing\r\n      let totalWeight = 0;\r\n      \r\n      this.courseAssessments.forEach(assessment => {\r\n        // Skip the current assessment when editing\r\n        if (this.isEditing && assessment.id === parseInt(this.assessmentId)) return;\r\n        totalWeight += assessment.weightage;\r\n      });\r\n      \r\n      // Add the current assessment weightage\r\n      totalWeight += this.formData.weightage || 0;\r\n      \r\n      return totalWeight;\r\n    },\r\n    isFormValid() {\r\n      return this.formData.course_id && \r\n             this.formData.name && \r\n             this.formData.type && \r\n             this.formData.weightage > 0 && \r\n             this.formData.max_mark > 0;\r\n    }\r\n  },\r\n  async created() {\r\n    // Check if we're editing an existing assessment\r\n    this.assessmentId = this.$route.params.id;\r\n    this.courseIdFromQuery = this.$route.query.courseId;\r\n    \r\n    try {\r\n      // Fetch lecturer's courses\r\n      await this.fetchCourses({ lecturerId: this.$store.getters['auth/userId'] });\r\n      \r\n      if (this.assessmentId) {\r\n        // Editing mode: fetch the assessment details\r\n        await this.fetchAssessment(this.assessmentId);\r\n        this.populateFormFromAssessment();\r\n      } else if (this.courseIdFromQuery) {\r\n        // Coming from a course page with pre-selected course\r\n        this.formData.course_id = parseInt(this.courseIdFromQuery);\r\n        // Fetch existing assessments for this course to calculate total weightage\r\n        await this.fetchAssessments({ courseId: this.formData.course_id });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading form data:', error);\r\n      this.$store.dispatch('setError', 'Failed to load assessment data');\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchCourses: 'courses/fetchCourses',\r\n      fetchAssessment: 'assessments/fetchAssessment',\r\n      fetchAssessments: 'assessments/fetchAssessments',\r\n      createAssessment: 'assessments/createAssessment',\r\n      updateAssessment: 'assessments/updateAssessment'\r\n    }),\r\n    populateFormFromAssessment() {\r\n      if (!this.assessment) return;\r\n      \r\n      this.formData = {\r\n        course_id: this.assessment.course_id,\r\n        name: this.assessment.name || '',\r\n        type: this.assessment.type || '',\r\n        description: this.assessment.description || '',\r\n        due_date: this.assessment.due_date ? this.formatDateForInput(this.assessment.due_date) : '',\r\n        weightage: this.assessment.weightage || 0,\r\n        max_mark: this.assessment.max_mark || 0,\r\n        is_final_exam: this.assessment.is_final_exam || false,\r\n        is_published: this.assessment.is_published || true\r\n      };\r\n      \r\n      // Fetch existing assessments for this course to calculate total weightage\r\n      this.fetchAssessments({ courseId: this.formData.course_id });\r\n    },\r\n    formatDateForInput(dateString) {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return date.toISOString().split('T')[0];\r\n    },\r\n    validateForm() {\r\n      this.errors = {};\r\n      \r\n      if (!this.formData.course_id) {\r\n        this.errors.course_id = 'Please select a course';\r\n      }\r\n      \r\n      if (!this.formData.name || this.formData.name.trim() === '') {\r\n        this.errors.name = 'Assessment name is required';\r\n      }\r\n      \r\n      if (!this.formData.type) {\r\n        this.errors.type = 'Please select an assessment type';\r\n      }\r\n      \r\n      if (!this.formData.weightage || this.formData.weightage <= 0) {\r\n        this.errors.weightage = 'Weightage must be greater than 0';\r\n      } else if (this.formData.weightage > 100) {\r\n        this.errors.weightage = 'Weightage cannot exceed 100%';\r\n      } else if (this.currentTotalWeightage > 100) {\r\n        this.errors.weightage = 'Total weightage exceeds 100%';\r\n      }\r\n      \r\n      if (!this.formData.max_mark || this.formData.max_mark <= 0) {\r\n        this.errors.max_mark = 'Maximum mark must be greater than 0';\r\n      }\r\n      \r\n      return Object.keys(this.errors).length === 0;\r\n    },\r\n    async saveAssessment() {\r\n      if (!this.validateForm()) return;\r\n      \r\n      this.isSaving = true;\r\n      \r\n      try {\r\n        if (this.isEditing) {\r\n          // Update existing assessment\r\n          await this.updateAssessment({\r\n            id: this.assessmentId,\r\n            ...this.formData\r\n          });\r\n          this.$store.dispatch('showToast', {\r\n            message: 'Assessment updated successfully',\r\n            type: 'success'\r\n          });\r\n        } else {\r\n          // Create new assessment\r\n          await this.createAssessment(this.formData);\r\n          this.$store.dispatch('showToast', {\r\n            message: 'Assessment created successfully',\r\n            type: 'success'\r\n          });\r\n        }\r\n        \r\n        // Navigate back to the course page\r\n        this.navigateBack();\r\n      } catch (error) {\r\n        console.error('Error saving assessment:', error);\r\n      } finally {\r\n        this.isSaving = false;\r\n      }\r\n    },\r\n    cancelForm() {\r\n      this.navigateBack();\r\n    },\r\n    navigateBack() {\r\n      if (this.formData.course_id) {\r\n        this.$router.push(`/lecturer/course/${this.formData.course_id}`);\r\n      } else {\r\n        this.$router.push('/lecturer/dashboard');\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.assessment-form h1 {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n}\r\n</style>\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\StudentDetail.vue",["165"],"<template>\r\n  <div class=\"student-detail\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/lecturer/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item\" v-if=\"course\">\r\n              <router-link :to=\"`/lecturer/course/${course.id}`\">\r\n                {{ course.code }} - {{ course.name }}\r\n              </router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              {{ student ? student.name : 'Student Details' }}\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">\r\n          <span v-if=\"student\">{{ student.name }}</span>\r\n          <span v-else>Student Details</span>\r\n        </h1>\r\n        <p class=\"text-muted\" v-if=\"student\">\r\n          {{ student.email }} | Student ID: {{ student.student_id || 'N/A' }}\r\n        </p>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-outline-primary\" @click=\"exportStudentData\">\r\n          <i class=\"fas fa-file-export me-2\"></i> Export Data\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"!student\" class=\"alert alert-danger\">\r\n      Student not found or you don't have access to this student's information.\r\n    </div>\r\n\r\n    <div v-else class=\"row\">\r\n      <div class=\"col-md-4 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Student Information</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"text-center mb-4\">\r\n              <div class=\"avatar-placeholder\">\r\n                <i class=\"fas fa-user fa-3x text-muted\"></i>\r\n              </div>\r\n              <h4 class=\"mt-3\">{{ student.name }}</h4>\r\n              <p class=\"text-muted mb-1\">{{ student.email }}</p>\r\n              <p class=\"badge bg-primary\">{{ student.role }}</p>\r\n            </div>\r\n\r\n            <table class=\"table table-sm\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>Student ID:</th>\r\n                  <td>{{ student.student_id || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Department:</th>\r\n                  <td>{{ student.department || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Year:</th>\r\n                  <td>{{ student.year || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Advisor:</th>\r\n                  <td>{{ advisorName || 'Not assigned' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Joined:</th>\r\n                  <td>{{ formatDate(student.created_at) }}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-8 mb-4\">\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n            <h5 class=\"mb-0\">Course Progress</h5>\r\n            <div v-if=\"course\">\r\n              <span class=\"text-muted\">Course: </span>\r\n              <strong>{{ course.code }} - {{ course.name }}</strong>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"!course\" class=\"text-center py-3\">\r\n              <p>No specific course selected. Showing overall performance.</p>\r\n            </div>\r\n            \r\n            <div v-if=\"studentMarks.length === 0\" class=\"text-center py-3\">\r\n              <p>No assessment marks recorded for this student yet.</p>\r\n            </div>\r\n            <div v-else>\r\n              <div class=\"mb-4\">\r\n                <h6>Overall Progress</h6>\r\n                <div class=\"d-flex justify-content-between mb-1\">\r\n                  <span>Current Mark: <strong>{{ overallMark }}%</strong></span>\r\n                  <span>{{ completedAssessments }} of {{ totalAssessments }} assessments completed</span>\r\n                </div>\r\n                <div class=\"progress\" style=\"height: 20px;\">\r\n                  <div \r\n                    class=\"progress-bar\" \r\n                    :class=\"getProgressBarClass(overallMark)\"\r\n                    role=\"progressbar\" \r\n                    :style=\"`width: ${overallMark}%`\"\r\n                    :aria-valuenow=\"overallMark\" \r\n                    aria-valuemin=\"0\" \r\n                    aria-valuemax=\"100\">\r\n                    {{ overallMark }}%\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"table-responsive\">\r\n                <table class=\"table table-hover\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Assessment</th>\r\n                      <th>Type</th>\r\n                      <th>Weight</th>\r\n                      <th>Mark</th>\r\n                      <th>Grade</th>\r\n                      <th>Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr v-for=\"mark in studentMarks\" :key=\"mark.id\">\r\n                      <td>{{ mark.assessment_name }}</td>\r\n                      <td>\r\n                        <span class=\"badge\" :class=\"getAssessmentTypeBadgeClass(mark.assessment_type)\">\r\n                          {{ mark.assessment_type }}\r\n                        </span>\r\n                      </td>\r\n                      <td>{{ mark.weightage }}%</td>\r\n                      <td>\r\n                        <strong>{{ mark.mark }}</strong> / {{ mark.max_mark }}\r\n                        <div class=\"small text-muted\">\r\n                          ({{ calculatePercentage(mark.mark, mark.max_mark) }}%)\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <span :class=\"getGradeClass(calculatePercentage(mark.mark, mark.max_mark))\">\r\n                          {{ calculateGrade(calculatePercentage(mark.mark, mark.max_mark)) }}\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <button \r\n                          class=\"btn btn-sm btn-outline-primary\" \r\n                          @click=\"editMark(mark)\"\r\n                        >\r\n                          <i class=\"fas fa-edit\"></i> Edit\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n            <h5 class=\"mb-0\">Feedback & Notes</h5>\r\n            <button class=\"btn btn-sm btn-primary\" @click=\"openAddNoteModal\">\r\n              <i class=\"fas fa-plus-circle me-1\"></i> Add Note\r\n            </button>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"studentNotes.length === 0\" class=\"text-center py-3\">\r\n              <p>No feedback or notes have been added for this student yet.</p>\r\n            </div>\r\n            <div v-else class=\"timeline\">\r\n              <div class=\"timeline-item\" v-for=\"(note, index) in studentNotes\" :key=\"index\">\r\n                <div class=\"timeline-item-icon\">\r\n                  <i :class=\"note.icon || 'fas fa-comment-alt'\"></i>\r\n                </div>\r\n                <div class=\"timeline-item-content\">\r\n                  <div class=\"d-flex justify-content-between align-items-start\">\r\n                    <h6>{{ note.title || 'Feedback' }}</h6>\r\n                    <div class=\"btn-group btn-group-sm\">\r\n                      <button class=\"btn btn-link text-secondary p-0\" @click=\"editNote(note)\">\r\n                        <i class=\"fas fa-edit\"></i>\r\n                      </button>\r\n                      <button class=\"btn btn-link text-danger p-0 ms-2\" @click=\"deleteNote(note)\">\r\n                        <i class=\"fas fa-trash\"></i>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                  <p>{{ note.content }}</p>\r\n                  <small class=\"text-muted\">\r\n                    {{ note.author || 'You' }} - {{ formatDate(note.created_at) }}\r\n                  </small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Edit Mark Modal -->\r\n    <div class=\"modal fade\" id=\"editMarkModal\" tabindex=\"-1\" aria-labelledby=\"editMarkModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"editMarkModalLabel\">Edit Mark</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <div v-if=\"selectedMark\">\r\n              <div class=\"mb-3\">\r\n                <label for=\"markInput\" class=\"form-label\">Mark for {{ selectedMark.assessment_name }}</label>\r\n                <div class=\"input-group\">\r\n                  <input \r\n                    type=\"number\" \r\n                    class=\"form-control\" \r\n                    id=\"markInput\" \r\n                    v-model.number=\"editMarkForm.mark\" \r\n                    :min=\"0\" \r\n                    :max=\"selectedMark.max_mark\"\r\n                  >\r\n                  <span class=\"input-group-text\">/ {{ selectedMark.max_mark }}</span>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label for=\"remarkInput\" class=\"form-label\">Feedback (optional)</label>\r\n                <textarea \r\n                  class=\"form-control\" \r\n                  id=\"remarkInput\" \r\n                  v-model=\"editMarkForm.remarks\" \r\n                  rows=\"3\"\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"saveMarkChanges\">Save Changes</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Add/Edit Note Modal -->\r\n    <div class=\"modal fade\" id=\"noteModal\" tabindex=\"-1\" aria-labelledby=\"noteModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"noteModalLabel\">{{ editingNote ? 'Edit Note' : 'Add Note' }}</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <div class=\"mb-3\">\r\n              <label for=\"noteTitle\" class=\"form-label\">Title</label>\r\n              <input \r\n                type=\"text\" \r\n                class=\"form-control\" \r\n                id=\"noteTitle\" \r\n                v-model=\"noteForm.title\" \r\n                placeholder=\"e.g., Attendance Issue, Good Progress\"\r\n              >\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <label for=\"noteContent\" class=\"form-label\">Content</label>\r\n              <textarea \r\n                class=\"form-control\" \r\n                id=\"noteContent\" \r\n                v-model=\"noteForm.content\" \r\n                rows=\"4\"\r\n                placeholder=\"Enter your note or feedback here...\"\r\n              ></textarea>\r\n            </div>\r\n            <div class=\"mb-3 form-check\">\r\n              <input type=\"checkbox\" class=\"form-check-input\" id=\"notifyStudent\" v-model=\"noteForm.notify_student\">\r\n              <label class=\"form-check-label\" for=\"notifyStudent\">Notify student</label>\r\n              <small class=\"text-muted d-block\">If checked, the student will be notified about this note.</small>\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"saveNoteChanges\">Save</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'StudentDetail',\r\n  data() {\r\n    return {\r\n      studentId: null,\r\n      courseId: null,\r\n      studentNotes: [],\r\n      selectedMark: null,\r\n      editMarkForm: {\r\n        mark: 0,\r\n        remarks: ''\r\n      },\r\n      noteForm: {\r\n        title: '',\r\n        content: '',\r\n        notify_student: false\r\n      },\r\n      editingNote: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      isLoading: state => state.loading,\r\n      course: state => state.courses.course,\r\n      student: state => state.users.user,\r\n      assessments: state => state.assessments.assessments,\r\n      marks: state => state.marks.marks\r\n    }),\r\n    ...mapGetters({\r\n      getCourseAssessments: 'assessments/getCourseAssessments'\r\n    }),\r\n    courseAssessments() {\r\n      if (!this.courseId) return [];\r\n      return this.getCourseAssessments(this.courseId) || [];\r\n    },\r\n    studentMarks() {\r\n      if (!this.student) return [];\r\n      \r\n      return this.marks.filter(mark => \r\n        mark.student_id === this.studentId && \r\n        (!this.courseId || mark.course_id === parseInt(this.courseId))\r\n      );\r\n    },\r\n    totalAssessments() {\r\n      return this.courseAssessments.length;\r\n    },\r\n    completedAssessments() {\r\n      return this.studentMarks.length;\r\n    },\r\n    overallMark() {\r\n      if (!this.studentMarks.length) return 0;\r\n      \r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      this.studentMarks.forEach(mark => {\r\n        const percentage = this.calculatePercentage(mark.mark, mark.max_mark);\r\n        weightedSum += percentage * mark.weightage;\r\n        totalWeight += parseInt(mark.weightage);\r\n      });\r\n      \r\n      if (totalWeight === 0) return 0;\r\n      return Math.round(weightedSum / totalWeight);\r\n    },\r\n    advisorName() {\r\n      return this.student?.advisor_name || 'Not assigned';\r\n    }\r\n  },\r\n  async created() {\r\n    this.studentId = parseInt(this.$route.params.id);\r\n    this.courseId = this.$route.query.courseId;\r\n    \r\n    try {\r\n      // Fetch student details\r\n      await this.fetchUser(this.studentId);\r\n      \r\n      if (this.courseId) {\r\n        // Fetch course details if a specific course is selected\r\n        await this.fetchCourse(this.courseId);\r\n        \r\n        // Fetch assessments for this course\r\n        await this.fetchAssessments({ courseId: this.courseId });\r\n      }\r\n      \r\n      // Fetch marks for this student\r\n      await this.fetchMarks({ \r\n        studentId: this.studentId,\r\n        courseId: this.courseId\r\n      });\r\n      \r\n      // Fetch notes for this student\r\n      await this.fetchStudentNotes();\r\n    } catch (error) {\r\n      console.error('Error loading student details:', error);\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchUser: 'users/fetchUser',\r\n      fetchCourse: 'courses/fetchCourse',\r\n      fetchAssessments: 'assessments/fetchAssessments',\r\n      fetchMarks: 'marks/fetchMarks',\r\n      updateMark: 'marks/updateMark'\r\n    }),\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not specified';\r\n      return new Date(dateString).toLocaleDateString();\r\n    },\r\n    calculatePercentage(mark, maxMark) {\r\n      if (!maxMark) return 0;\r\n      return Math.round((mark / maxMark) * 100);\r\n    },\r\n    getProgressBarClass(percentage) {\r\n      if (percentage >= 70) return 'bg-success';\r\n      if (percentage >= 50) return 'bg-warning';\r\n      return 'bg-danger';\r\n    },\r\n    getAssessmentTypeBadgeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    calculateGrade(percentage) {\r\n      if (percentage >= 90) return 'A+';\r\n      if (percentage >= 80) return 'A';\r\n      if (percentage >= 75) return 'B+';\r\n      if (percentage >= 70) return 'B';\r\n      if (percentage >= 65) return 'C+';\r\n      if (percentage >= 60) return 'C';\r\n      if (percentage >= 55) return 'D+';\r\n      if (percentage >= 50) return 'D';\r\n      return 'F';\r\n    },\r\n    getGradeClass(percentage) {\r\n      if (percentage >= 70) return 'text-success fw-bold';\r\n      if (percentage >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    editMark(mark) {\r\n      this.selectedMark = mark;\r\n      this.editMarkForm = {\r\n        mark: mark.mark,\r\n        remarks: mark.remarks || ''\r\n      };\r\n      \r\n      // In a real implementation, we would use Bootstrap's modal methods\r\n      // $('#editMarkModal').modal('show');\r\n    },\r\n    async saveMarkChanges() {\r\n      if (!this.selectedMark) return;\r\n      \r\n      try {\r\n        await this.updateMark({\r\n          id: this.selectedMark.id,\r\n          mark: this.editMarkForm.mark,\r\n          remarks: this.editMarkForm.remarks\r\n        });\r\n        \r\n        // Close modal\r\n        // $('#editMarkModal').modal('hide');\r\n        \r\n        this.$store.dispatch('showToast', {\r\n          message: 'Mark updated successfully',\r\n          type: 'success'\r\n        });\r\n        \r\n        this.selectedMark = null;\r\n      } catch (error) {\r\n        console.error('Error updating mark:', error);\r\n      }\r\n    },\r\n    async fetchStudentNotes() {\r\n      try {\r\n        // This would be replaced with an actual API call in a complete implementation\r\n        // For now, we'll use some sample data\r\n        this.studentNotes = [\r\n          {\r\n            id: 1,\r\n            title: 'Excellent Progress',\r\n            content: 'Student has shown significant improvement in recent assessments.',\r\n            author: 'Dr. Smith',\r\n            created_at: '2023-07-15',\r\n            icon: 'fas fa-thumbs-up'\r\n          },\r\n          {\r\n            id: 2,\r\n            title: 'Attendance Concern',\r\n            content: 'Student has missed multiple lab sessions. Please follow up.',\r\n            author: 'Prof. Johnson',\r\n            created_at: '2023-07-10',\r\n            icon: 'fas fa-exclamation-triangle'\r\n          }\r\n        ];\r\n      } catch (error) {\r\n        console.error('Error fetching student notes:', error);\r\n      }\r\n    },\r\n    openAddNoteModal() {\r\n      this.editingNote = null;\r\n      this.noteForm = {\r\n        title: '',\r\n        content: '',\r\n        notify_student: false\r\n      };\r\n      \r\n      // In a real implementation, we would use Bootstrap's modal methods\r\n      // $('#noteModal').modal('show');\r\n    },\r\n    editNote(note) {\r\n      this.editingNote = note;\r\n      this.noteForm = {\r\n        title: note.title,\r\n        content: note.content,\r\n        notify_student: false\r\n      };\r\n      \r\n      // In a real implementation, we would use Bootstrap's modal methods\r\n      // $('#noteModal').modal('show');\r\n    },\r\n    async saveNoteChanges() {\r\n      try {\r\n        if (this.editingNote) {\r\n          // Update existing note\r\n          const index = this.studentNotes.findIndex(note => note.id === this.editingNote.id);\r\n          if (index !== -1) {\r\n            this.studentNotes[index] = {\r\n              ...this.editingNote,\r\n              title: this.noteForm.title,\r\n              content: this.noteForm.content,\r\n              updated_at: new Date().toISOString().split('T')[0]\r\n            };\r\n          }\r\n          \r\n          this.$store.dispatch('showToast', {\r\n            message: 'Note updated successfully',\r\n            type: 'success'\r\n          });\r\n        } else {\r\n          // Add new note\r\n          const newNote = {\r\n            id: Date.now(), // Temporary ID for demo\r\n            title: this.noteForm.title,\r\n            content: this.noteForm.content,\r\n            author: 'You',\r\n            created_at: new Date().toISOString().split('T')[0],\r\n            icon: 'fas fa-comment-alt'\r\n          };\r\n          \r\n          this.studentNotes.unshift(newNote);\r\n          \r\n          this.$store.dispatch('showToast', {\r\n            message: 'Note added successfully',\r\n            type: 'success'\r\n          });\r\n        }\r\n        \r\n        // Close modal\r\n        // $('#noteModal').modal('hide');\r\n        \r\n        this.editingNote = null;\r\n      } catch (error) {\r\n        console.error('Error saving note:', error);\r\n      }\r\n    },\r\n    async deleteNote(note) {\r\n      if (!confirm(`Are you sure you want to delete the note \"${note.title}\"?`)) return;\r\n      \r\n      try {\r\n        this.studentNotes = this.studentNotes.filter(n => n.id !== note.id);\r\n        \r\n        this.$store.dispatch('showToast', {\r\n          message: 'Note deleted successfully',\r\n          type: 'success'\r\n        });\r\n      } catch (error) {\r\n        console.error('Error deleting note:', error);\r\n      }\r\n    },\r\n    exportStudentData() {\r\n      // This would initiate a download of student data in CSV format\r\n      // Implementation would need to call an API endpoint\r\n      this.$store.dispatch('showToast', {\r\n        message: 'Exporting student data...',\r\n        type: 'info'\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.student-detail h1 {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n}\r\n\r\n.avatar-placeholder {\r\n  width: 80px;\r\n  height: 80px;\r\n  border-radius: 50%;\r\n  background-color: #f8f9fa;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 0 auto;\r\n  border: 1px solid #dee2e6;\r\n}\r\n\r\n/* Timeline styling for notes */\r\n.timeline {\r\n  position: relative;\r\n  padding-left: 40px;\r\n}\r\n\r\n.timeline-item {\r\n  position: relative;\r\n  margin-bottom: 20px;\r\n  padding-bottom: 20px;\r\n  border-bottom: 1px solid #e9ecef;\r\n}\r\n\r\n.timeline-item:last-child {\r\n  border-bottom: none;\r\n  padding-bottom: 0;\r\n}\r\n\r\n.timeline-item:before {\r\n  content: \"\";\r\n  position: absolute;\r\n  left: -30px;\r\n  top: 0;\r\n  height: 100%;\r\n  width: 2px;\r\n  background-color: #e9ecef;\r\n}\r\n\r\n.timeline-item:last-child:before {\r\n  height: 50%;\r\n}\r\n\r\n.timeline-item-icon {\r\n  position: absolute;\r\n  left: -38px;\r\n  top: 0;\r\n  width: 16px;\r\n  height: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #fff;\r\n  border: 2px solid #007bff;\r\n  border-radius: 50%;\r\n}\r\n\r\n.timeline-item-icon i {\r\n  font-size: 8px;\r\n  color: #007bff;\r\n}\r\n</style>\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\advisor\\AdviseeList.vue",["166"],"<template>\r\n  <div class=\"advisee-list-container\">\r\n    <h1 class=\"mb-4\">My Advisees</h1>\r\n\r\n    <div class=\"card mb-4\">\r\n      <div class=\"card-body\">\r\n        <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n          <div class=\"search-wrapper\">\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              placeholder=\"Search advisees...\"\r\n              v-model=\"searchQuery\"\r\n            />\r\n          </div>\r\n          <div class=\"filter-wrapper\">\r\n            <select class=\"form-select\" v-model=\"programFilter\">\r\n              <option value=\"\">All Programs</option>\r\n              <option v-for=\"program in programs\" :key=\"program\" :value=\"program\">\r\n                {{ program }}\r\n              </option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"loading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"filteredAdvisees.length === 0\" class=\"alert alert-info\">\r\n      No advisees found.\r\n    </div>\r\n\r\n    <div v-else class=\"row\">\r\n      <div\r\n        v-for=\"advisee in filteredAdvisees\"\r\n        :key=\"advisee.id\"\r\n        class=\"col-md-6 col-lg-4 mb-4\"\r\n      >\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">{{ advisee.fullName }}</h5>\r\n            <p class=\"card-text text-muted\">{{ advisee.studentId }}</p>\r\n            <div class=\"mb-2\">\r\n              <span class=\"badge bg-secondary\">{{ advisee.program }}</span>\r\n            </div>\r\n            <p class=\"card-text\">\r\n              <small class=\"text-muted\">{{ advisee.email }}</small>\r\n            </p>\r\n          </div>\r\n          <div class=\"card-footer bg-white border-0\">\r\n            <router-link\r\n              :to=\"`/advisor/advisee/${advisee.id}`\"\r\n              class=\"btn btn-primary btn-sm w-100\"\r\n            >\r\n              View Details\r\n            </router-link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'AdviseeList',\r\n  data() {\r\n    return {\r\n      searchQuery: '',\r\n      programFilter: '',\r\n      loading: true\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState('users', ['advisees']),\r\n    programs() {\r\n      // Extract unique programs from advisees\r\n      return [...new Set(this.advisees.map(advisee => advisee.program))];\r\n    },\r\n    filteredAdvisees() {\r\n      return this.advisees.filter(advisee => {\r\n        const matchesSearch = advisee.fullName.toLowerCase().includes(this.searchQuery.toLowerCase()) ||\r\n          advisee.studentId.toLowerCase().includes(this.searchQuery.toLowerCase()) ||\r\n          advisee.email.toLowerCase().includes(this.searchQuery.toLowerCase());\r\n        \r\n        const matchesProgram = this.programFilter === '' || advisee.program === this.programFilter;\r\n        \r\n        return matchesSearch && matchesProgram;\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions('users', ['fetchAdvisees'])\r\n  },\r\n  async created() {\r\n    try {\r\n      await this.fetchAdvisees();\r\n    } catch (error) {\r\n      this.$toast.error('Failed to load advisees.');\r\n      console.error('Error fetching advisees:', error);\r\n    } finally {\r\n      this.loading = false;\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.advisee-list-container {\r\n  padding: 2rem 0;\r\n}\r\n\r\n.card {\r\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n  border: none;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.search-wrapper {\r\n  flex: 1;\r\n  max-width: 300px;\r\n  margin-right: 1rem;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .d-flex {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .search-wrapper,\r\n  .filter-wrapper {\r\n    width: 100%;\r\n    max-width: none;\r\n    margin-right: 0;\r\n    margin-bottom: 1rem;\r\n  }\r\n}\r\n</style>\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\advisor\\Dashboard.vue",["167"],"<template>\r\n  <div class=\"dashboard\">\r\n    <h1 class=\"mb-4\">Academic Advisor Dashboard</h1>\r\n    \r\n    <div class=\"row\">\r\n      <div class=\"col-md-8 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">My Advisees</h5>\r\n            <p class=\"card-text text-muted mb-4\">Students under your supervision</p>\r\n            \r\n            <div v-if=\"isLoading\" class=\"text-center py-4\">\r\n              <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div v-else-if=\"advisees.length === 0\" class=\"text-center py-4\">\r\n              <p>You have no advisees assigned yet.</p>\r\n              <i class=\"fas fa-user-graduate fa-3x text-muted mb-3\"></i>\r\n            </div>\r\n            \r\n            <div v-else class=\"table-responsive\">\r\n              <table class=\"table table-hover align-middle\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Student</th>\r\n                    <th>Matric Number</th>\r\n                    <th>Academic Status</th>\r\n                    <th>GPA</th>\r\n                    <th>Risk Level</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr v-for=\"student in advisees\" :key=\"student.id\">\r\n                    <td>\r\n                      <div class=\"d-flex align-items-center\">\r\n                        <div class=\"avatar avatar-sm me-2\">\r\n                          {{ getInitials(student.name) }}\r\n                        </div>\r\n                        <div>{{ student.name }}</div>\r\n                      </div>\r\n                    </td>\r\n                    <td>{{ student.matric_number }}</td>\r\n                    <td>{{ student.status }}</td>\r\n                    <td>{{ student.gpa }}</td>\r\n                    <td>\r\n                      <span class=\"badge\" :class=\"getRiskBadgeClass(student.risk)\">\r\n                        {{ student.risk }}\r\n                      </span>\r\n                    </td>\r\n                    <td>\r\n                      <div class=\"btn-group btn-group-sm\" role=\"group\">\r\n                        <router-link :to=\"`/advisor/advisee/${student.id}`\" class=\"btn btn-outline-primary\">\r\n                          <i class=\"fas fa-eye me-1\"></i> Details\r\n                        </router-link>\r\n                        <button class=\"btn btn-outline-info\" @click=\"addNote(student)\">\r\n                          <i class=\"fas fa-sticky-note\"></i>\r\n                        </button>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"col-md-4 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Risk Summary</h5>\r\n            <p class=\"card-text text-muted mb-4\">Overview of students at academic risk</p>\r\n            \r\n            <div v-if=\"isLoading\" class=\"text-center py-4\">\r\n              <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div v-else>\r\n              <canvas id=\"riskChart\" width=\"100\" height=\"100\"></canvas>\r\n              \r\n              <div class=\"risk-stats mt-4\">\r\n                <div class=\"risk-stat-item high\">\r\n                  <div class=\"risk-stat-value\">{{ highRiskCount }}</div>\r\n                  <div class=\"risk-stat-label\">High Risk</div>\r\n                </div>\r\n                <div class=\"risk-stat-item medium\">\r\n                  <div class=\"risk-stat-value\">{{ mediumRiskCount }}</div>\r\n                  <div class=\"risk-stat-label\">Medium Risk</div>\r\n                </div>\r\n                <div class=\"risk-stat-item low\">\r\n                  <div class=\"risk-stat-value\">{{ lowRiskCount }}</div>\r\n                  <div class=\"risk-stat-label\">Low Risk</div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"alert alert-warning mt-4\" v-if=\"highRiskCount > 0\">\r\n                <i class=\"fas fa-exclamation-triangle me-2\"></i>\r\n                You have {{ highRiskCount }} student(s) at high risk who need immediate attention.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 mb-4\">\r\n        <div class=\"card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Recent Notes</h5>\r\n            <p class=\"card-text text-muted mb-4\">Your latest meeting notes and observations</p>\r\n            \r\n            <div v-if=\"isLoading\" class=\"text-center py-4\">\r\n              <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div v-else-if=\"notes.length === 0\" class=\"text-center py-4\">\r\n              <p>You haven't added any notes yet.</p>\r\n              <i class=\"fas fa-clipboard fa-3x text-muted mb-3\"></i>\r\n            </div>\r\n            \r\n            <div v-else class=\"notes-grid\">\r\n              <div v-for=\"note in notes\" :key=\"note.id\" class=\"note-card\">\r\n                <div class=\"note-header\">\r\n                  <div class=\"note-student\">{{ note.student_name }}</div>\r\n                  <div class=\"note-date\">{{ formatDate(note.created_at) }}</div>\r\n                </div>\r\n                <div class=\"note-content\">{{ note.note }}</div>\r\n                <div class=\"note-footer\">\r\n                  <button class=\"btn btn-sm btn-outline-primary\" @click=\"editNote(note)\">\r\n                    <i class=\"fas fa-edit\"></i>\r\n                  </button>\r\n                  <button class=\"btn btn-sm btn-outline-danger\" @click=\"deleteNote(note)\">\r\n                    <i class=\"fas fa-trash\"></i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Add/Edit Note Modal -->\r\n    <div class=\"modal fade\" id=\"noteModal\" tabindex=\"-1\" aria-labelledby=\"noteModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"noteModalLabel\">\r\n              {{ currentNote.id ? 'Edit Note' : 'Add Note' }}\r\n            </h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <form @submit.prevent=\"saveNote\">\r\n              <div class=\"mb-3\" v-if=\"!currentNote.id\">\r\n                <label for=\"student\" class=\"form-label\">Student</label>\r\n                <select class=\"form-select\" id=\"student\" v-model=\"currentNote.student_id\" required>\r\n                  <option v-for=\"student in advisees\" :key=\"student.id\" :value=\"student.id\">\r\n                    {{ student.name }} ({{ student.matric_number }})\r\n                  </option>\r\n                </select>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label for=\"noteContent\" class=\"form-label\">Note</label>\r\n                <textarea \r\n                  class=\"form-control\" \r\n                  id=\"noteContent\" \r\n                  rows=\"5\" \r\n                  v-model=\"currentNote.note\" \r\n                  required\r\n                ></textarea>\r\n              </div>\r\n              <button type=\"submit\" class=\"btn btn-primary\">Save Note</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  name: 'AdvisorDashboard',\r\n  data() {\r\n    return {\r\n      advisees: [],\r\n      notes: [],\r\n      riskChart: null,\r\n      currentNote: {\r\n        id: null,\r\n        student_id: null,\r\n        note: ''\r\n      },\r\n      // Sample data for demonstration - in a real app, this would come from the API\r\n      adviseesData: [\r\n        {\r\n          id: 1,\r\n          name: 'John Smith',\r\n          matric_number: 'A12345',\r\n          status: 'Good Standing',\r\n          gpa: 3.5,\r\n          risk: 'Low'\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'Emily Johnson',\r\n          matric_number: 'A23456',\r\n          status: 'Warning',\r\n          gpa: 1.8,\r\n          risk: 'High'\r\n        },\r\n        {\r\n          id: 3,\r\n          name: 'Michael Brown',\r\n          matric_number: 'A34567',\r\n          status: 'Probation',\r\n          gpa: 2.1,\r\n          risk: 'Medium'\r\n        },\r\n        {\r\n          id: 4,\r\n          name: 'Sarah Davis',\r\n          matric_number: 'A45678',\r\n          status: 'Good Standing',\r\n          gpa: 3.2,\r\n          risk: 'Low'\r\n        },\r\n        {\r\n          id: 5,\r\n          name: 'David Wilson',\r\n          matric_number: 'A56789',\r\n          status: 'Warning',\r\n          gpa: 1.9,\r\n          risk: 'High'\r\n        }\r\n      ],\r\n      notesData: [\r\n        {\r\n          id: 1,\r\n          student_id: 2,\r\n          student_name: 'Emily Johnson',\r\n          note: 'Discussed academic improvement plan. Student committed to attending all classes and seeking tutoring for difficult subjects.',\r\n          created_at: '2023-09-15T10:30:00'\r\n        },\r\n        {\r\n          id: 2,\r\n          student_id: 3,\r\n          student_name: 'Michael Brown',\r\n          note: 'Reviewed midterm results and identified areas for improvement. Recommended study group and additional practice problems.',\r\n          created_at: '2023-09-10T14:15:00'\r\n        },\r\n        {\r\n          id: 3,\r\n          student_id: 5,\r\n          student_name: 'David Wilson',\r\n          note: 'Student expressed concerns about workload. Discussed time management strategies and prioritization techniques.',\r\n          created_at: '2023-09-05T09:45:00'\r\n        }\r\n      ]\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters(['isLoading']),\r\n    ...mapGetters('auth', ['getUser']),\r\n    \r\n    highRiskCount() {\r\n      return this.advisees.filter(s => s.risk === 'High').length;\r\n    },\r\n    mediumRiskCount() {\r\n      return this.advisees.filter(s => s.risk === 'Medium').length;\r\n    },\r\n    lowRiskCount() {\r\n      return this.advisees.filter(s => s.risk === 'Low').length;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadData();\r\n  },\r\n  methods: {\r\n    async loadData() {\r\n      try {\r\n        // In a real app, we would fetch the advisor's advisees and notes from the API\r\n        // For now, using sample data\r\n        this.advisees = this.adviseesData;\r\n        this.notes = this.notesData;\r\n        \r\n        this.$nextTick(() => {\r\n          this.initRiskChart();\r\n        });\r\n      } catch (error) {\r\n        console.error('Error loading dashboard data:', error);\r\n      }\r\n    },\r\n    \r\n    getInitials(name) {\r\n      return name\r\n        .split(' ')\r\n        .map(n => n[0])\r\n        .join('')\r\n        .toUpperCase();\r\n    },\r\n    \r\n    getRiskBadgeClass(risk) {\r\n      switch (risk) {\r\n        case 'High': return 'bg-danger';\r\n        case 'Medium': return 'bg-warning';\r\n        case 'Low': return 'bg-success';\r\n        default: return 'bg-secondary';\r\n      }\r\n    },\r\n    \r\n    formatDate(dateString) {\r\n      if (!dateString) return '';\r\n      \r\n      const date = new Date(dateString);\r\n      return date.toLocaleDateString('en-GB', {\r\n        day: 'numeric',\r\n        month: 'short',\r\n        year: 'numeric'\r\n      });\r\n    },\r\n    \r\n    initRiskChart() {\r\n      const ctx = document.getElementById('riskChart');\r\n      \r\n      if (this.riskChart) {\r\n        this.riskChart.destroy();\r\n      }\r\n      \r\n      this.riskChart = new Chart(ctx, {\r\n        type: 'doughnut',\r\n        data: {\r\n          labels: ['High Risk', 'Medium Risk', 'Low Risk'],\r\n          datasets: [{\r\n            data: [this.highRiskCount, this.mediumRiskCount, this.lowRiskCount],\r\n            backgroundColor: ['#e74c3c', '#f39c12', '#2ecc71'],\r\n            borderWidth: 0\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          plugins: {\r\n            legend: {\r\n              position: 'bottom'\r\n            }\r\n          },\r\n          cutout: '65%'\r\n        }\r\n      });\r\n    },\r\n    \r\n    addNote(student = null) {\r\n      this.currentNote = {\r\n        id: null,\r\n        student_id: student ? student.id : null,\r\n        note: ''\r\n      };\r\n      \r\n      const modal = new bootstrap.Modal(document.getElementById('noteModal'));\r\n      modal.show();\r\n    },\r\n    \r\n    editNote(note) {\r\n      this.currentNote = { ...note };\r\n      \r\n      const modal = new bootstrap.Modal(document.getElementById('noteModal'));\r\n      modal.show();\r\n    },\r\n    \r\n    async saveNote() {\r\n      try {\r\n        // In a real app, we would save the note to the API\r\n        if (this.currentNote.id) {\r\n          // Update existing note\r\n          const index = this.notes.findIndex(n => n.id === this.currentNote.id);\r\n          if (index !== -1) {\r\n            this.notes[index] = { ...this.currentNote };\r\n          }\r\n        } else {\r\n          // Add new note\r\n          const student = this.advisees.find(s => s.id === this.currentNote.student_id);\r\n          const newNote = {\r\n            id: Date.now(), // temporary ID\r\n            student_id: this.currentNote.student_id,\r\n            student_name: student.name,\r\n            note: this.currentNote.note,\r\n            created_at: new Date().toISOString()\r\n          };\r\n          \r\n          this.notes.unshift(newNote);\r\n        }\r\n        \r\n        // Close the modal\r\n        const modalElement = document.getElementById('noteModal');\r\n        const modal = bootstrap.Modal.getInstance(modalElement);\r\n        modal.hide();\r\n        \r\n        // Show success message\r\n        this.$store.dispatch('showToast', {\r\n          message: `Note ${this.currentNote.id ? 'updated' : 'added'} successfully`,\r\n          type: 'success'\r\n        });\r\n      } catch (error) {\r\n        console.error('Error saving note:', error);\r\n      }\r\n    },\r\n    \r\n    async deleteNote(note) {\r\n      if (confirm('Are you sure you want to delete this note?')) {\r\n        try {\r\n          // In a real app, we would delete the note via the API\r\n          this.notes = this.notes.filter(n => n.id !== note.id);\r\n          \r\n          // Show success message\r\n          this.$store.dispatch('showToast', {\r\n            message: 'Note deleted successfully',\r\n            type: 'success'\r\n          });\r\n        } catch (error) {\r\n          console.error('Error deleting note:', error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard h1 {\r\n  color: #2c3e50;\r\n  font-weight: 700;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  border: none;\r\n  border-radius: 10px;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.card-title {\r\n  color: #2c3e50;\r\n  font-weight: 600;\r\n}\r\n\r\n.avatar {\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  background-color: #3498db;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 0.8rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.badge {\r\n  padding: 6px 10px;\r\n  font-weight: 500;\r\n}\r\n\r\n.risk-stats {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  text-align: center;\r\n  margin-top: 20px;\r\n}\r\n\r\n.risk-stat-item {\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  min-width: 80px;\r\n}\r\n\r\n.risk-stat-value {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n}\r\n\r\n.risk-stat-label {\r\n  font-size: 12px;\r\n  opacity: 0.7;\r\n}\r\n\r\n.risk-stat-item.high {\r\n  color: #e74c3c;\r\n  background-color: rgba(231, 76, 60, 0.1);\r\n}\r\n\r\n.risk-stat-item.medium {\r\n  color: #f39c12;\r\n  background-color: rgba(243, 156, 18, 0.1);\r\n}\r\n\r\n.risk-stat-item.low {\r\n  color: #2ecc71;\r\n  background-color: rgba(46, 204, 113, 0.1);\r\n}\r\n\r\n.notes-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.note-card {\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\r\n  padding: 15px;\r\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n}\r\n\r\n.note-card:hover {\r\n  transform: translateY(-3px);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.note-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.note-student {\r\n  font-weight: 600;\r\n  color: #2c3e50;\r\n}\r\n\r\n.note-date {\r\n  font-size: 0.8rem;\r\n  color: #7f8c8d;\r\n}\r\n\r\n.note-content {\r\n  color: #34495e;\r\n  margin-bottom: 15px;\r\n  white-space: pre-line;\r\n}\r\n\r\n.note-footer {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 10px;\r\n}\r\n</style>\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\CourseDetail.vue",["168"],"<template>\r\n  <div class=\"course-detail\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/lecturer/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              {{ course?.code }} - {{ course?.name }}\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">{{ course?.name }}</h1>\r\n        <p class=\"text-muted\">\r\n          {{ course?.code }} | {{ course?.semester || 'No semester specified' }}\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <div class=\"btn-group\">\r\n          <button class=\"btn btn-outline-primary\" @click=\"exportCourseData\">\r\n            <i class=\"fas fa-file-export me-2\"></i> Export Data\r\n          </button>\r\n          <button class=\"btn btn-outline-primary\" @click=\"openEditCourseModal\">\r\n            <i class=\"fas fa-edit me-2\"></i> Edit Course\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else class=\"row\">\r\n      <div class=\"col-md-4 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n            <h5 class=\"mb-0\">Course Information</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <table class=\"table table-sm\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>Code:</th>\r\n                  <td>{{ course?.code }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Name:</th>\r\n                  <td>{{ course?.name }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Semester:</th>\r\n                  <td>{{ course?.semester || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Credits:</th>\r\n                  <td>{{ course?.credits || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Students:</th>\r\n                  <td>{{ enrolledStudents.length }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Assessments:</th>\r\n                  <td>{{ courseAssessments.length }}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <div v-if=\"course?.description\" class=\"mt-3\">\r\n              <h6>Description</h6>\r\n              <p>{{ course.description }}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-8 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n            <h5 class=\"mb-0\">Assessment Breakdown</h5>\r\n            <button class=\"btn btn-sm btn-primary\" @click=\"navigateToCreateAssessment\">\r\n              <i class=\"fas fa-plus-circle me-2\"></i> Add Assessment\r\n            </button>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"courseAssessments.length === 0\" class=\"text-center py-4\">\r\n              <p class=\"mb-3\">No assessments have been added to this course yet.</p>\r\n              <button class=\"btn btn-primary\" @click=\"navigateToCreateAssessment\">\r\n                <i class=\"fas fa-plus-circle me-2\"></i> Create First Assessment\r\n              </button>\r\n            </div>\r\n            <div v-else>\r\n              <div class=\"mb-4\">\r\n                <div class=\"progress\" style=\"height: 30px;\">\r\n                  <div v-for=\"assessment in courseAssessments\" \r\n                       :key=\"assessment.id\"\r\n                       class=\"progress-bar\" \r\n                       :class=\"getAssessmentTypeClass(assessment.type)\"\r\n                       :style=\"`width: ${assessment.weightage}%`\"\r\n                       :title=\"`${assessment.name} (${assessment.weightage}%)`\">\r\n                    {{ assessment.weightage }}%\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"table-responsive\">\r\n                <table class=\"table table-hover\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Name</th>\r\n                      <th>Type</th>\r\n                      <th>Weight</th>\r\n                      <th>Due Date</th>\r\n                      <th>Status</th>\r\n                      <th>Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr v-for=\"assessment in courseAssessments\" :key=\"assessment.id\">\r\n                      <td>\r\n                        <strong>{{ assessment.name }}</strong>\r\n                        <div class=\"small text-muted\">{{ assessment.description }}</div>\r\n                      </td>\r\n                      <td>\r\n                        <span class=\"badge\" :class=\"getAssessmentTypeBadgeClass(assessment.type)\">\r\n                          {{ assessment.type }}\r\n                        </span>\r\n                      </td>\r\n                      <td>{{ assessment.weightage }}%</td>\r\n                      <td>{{ formatDate(assessment.due_date) }}</td>\r\n                      <td>\r\n                        <span class=\"badge\" :class=\"getAssessmentStatusBadgeClass(assessment)\">\r\n                          {{ getAssessmentStatus(assessment) }}\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <div class=\"btn-group btn-group-sm\">\r\n                          <button class=\"btn btn-outline-primary\" @click=\"navigateToEnterMarks(assessment)\">\r\n                            <i class=\"fas fa-calculator\"></i>\r\n                          </button>\r\n                          <button class=\"btn btn-outline-secondary\" @click=\"navigateToEditAssessment(assessment)\">\r\n                            <i class=\"fas fa-edit\"></i>\r\n                          </button>\r\n                          <button class=\"btn btn-outline-danger\" @click=\"confirmDeleteAssessment(assessment)\">\r\n                            <i class=\"fas fa-trash\"></i>\r\n                          </button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 mb-4\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n            <h5 class=\"mb-0\">Enrolled Students</h5>\r\n            <div class=\"input-group w-25\">\r\n              <input \r\n                type=\"text\" \r\n                class=\"form-control\" \r\n                placeholder=\"Search students...\" \r\n                v-model=\"studentSearchQuery\"\r\n              >\r\n              <button class=\"btn btn-outline-secondary\" type=\"button\">\r\n                <i class=\"fas fa-search\"></i>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"enrolledStudents.length === 0\" class=\"text-center py-4\">\r\n              <p>No students are enrolled in this course yet.</p>\r\n            </div>\r\n            <div v-else class=\"table-responsive\">\r\n              <table class=\"table table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Student ID</th>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Overall Progress</th>\r\n                    <th>Current Mark</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr v-for=\"student in filteredStudents\" :key=\"student.id\">\r\n                    <td>{{ student.student_id || 'N/A' }}</td>\r\n                    <td>{{ student.name }}</td>\r\n                    <td>{{ student.email }}</td>\r\n                    <td>\r\n                      <div class=\"progress\">\r\n                        <div \r\n                          class=\"progress-bar bg-success\" \r\n                          role=\"progressbar\"\r\n                          :style=\"`width: ${getStudentProgress(student.id)}%`\"\r\n                          :aria-valuenow=\"getStudentProgress(student.id)\" \r\n                          aria-valuemin=\"0\" \r\n                          aria-valuemax=\"100\">\r\n                          {{ getStudentProgress(student.id) }}%\r\n                        </div>\r\n                      </div>\r\n                    </td>\r\n                    <td>\r\n                      <span \r\n                        :class=\"getMarkClass(getStudentCurrentMark(student.id))\">\r\n                        {{ getStudentCurrentMark(student.id) }}\r\n                      </span>\r\n                    </td>\r\n                    <td>\r\n                      <div class=\"btn-group btn-group-sm\">\r\n                        <button class=\"btn btn-outline-primary\" @click=\"navigateToStudentDetail(student)\">\r\n                          <i class=\"fas fa-user me-1\"></i> Details\r\n                        </button>\r\n                        <button class=\"btn btn-outline-secondary\" @click=\"navigateToStudentMarks(student)\">\r\n                          <i class=\"fas fa-calculator me-1\"></i> Marks\r\n                        </button>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Edit Course Modal -->\r\n    <div class=\"modal fade\" id=\"editCourseModal\" tabindex=\"-1\" aria-labelledby=\"editCourseModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"editCourseModalLabel\">Edit Course</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <!-- Course edit form will go here -->\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"saveCourseChanges\">Save Changes</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Delete Assessment Confirmation Modal -->\r\n    <div class=\"modal fade\" id=\"deleteAssessmentModal\" tabindex=\"-1\" aria-labelledby=\"deleteAssessmentModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"deleteAssessmentModalLabel\">Confirm Deletion</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            Are you sure you want to delete the assessment \"{{ assessmentToDelete?.name }}\"? This action cannot be undone.\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n            <button type=\"button\" class=\"btn btn-danger\" @click=\"deleteAssessment\">Delete</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'CourseDetail',\r\n  data() {\r\n    return {\r\n      courseId: null,\r\n      studentSearchQuery: '',\r\n      assessmentToDelete: null,\r\n      editFormData: {\r\n        code: '',\r\n        name: '',\r\n        semester: '',\r\n        credits: '',\r\n        description: ''\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      isLoading: state => state.loading,\r\n      course: state => state.courses.course,\r\n    }),\r\n    ...mapGetters({\r\n      getCourseAssessments: 'assessments/getCourseAssessments'\r\n    }),\r\n    courseAssessments() {\r\n      return this.getCourseAssessments(this.courseId) || [];\r\n    },\r\n    enrolledStudents() {\r\n      // This would be populated from a store getter once implemented\r\n      return this.$store.state.users.courseStudents || [];\r\n    },\r\n    filteredStudents() {\r\n      if (!this.studentSearchQuery) {\r\n        return this.enrolledStudents;\r\n      }\r\n      \r\n      const query = this.studentSearchQuery.toLowerCase();\r\n      return this.enrolledStudents.filter(student => \r\n        student.name.toLowerCase().includes(query) || \r\n        student.email.toLowerCase().includes(query) ||\r\n        (student.student_id && student.student_id.toString().includes(query))\r\n      );\r\n    }\r\n  },\r\n  async created() {\r\n    this.courseId = this.$route.params.id;\r\n    try {\r\n      // Fetch course details\r\n      await this.fetchCourse(this.courseId);\r\n      \r\n      // Fetch course assessments\r\n      await this.fetchAssessments({ courseId: this.courseId });\r\n      \r\n      // Fetch enrolled students\r\n      await this.fetchCourseStudents(this.courseId);\r\n      \r\n      // Fetch marks for this course\r\n      await this.fetchMarks({ courseId: this.courseId });\r\n      \r\n      // Initialize edit form data\r\n      this.initializeEditForm();\r\n    } catch (error) {\r\n      console.error('Error loading course details:', error);\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchCourse: 'courses/fetchCourse',\r\n      fetchAssessments: 'assessments/fetchAssessments',\r\n      fetchMarks: 'marks/fetchMarks',\r\n      updateCourse: 'courses/updateCourse',\r\n      deleteAssessmentAction: 'assessments/deleteAssessment'\r\n    }),\r\n    async fetchCourseStudents(courseId) {\r\n      try {\r\n        // This action would need to be implemented in the users store module\r\n        await this.$store.dispatch('users/fetchCourseStudents', courseId);\r\n      } catch (error) {\r\n        console.error('Error fetching course students:', error);\r\n      }\r\n    },\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not set';\r\n      return new Date(dateString).toLocaleDateString();\r\n    },\r\n    getAssessmentTypeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    getAssessmentTypeBadgeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    getAssessmentStatus(assessment) {\r\n      const today = new Date();\r\n      const dueDate = new Date(assessment.due_date);\r\n      \r\n      if (assessment.marks_entered) {\r\n        return 'Marked';\r\n      } else if (dueDate < today) {\r\n        return 'Overdue';\r\n      } else if (dueDate.getTime() - today.getTime() < 7 * 24 * 60 * 60 * 1000) {\r\n        return 'Upcoming';\r\n      } else {\r\n        return 'Scheduled';\r\n      }\r\n    },\r\n    getAssessmentStatusBadgeClass(assessment) {\r\n      const status = this.getAssessmentStatus(assessment);\r\n      const classes = {\r\n        'Marked': 'bg-success',\r\n        'Overdue': 'bg-danger',\r\n        'Upcoming': 'bg-warning',\r\n        'Scheduled': 'bg-info'\r\n      };\r\n      return classes[status] || 'bg-secondary';\r\n    },\r\n    getStudentProgress(studentId) {\r\n      // Calculate what percentage of assessments the student has completed\r\n      const studentMarks = this.$store.state.marks.marks.filter(mark => \r\n        mark.student_id === studentId && mark.course_id === parseInt(this.courseId)\r\n      );\r\n      \r\n      if (this.courseAssessments.length === 0) return 0;\r\n      \r\n      return Math.round((studentMarks.length / this.courseAssessments.length) * 100);\r\n    },\r\n    getStudentCurrentMark(studentId) {\r\n      // Calculate the current weighted average for this student\r\n      const studentMarks = this.$store.state.marks.marks.filter(mark => \r\n        mark.student_id === studentId && mark.course_id === parseInt(this.courseId)\r\n      );\r\n      \r\n      if (studentMarks.length === 0) return 'N/A';\r\n      \r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      studentMarks.forEach(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (assessment) {\r\n          weightedSum += (mark.mark / assessment.max_mark) * assessment.weightage;\r\n          totalWeight += assessment.weightage;\r\n        }\r\n      });\r\n      \r\n      if (totalWeight === 0) return 'N/A';\r\n      \r\n      const averageMark = Math.round((weightedSum / totalWeight) * 100);\r\n      return `${averageMark}%`;\r\n    },\r\n    getMarkClass(markString) {\r\n      if (markString === 'N/A') return 'text-muted';\r\n      \r\n      const mark = parseInt(markString);\r\n      if (isNaN(mark)) return 'text-muted';\r\n      \r\n      if (mark >= 70) return 'text-success fw-bold';\r\n      if (mark >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    navigateToCreateAssessment() {\r\n      this.$router.push({ \r\n        name: 'CreateAssessment',\r\n        query: { courseId: this.courseId }\r\n      });\r\n    },\r\n    navigateToEditAssessment(assessment) {\r\n      this.$router.push({ \r\n        name: 'EditAssessment', \r\n        params: { id: assessment.id }\r\n      });\r\n    },\r\n    navigateToEnterMarks(assessment) {\r\n      // This route would need to be added to the router\r\n      this.$router.push({ \r\n        name: 'EnterMarks', \r\n        params: { id: assessment.id }\r\n      });\r\n    },\r\n    navigateToStudentDetail(student) {\r\n      this.$router.push({ \r\n        name: 'StudentDetail', \r\n        params: { id: student.id },\r\n        query: { courseId: this.courseId }\r\n      });\r\n    },\r\n    navigateToStudentMarks(student) {\r\n      // This route would need to be added to the router\r\n      this.$router.push({ \r\n        name: 'StudentMarks', \r\n        params: { studentId: student.id, courseId: this.courseId }\r\n      });\r\n    },\r\n    openEditCourseModal() {\r\n      this.initializeEditForm();\r\n      // In a real implementation, we would use Bootstrap's modal methods\r\n      // $('#editCourseModal').modal('show');\r\n    },\r\n    initializeEditForm() {\r\n      if (this.course) {\r\n        this.editFormData = {\r\n          code: this.course.code || '',\r\n          name: this.course.name || '',\r\n          semester: this.course.semester || '',\r\n          credits: this.course.credits || '',\r\n          description: this.course.description || ''\r\n        };\r\n      }\r\n    },\r\n    async saveCourseChanges() {\r\n      try {\r\n        await this.updateCourse({\r\n          id: this.courseId,\r\n          ...this.editFormData\r\n        });\r\n        // Close modal\r\n        // $('#editCourseModal').modal('hide');\r\n        this.$store.dispatch('showToast', {\r\n          message: 'Course updated successfully',\r\n          type: 'success'\r\n        });\r\n      } catch (error) {\r\n        console.error('Error updating course:', error);\r\n      }\r\n    },\r\n    confirmDeleteAssessment(assessment) {\r\n      this.assessmentToDelete = assessment;\r\n      // In a real implementation, we would use Bootstrap's modal methods\r\n      // $('#deleteAssessmentModal').modal('show');\r\n    },\r\n    async deleteAssessment() {\r\n      if (!this.assessmentToDelete) return;\r\n      \r\n      try {\r\n        await this.deleteAssessmentAction(this.assessmentToDelete.id);\r\n        // Close modal\r\n        // $('#deleteAssessmentModal').modal('hide');\r\n        this.$store.dispatch('showToast', {\r\n          message: 'Assessment deleted successfully',\r\n          type: 'success'\r\n        });\r\n        this.assessmentToDelete = null;\r\n      } catch (error) {\r\n        console.error('Error deleting assessment:', error);\r\n      }\r\n    },\r\n    exportCourseData() {\r\n      // This would initiate a download of course data in CSV format\r\n      // Implementation would need to call an API endpoint\r\n      this.$store.dispatch('showToast', {\r\n        message: 'Exporting course data...',\r\n        type: 'info'\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.course-detail h1 {\r\n  font-size: 2rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.progress {\r\n  height: 20px;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n}\r\n\r\n.card-header {\r\n  background-color: rgba(0, 0, 0, 0.03);\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.125);\r\n}\r\n\r\n.table th {\r\n  font-weight: 600;\r\n}\r\n\r\n.badge {\r\n  font-weight: 500;\r\n  padding: 0.35em 0.65em;\r\n}\r\n\r\n/* Timeline styling for recent activities */\r\n.timeline {\r\n  position: relative;\r\n  padding-left: 40px;\r\n}\r\n\r\n.timeline-item {\r\n  position: relative;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.timeline-item:before {\r\n  content: \"\";\r\n  position: absolute;\r\n  left: -30px;\r\n  top: 0;\r\n  height: 100%;\r\n  width: 2px;\r\n  background-color: #e9ecef;\r\n}\r\n\r\n.timeline-item:last-child:before {\r\n  height: 50%;\r\n}\r\n\r\n.timeline-item-icon {\r\n  position: absolute;\r\n  left: -38px;\r\n  top: 0;\r\n  width: 16px;\r\n  height: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #fff;\r\n  border: 2px solid #007bff;\r\n  border-radius: 50%;\r\n}\r\n\r\n.timeline-item-icon i {\r\n  font-size: 8px;\r\n  color: #007bff;\r\n}\r\n</style>\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\Dashboard.vue",["169","170","171","172"],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\student\\MarkSimulation.vue",["173"],"<template>\r\n  <div class=\"mark-simulation\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/student/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link :to=\"`/student/course/${courseId}`\">\r\n                {{ course?.code }} - {{ course?.name }}\r\n              </router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Grade Simulator\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">Grade Simulator</h1>\r\n        <p class=\"text-muted\">\r\n          {{ course?.code }} | {{ course?.name }}\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"!course\" class=\"alert alert-danger\">\r\n      Course not found or you don't have access to this course.\r\n    </div>\r\n\r\n    <div v-else class=\"row\">\r\n      <div class=\"col-md-8 mb-4\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Assessment Marks</h5>\r\n            <p class=\"text-muted small mb-0\">\r\n              Enter hypothetical marks for assessments to simulate your final grade\r\n            </p>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"alert alert-info mb-4\">\r\n              <i class=\"fas fa-info-circle me-2\"></i>\r\n              Enter the marks you expect to get for assessments that haven't been graded yet. Your actual marks are pre-filled where available.\r\n            </div>\r\n\r\n            <div class=\"table-responsive\">\r\n              <table class=\"table table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Assessment</th>\r\n                    <th>Type</th>\r\n                    <th>Weight</th>\r\n                    <th>Status</th>\r\n                    <th>Mark</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr v-for=\"assessment in sortedAssessments\" :key=\"assessment.id\">\r\n                    <td>\r\n                      <strong>{{ assessment.name }}</strong>\r\n                    </td>\r\n                    <td>\r\n                      <span class=\"badge\" :class=\"getAssessmentTypeBadgeClass(assessment.type)\">\r\n                        {{ assessment.type }}\r\n                      </span>\r\n                    </td>\r\n                    <td>{{ assessment.weightage }}%</td>\r\n                    <td>\r\n                      <span \r\n                        class=\"badge\" \r\n                        :class=\"getStatusBadge(assessment)\"\r\n                      >\r\n                        {{ getAssessmentStatus(assessment) }}\r\n                      </span>\r\n                    </td>\r\n                    <td style=\"width: 180px;\">\r\n                      <div v-if=\"hasMarkForAssessment(assessment.id) && !isSimulatedAssessment(assessment.id)\">\r\n                        <div class=\"input-group input-group-sm disabled\">\r\n                          <input \r\n                            type=\"number\" \r\n                            class=\"form-control bg-light\"\r\n                            :value=\"getMarkForAssessment(assessment.id).mark\"\r\n                            disabled\r\n                          >\r\n                          <span class=\"input-group-text\">/ {{ assessment.max_mark }}</span>\r\n                        </div>\r\n                        <small class=\"text-muted\">Actual mark ({{ calculatePercentage(getMarkForAssessment(assessment.id).mark, assessment.max_mark) }}%)</small>\r\n                      </div>\r\n                      <div v-else>\r\n                        <div class=\"input-group input-group-sm\">\r\n                          <input \r\n                            type=\"number\" \r\n                            class=\"form-control\"\r\n                            v-model.number=\"simulatedMarks[assessment.id]\"\r\n                            :min=\"0\" \r\n                            :max=\"assessment.max_mark\"\r\n                            @input=\"updateSimulation\"\r\n                          >\r\n                          <span class=\"input-group-text\">/ {{ assessment.max_mark }}</span>\r\n                        </div>\r\n                        <small class=\"text-muted\" v-if=\"simulatedMarks[assessment.id] !== undefined\">\r\n                          Simulated ({{ calculatePercentage(simulatedMarks[assessment.id], assessment.max_mark) }}%)\r\n                        </small>\r\n                        <small class=\"text-muted\" v-else>\r\n                          Enter expected mark\r\n                        </small>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div class=\"d-flex justify-content-end mt-3\">\r\n              <button class=\"btn btn-outline-secondary me-2\" @click=\"resetSimulation\">\r\n                Reset Simulation\r\n              </button>\r\n              <div class=\"dropdown\">\r\n                <button \r\n                  class=\"btn btn-outline-primary dropdown-toggle\" \r\n                  type=\"button\" \r\n                  id=\"presetDropdown\" \r\n                  data-bs-toggle=\"dropdown\" \r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Apply Preset\r\n                </button>\r\n                <ul class=\"dropdown-menu\" aria-labelledby=\"presetDropdown\">\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('best')\">Best Case (90%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('good')\">Good Case (75%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('average')\">Average Case (65%)</a></li>\r\n                  <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"applyPreset('minimal')\">Minimal Pass (50%)</a></li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-4 mb-4\">\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Simulation Results</h5>\r\n          </div>\r\n          <div class=\"card-body text-center\">\r\n            <div class=\"mb-4\">\r\n              <div class=\"display-4 fw-bold\" :class=\"getSimulatedMarkClass\">\r\n                {{ simulatedOverallMark }}%\r\n              </div>\r\n              <div class=\"badge fs-6 my-2\" :class=\"getSimulatedGradeBadgeClass\">\r\n                {{ simulatedGrade }}\r\n              </div>\r\n              <p class=\"text-muted\">Projected Final Grade</p>\r\n            </div>\r\n            \r\n            <hr class=\"my-4\">\r\n            \r\n            <div class=\"comparison mb-3\">\r\n              <div class=\"row\">\r\n                <div class=\"col-6 text-start\">\r\n                  <p class=\"mb-1 small text-muted\">Current Mark</p>\r\n                  <h4 :class=\"getCurrentMarkClass\">{{ currentOverallMark }}%</h4>\r\n                </div>\r\n                <div class=\"col-6 text-end\">\r\n                  <p class=\"mb-1 small text-muted\">Change</p>\r\n                  <h4 :class=\"getMarkChangeClass\">\r\n                    {{ markChange > 0 ? '+' : '' }}{{ markChange }}%\r\n                  </h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"progress mb-3\" style=\"height: 10px;\">\r\n              <div \r\n                class=\"progress-bar bg-danger\" \r\n                role=\"progressbar\" \r\n                :style=\"`width: 50%`\"\r\n                aria-valuenow=\"50\" \r\n                aria-valuemin=\"0\" \r\n                aria-valuemax=\"100\">\r\n              </div>\r\n            </div>\r\n            <div class=\"d-flex justify-content-between\">\r\n              <small>Fail</small>\r\n              <small>Pass</small>\r\n              <small>Distinction</small>\r\n            </div>\r\n            \r\n            <div \r\n              class=\"position-indicator\" \r\n              :style=\"`left: ${Math.min(Math.max(simulatedOverallMark, 0), 100)}%`\"\r\n            >\r\n              <i class=\"fas fa-caret-down\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Required Marks</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <p class=\"text-muted small mb-3\">\r\n              Marks required on remaining assessments to achieve these grades:\r\n            </p>\r\n            \r\n            <div class=\"required-mark-row\">\r\n              <div class=\"d-flex justify-content-between mb-2\">\r\n                <span class=\"badge bg-success\">Distinction (70%+)</span>\r\n                <span \r\n                  :class=\"{ 'text-success': requiredMarks.distinction <= 100, 'text-danger': requiredMarks.distinction > 100 }\"\r\n                >\r\n                  {{ formatRequiredMark(requiredMarks.distinction) }}\r\n                </span>\r\n              </div>\r\n              <div class=\"progress mb-3\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-success\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${Math.min(requiredMarks.distinction, 100)}%`\"\r\n                  :aria-valuenow=\"Math.min(requiredMarks.distinction, 100)\"\r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"required-mark-row\">\r\n              <div class=\"d-flex justify-content-between mb-2\">\r\n                <span class=\"badge bg-warning\">Pass (50%+)</span>\r\n                <span\r\n                  :class=\"{ 'text-success': requiredMarks.pass <= 100, 'text-danger': requiredMarks.pass > 100 }\"\r\n                >\r\n                  {{ formatRequiredMark(requiredMarks.pass) }}\r\n                </span>\r\n              </div>\r\n              <div class=\"progress mb-3\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-warning\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${Math.min(requiredMarks.pass, 100)}%`\"\r\n                  :aria-valuenow=\"Math.min(requiredMarks.pass, 100)\"\r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"alert alert-secondary mt-3 small\">\r\n              <i class=\"fas fa-info-circle me-2\"></i>\r\n              These calculations show the average mark needed on all remaining assessments to achieve the target grade.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n\r\nexport default {\r\n  name: 'MarkSimulation',\r\n  data() {\r\n    return {\r\n      courseId: null,\r\n      simulatedMarks: {}, // assessment_id -> simulated_mark\r\n      requiredMarks: {\r\n        pass: 0,\r\n        distinction: 0\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      isLoading: state => state.loading,\r\n      course: state => state.courses.course,\r\n      marks: state => state.marks.marks,\r\n      userId: state => state.auth.userId\r\n    }),\r\n    ...mapGetters({\r\n      getCourseAssessments: 'assessments/getCourseAssessments'\r\n    }),\r\n    courseAssessments() {\r\n      return this.getCourseAssessments(this.courseId) || [];\r\n    },\r\n    sortedAssessments() {\r\n      return [...this.courseAssessments].sort((a, b) => {\r\n        // Sort by due date\r\n        if (!a.due_date) return 1;\r\n        if (!b.due_date) return -1;\r\n        return new Date(a.due_date) - new Date(b.due_date);\r\n      });\r\n    },\r\n    studentMarks() {\r\n      return this.marks.filter(mark => \r\n        mark.student_id === this.userId && \r\n        mark.course_id === parseInt(this.courseId)\r\n      );\r\n    },\r\n    unassessedItems() {\r\n      return this.courseAssessments.filter(assessment => \r\n        !this.hasMarkForAssessment(assessment.id)\r\n      );\r\n    },\r\n    totalRemainingWeight() {\r\n      return this.unassessedItems.reduce((sum, assessment) => sum + assessment.weightage, 0);\r\n    },\r\n    currentOverallMark() {\r\n      if (!this.studentMarks.length) return 0;\r\n      \r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      this.studentMarks.forEach(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        weightedSum += percentage * assessment.weightage;\r\n        totalWeight += parseInt(assessment.weightage);\r\n      });\r\n      \r\n      if (totalWeight === 0) return 0;\r\n      return Math.round(weightedSum / totalWeight);\r\n    },\r\n    simulatedOverallMark() {\r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      // Include actual marks\r\n      this.studentMarks.forEach(mark => {\r\n        // Skip if this assessment is being simulated\r\n        if (this.isSimulatedAssessment(mark.assessment_id)) return;\r\n        \r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        weightedSum += percentage * assessment.weightage;\r\n        totalWeight += parseInt(assessment.weightage);\r\n      });\r\n      \r\n      // Include simulated marks\r\n      for (const assessmentId in this.simulatedMarks) {\r\n        const mark = this.simulatedMarks[assessmentId];\r\n        const assessment = this.courseAssessments.find(a => a.id === parseInt(assessmentId));\r\n        \r\n        if (!assessment || mark === undefined) continue;\r\n        \r\n        const percentage = this.calculatePercentage(mark, assessment.max_mark);\r\n        weightedSum += percentage * assessment.weightage;\r\n        totalWeight += parseInt(assessment.weightage);\r\n      }\r\n      \r\n      if (totalWeight === 0) return 0;\r\n      return Math.round(weightedSum / totalWeight);\r\n    },\r\n    simulatedGrade() {\r\n      return this.calculateGrade(this.simulatedOverallMark);\r\n    },\r\n    markChange() {\r\n      return this.simulatedOverallMark - this.currentOverallMark;\r\n    },\r\n    getSimulatedMarkClass() {\r\n      if (this.simulatedOverallMark >= 70) return 'text-success';\r\n      if (this.simulatedOverallMark >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getSimulatedGradeBadgeClass() {\r\n      if (this.simulatedOverallMark >= 70) return 'bg-success';\r\n      if (this.simulatedOverallMark >= 50) return 'bg-warning';\r\n      return 'bg-danger';\r\n    },\r\n    getCurrentMarkClass() {\r\n      if (this.currentOverallMark >= 70) return 'text-success';\r\n      if (this.currentOverallMark >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getMarkChangeClass() {\r\n      if (this.markChange > 0) return 'text-success';\r\n      if (this.markChange < 0) return 'text-danger';\r\n      return 'text-muted';\r\n    }\r\n  },\r\n  async created() {\r\n    this.courseId = parseInt(this.$route.params.id);\r\n    \r\n    try {\r\n      // Fetch course details\r\n      await this.fetchCourse(this.courseId);\r\n      \r\n      // Fetch assessments for this course\r\n      await this.fetchAssessments({ courseId: this.courseId });\r\n      \r\n      // Fetch marks for this student in this course\r\n      await this.fetchMarks({ \r\n        studentId: this.userId,\r\n        courseId: this.courseId\r\n      });\r\n      \r\n      // Initialize the simulation\r\n      this.initializeSimulation();\r\n      \r\n      // Calculate required marks\r\n      this.calculateRequiredMarks();\r\n    } catch (error) {\r\n      console.error('Error loading simulation data:', error);\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchCourse: 'courses/fetchCourse',\r\n      fetchAssessments: 'assessments/fetchAssessments',\r\n      fetchMarks: 'marks/fetchMarks'\r\n    }),\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not set';\r\n      return new Date(dateString).toLocaleDateString();\r\n    },\r\n    hasMarkForAssessment(assessmentId) {\r\n      return this.studentMarks.some(mark => mark.assessment_id === parseInt(assessmentId));\r\n    },\r\n    getMarkForAssessment(assessmentId) {\r\n      return this.studentMarks.find(mark => mark.assessment_id === parseInt(assessmentId));\r\n    },\r\n    isSimulatedAssessment(assessmentId) {\r\n      return assessmentId in this.simulatedMarks;\r\n    },\r\n    calculatePercentage(mark, maxMark) {\r\n      if (!maxMark) return 0;\r\n      return Math.round((mark / maxMark) * 100);\r\n    },\r\n    getAssessmentTypeBadgeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    getAssessmentStatus(assessment) {\r\n      // Check if it has a real mark\r\n      if (this.hasMarkForAssessment(assessment.id) && !this.isSimulatedAssessment(assessment.id)) {\r\n        return 'Completed';\r\n      }\r\n      \r\n      // Check if it has a simulated mark\r\n      if (this.isSimulatedAssessment(assessment.id)) {\r\n        return 'Simulated';\r\n      }\r\n      \r\n      const today = new Date();\r\n      const dueDate = assessment.due_date ? new Date(assessment.due_date) : null;\r\n      \r\n      if (!dueDate) return 'Upcoming';\r\n      \r\n      if (dueDate < today) {\r\n        return 'Overdue';\r\n      }\r\n      \r\n      if (dueDate.getTime() - today.getTime() < 7 * 24 * 60 * 60 * 1000) {\r\n        return 'Upcoming';\r\n      }\r\n      \r\n      return 'Scheduled';\r\n    },\r\n    getStatusBadge(assessment) {\r\n      const status = this.getAssessmentStatus(assessment);\r\n      \r\n      const badges = {\r\n        'Completed': 'bg-success',\r\n        'Simulated': 'bg-info',\r\n        'Overdue': 'bg-danger',\r\n        'Upcoming': 'bg-warning',\r\n        'Scheduled': 'bg-secondary'\r\n      };\r\n      \r\n      return badges[status] || 'bg-secondary';\r\n    },\r\n    calculateGrade(percentage) {\r\n      if (percentage >= 90) return 'A+';\r\n      if (percentage >= 80) return 'A';\r\n      if (percentage >= 75) return 'B+';\r\n      if (percentage >= 70) return 'B';\r\n      if (percentage >= 65) return 'C+';\r\n      if (percentage >= 60) return 'C';\r\n      if (percentage >= 55) return 'D+';\r\n      if (percentage >= 50) return 'D';\r\n      return 'F';\r\n    },\r\n    initializeSimulation() {\r\n      this.simulatedMarks = {};\r\n      \r\n      // For assessments without marks, initialize with empty values\r\n      this.courseAssessments.forEach(assessment => {\r\n        if (!this.hasMarkForAssessment(assessment.id)) {\r\n          this.simulatedMarks[assessment.id] = undefined;\r\n        }\r\n      });\r\n    },\r\n    resetSimulation() {\r\n      this.initializeSimulation();\r\n      this.calculateRequiredMarks();\r\n    },\r\n    updateSimulation() {\r\n      this.calculateRequiredMarks();\r\n    },\r\n    calculateRequiredMarks() {\r\n      // Calculate how much is needed on remaining assessments to achieve target grades\r\n      \r\n      // First, get the current contribution from real and simulated marks\r\n      let currentWeightedSum = 0;\r\n      let assessedWeight = 0;\r\n      \r\n      // Include actual marks (that aren't being simulated)\r\n      this.studentMarks.forEach(mark => {\r\n        if (this.isSimulatedAssessment(mark.assessment_id)) return;\r\n        \r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        currentWeightedSum += percentage * assessment.weightage;\r\n        assessedWeight += assessment.weightage;\r\n      });\r\n      \r\n      // Include simulated marks that have values\r\n      for (const assessmentId in this.simulatedMarks) {\r\n        const mark = this.simulatedMarks[assessmentId];\r\n        if (mark === undefined) continue;\r\n        \r\n        const assessment = this.courseAssessments.find(a => a.id === parseInt(assessmentId));\r\n        if (!assessment) continue;\r\n        \r\n        const percentage = this.calculatePercentage(mark, assessment.max_mark);\r\n        currentWeightedSum += percentage * assessment.weightage;\r\n        assessedWeight += assessment.weightage;\r\n      }\r\n      \r\n      // Calculate remaining unassessed weight\r\n      let unassessedWeight = 0;\r\n      this.courseAssessments.forEach(assessment => {\r\n        const assessmentId = assessment.id;\r\n        if (!this.hasMarkForAssessment(assessmentId) && \r\n            !(assessmentId in this.simulatedMarks && this.simulatedMarks[assessmentId] !== undefined)) {\r\n          unassessedWeight += assessment.weightage;\r\n        }\r\n      });\r\n      \r\n      // Calculate required marks for different grade thresholds\r\n      const totalWeight = 100; // Assuming total is 100%\r\n      \r\n      // For passing grade (50%)\r\n      const requiredForPass = (50 * totalWeight - currentWeightedSum) / unassessedWeight;\r\n      this.requiredMarks.pass = unassessedWeight > 0 ? Math.round(requiredForPass) : 0;\r\n      \r\n      // For distinction grade (70%)\r\n      const requiredForDistinction = (70 * totalWeight - currentWeightedSum) / unassessedWeight;\r\n      this.requiredMarks.distinction = unassessedWeight > 0 ? Math.round(requiredForDistinction) : 0;\r\n    },\r\n    formatRequiredMark(value) {\r\n      if (value <= 0) return 'Already achieved';\r\n      if (value > 100) return 'Not possible';\r\n      return `${value}% needed`;\r\n    },\r\n    applyPreset(preset) {\r\n      // Apply preset values to all simulated assessments\r\n      let presetValue = 0;\r\n      \r\n      switch(preset) {\r\n        case 'best':\r\n          presetValue = 90;\r\n          break;\r\n        case 'good':\r\n          presetValue = 75;\r\n          break;\r\n        case 'average':\r\n          presetValue = 65;\r\n          break;\r\n        case 'minimal':\r\n          presetValue = 50;\r\n          break;\r\n      }\r\n      \r\n      // Apply the preset percentage to all unassessed items\r\n      this.courseAssessments.forEach(assessment => {\r\n        if (!this.hasMarkForAssessment(assessment.id)) {\r\n          // Calculate the actual mark value based on the percentage and max mark\r\n          const markValue = Math.round((presetValue / 100) * assessment.max_mark);\r\n          this.simulatedMarks[assessment.id] = markValue;\r\n        }\r\n      });\r\n      \r\n      this.calculateRequiredMarks();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.mark-simulation h1 {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.progress {\r\n  border-radius: 0.25rem;\r\n  overflow: hidden;\r\n}\r\n\r\n.display-4 {\r\n  font-size: 3rem;\r\n}\r\n\r\n.position-indicator {\r\n  position: relative;\r\n  width: 0;\r\n  height: 0;\r\n  margin-top: -24px;\r\n  z-index: 2;\r\n  color: #343a40;\r\n  font-size: 1.5rem;\r\n  transform: translateX(-50%);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .display-4 {\r\n    font-size: 2.5rem;\r\n  }\r\n}\r\n</style>\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\student\\CourseMarks.vue",["174"],"<template>\r\n  <div class=\"course-marks\">\r\n    <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <router-link to=\"/student/dashboard\">Dashboard</router-link>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              {{ course?.code }} - {{ course?.name }}\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1 class=\"mb-2\">{{ course?.name }}</h1>\r\n        <p class=\"text-muted\">\r\n          {{ course?.code }} | {{ course?.semester || 'No semester specified' }}\r\n        </p>\r\n      </div>\r\n      <div class=\"btn-group\">\r\n        <button class=\"btn btn-outline-primary\" @click=\"downloadMarks\">\r\n          <i class=\"fas fa-download me-2\"></i> Download\r\n        </button>\r\n        <router-link :to=\"`/student/simulation/${courseId}`\" class=\"btn btn-outline-primary\">\r\n          <i class=\"fas fa-calculator me-2\"></i> Grade Simulator\r\n        </router-link>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"!course\" class=\"alert alert-danger\">\r\n      Course not found or you don't have access to this course.\r\n    </div>\r\n\r\n    <div v-else class=\"row\">\r\n      <div class=\"col-md-4 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Course Summary</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"mb-4 text-center\">\r\n              <div class=\"display-4 fw-bold\" :class=\"getOverallMarkClass\">\r\n                {{ overallMark }}%\r\n              </div>\r\n              <p class=\"text-muted\">Overall Mark</p>\r\n              <div class=\"badge\" :class=\"getOverallGradeBadgeClass\">\r\n                {{ overallGrade }}\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"progress-info mb-3\">\r\n              <div class=\"d-flex justify-content-between align-items-center\">\r\n                <span>Course Completion</span>\r\n                <span class=\"text-muted\">{{ completionPercentage }}%</span>\r\n              </div>\r\n              <div class=\"progress\" style=\"height: 8px;\">\r\n                <div \r\n                  class=\"progress-bar bg-info\" \r\n                  role=\"progressbar\" \r\n                  :style=\"`width: ${completionPercentage}%`\"\r\n                  :aria-valuenow=\"completionPercentage\" \r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\">\r\n                </div>\r\n              </div>\r\n              <small class=\"text-muted\">\r\n                {{ completedAssessments }} of {{ totalAssessments }} assessments completed\r\n              </small>\r\n            </div>\r\n\r\n            <table class=\"table table-sm\">\r\n              <tbody>\r\n                <tr>\r\n                  <th>Course:</th>\r\n                  <td>{{ course?.name }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Code:</th>\r\n                  <td>{{ course?.code }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Semester:</th>\r\n                  <td>{{ course?.semester || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Credits:</th>\r\n                  <td>{{ course?.credits || 'Not specified' }}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Lecturer:</th>\r\n                  <td>{{ course?.lecturer_name || 'Not specified' }}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-md-8 mb-4\">\r\n        <div class=\"card mb-4\">\r\n          <div class=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n            <h5 class=\"mb-0\">Mark Breakdown</h5>\r\n            <div class=\"dropdown\">\r\n              <button \r\n                class=\"btn btn-sm btn-outline-secondary dropdown-toggle\" \r\n                type=\"button\" \r\n                id=\"sortDropdown\" \r\n                data-bs-toggle=\"dropdown\" \r\n                aria-expanded=\"false\"\r\n              >\r\n                Sort by\r\n              </button>\r\n              <ul class=\"dropdown-menu\" aria-labelledby=\"sortDropdown\">\r\n                <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"sortMarks('date')\">Date</a></li>\r\n                <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"sortMarks('name')\">Name</a></li>\r\n                <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"sortMarks('weight')\">Weightage</a></li>\r\n                <li><a class=\"dropdown-item\" href=\"#\" @click.prevent=\"sortMarks('mark')\">Mark</a></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"marks.length === 0\" class=\"text-center py-4\">\r\n              <p>No marks have been recorded for this course yet.</p>\r\n              <div class=\"alert alert-info\">\r\n                <i class=\"fas fa-info-circle me-2\"></i>\r\n                Marks will appear here once your assessments have been graded.\r\n              </div>\r\n            </div>\r\n            <div v-else>\r\n              <div class=\"mb-4\">\r\n                <h6>Assessment Distribution</h6>\r\n                <div class=\"progress\" style=\"height: 30px;\">\r\n                  <div v-for=\"(assessment, index) in sortedAssessments\" \r\n                       :key=\"assessment.id\"\r\n                       class=\"progress-bar\" \r\n                       :class=\"getAssessmentTypeClass(assessment.type)\"\r\n                       :style=\"`width: ${assessment.weightage}%`\"\r\n                       :title=\"`${assessment.name} (${assessment.weightage}%)`\">\r\n                    {{ assessment.weightage }}%\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"table-responsive\">\r\n                <table class=\"table table-hover\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Assessment</th>\r\n                      <th>Type</th>\r\n                      <th>Weight</th>\r\n                      <th>Due Date</th>\r\n                      <th>Mark</th>\r\n                      <th>Grade</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <template v-for=\"assessment in sortedAssessments\" :key=\"assessment.id\">\r\n                      <tr>\r\n                        <td>\r\n                          <strong>{{ assessment.name }}</strong>\r\n                          <div v-if=\"assessment.description\" class=\"small text-muted\">\r\n                            {{ assessment.description }}\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <span class=\"badge\" :class=\"getAssessmentTypeBadgeClass(assessment.type)\">\r\n                            {{ assessment.type }}\r\n                          </span>\r\n                        </td>\r\n                        <td>{{ assessment.weightage }}%</td>\r\n                        <td>{{ formatDate(assessment.due_date) }}</td>\r\n                        <td>\r\n                          <template v-if=\"hasMarkForAssessment(assessment.id)\">\r\n                            <strong>{{ getMarkForAssessment(assessment.id).mark }}</strong> / {{ assessment.max_mark }}\r\n                            <div class=\"small text-muted\">\r\n                              ({{ calculatePercentage(getMarkForAssessment(assessment.id).mark, assessment.max_mark) }}%)\r\n                            </div>\r\n                          </template>\r\n                          <template v-else>\r\n                            <span class=\"text-muted\">Pending</span>\r\n                          </template>\r\n                        </td>\r\n                        <td>\r\n                          <template v-if=\"hasMarkForAssessment(assessment.id)\">\r\n                            <span :class=\"getGradeClass(calculatePercentage(getMarkForAssessment(assessment.id).mark, assessment.max_mark))\">\r\n                              {{ calculateGrade(calculatePercentage(getMarkForAssessment(assessment.id).mark, assessment.max_mark)) }}\r\n                            </span>\r\n                          </template>\r\n                          <template v-else>\r\n                            <span class=\"text-muted\">-</span>\r\n                          </template>\r\n                        </td>\r\n                      </tr>\r\n                      <tr v-if=\"hasMarkForAssessment(assessment.id) && getMarkForAssessment(assessment.id).remarks\" class=\"remarks-row\">\r\n                        <td colspan=\"6\" class=\"table-light\">\r\n                          <i class=\"fas fa-comment-alt me-2 text-muted\"></i>\r\n                          <span class=\"text-muted\">Feedback: </span>\r\n                          {{ getMarkForAssessment(assessment.id).remarks }}\r\n                        </td>\r\n                      </tr>\r\n                    </template>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-light\">\r\n            <h5 class=\"mb-0\">Performance Analysis</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div v-if=\"marks.length < 2\" class=\"text-center py-4\">\r\n              <p>Not enough data to show performance analysis.</p>\r\n              <div class=\"alert alert-info\">\r\n                <i class=\"fas fa-info-circle me-2\"></i>\r\n                Performance trends will be displayed after more assessments are completed.\r\n              </div>\r\n            </div>\r\n            <div v-else>\r\n              <!-- This is where we would integrate a chart.js component -->\r\n              <div class=\"chart-container\" style=\"height: 250px;\">\r\n                <canvas id=\"performanceChart\"></canvas>\r\n              </div>\r\n              <div class=\"mt-3 text-center text-muted small\">\r\n                <i class=\"fas fa-info-circle me-1\"></i>\r\n                Chart shows your performance relative to class average (when available).\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n// Uncomment in real implementation\r\n// import Chart from 'chart.js/auto'\r\n\r\nexport default {\r\n  name: 'CourseMarks',\r\n  data() {\r\n    return {\r\n      courseId: null,\r\n      sortOrder: 'date',\r\n      performanceChart: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      isLoading: state => state.loading,\r\n      course: state => state.courses.course,\r\n      marks: state => state.marks.marks,\r\n      userId: state => state.auth.userId\r\n    }),\r\n    ...mapGetters({\r\n      getCourseAssessments: 'assessments/getCourseAssessments'\r\n    }),\r\n    courseAssessments() {\r\n      return this.getCourseAssessments(this.courseId) || [];\r\n    },\r\n    sortedAssessments() {\r\n      const assessments = [...this.courseAssessments];\r\n      \r\n      switch(this.sortOrder) {\r\n        case 'name':\r\n          return assessments.sort((a, b) => a.name.localeCompare(b.name));\r\n        case 'weight':\r\n          return assessments.sort((a, b) => b.weightage - a.weightage);\r\n        case 'mark':\r\n          return assessments.sort((a, b) => {\r\n            const markA = this.hasMarkForAssessment(a.id) ? \r\n              this.calculatePercentage(this.getMarkForAssessment(a.id).mark, a.max_mark) : -1;\r\n            const markB = this.hasMarkForAssessment(b.id) ? \r\n              this.calculatePercentage(this.getMarkForAssessment(b.id).mark, b.max_mark) : -1;\r\n            return markB - markA;\r\n          });\r\n        case 'date':\r\n        default:\r\n          return assessments.sort((a, b) => {\r\n            if (!a.due_date) return 1;\r\n            if (!b.due_date) return -1;\r\n            return new Date(a.due_date) - new Date(b.due_date);\r\n          });\r\n      }\r\n    },\r\n    studentMarks() {\r\n      return this.marks.filter(mark => \r\n        mark.student_id === this.userId && \r\n        mark.course_id === parseInt(this.courseId)\r\n      );\r\n    },\r\n    totalAssessments() {\r\n      return this.courseAssessments.length;\r\n    },\r\n    completedAssessments() {\r\n      return this.studentMarks.length;\r\n    },\r\n    completionPercentage() {\r\n      if (this.totalAssessments === 0) return 0;\r\n      return Math.round((this.completedAssessments / this.totalAssessments) * 100);\r\n    },\r\n    overallMark() {\r\n      if (!this.studentMarks.length) return 0;\r\n      \r\n      let weightedSum = 0;\r\n      let totalWeight = 0;\r\n      \r\n      this.studentMarks.forEach(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return;\r\n        \r\n        const percentage = this.calculatePercentage(mark.mark, assessment.max_mark);\r\n        weightedSum += percentage * assessment.weightage;\r\n        totalWeight += parseInt(assessment.weightage);\r\n      });\r\n      \r\n      if (totalWeight === 0) return 0;\r\n      return Math.round(weightedSum / totalWeight);\r\n    },\r\n    overallGrade() {\r\n      return this.calculateGrade(this.overallMark);\r\n    },\r\n    getOverallMarkClass() {\r\n      if (this.overallMark >= 70) return 'text-success';\r\n      if (this.overallMark >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    getOverallGradeBadgeClass() {\r\n      if (this.overallMark >= 70) return 'bg-success';\r\n      if (this.overallMark >= 50) return 'bg-warning';\r\n      return 'bg-danger';\r\n    }\r\n  },\r\n  async created() {\r\n    this.courseId = parseInt(this.$route.params.id);\r\n    \r\n    try {\r\n      // Fetch course details\r\n      await this.fetchCourse(this.courseId);\r\n      \r\n      // Fetch assessments for this course\r\n      await this.fetchAssessments({ courseId: this.courseId });\r\n      \r\n      // Fetch marks for this student in this course\r\n      await this.fetchMarks({ \r\n        studentId: this.userId,\r\n        courseId: this.courseId\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading course marks:', error);\r\n    }\r\n  },\r\n  mounted() {\r\n    // Initialize performance chart once data is loaded\r\n    this.$nextTick(() => {\r\n      if (this.marks.length >= 2) {\r\n        this.initPerformanceChart();\r\n      }\r\n    });\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchCourse: 'courses/fetchCourse',\r\n      fetchAssessments: 'assessments/fetchAssessments',\r\n      fetchMarks: 'marks/fetchMarks'\r\n    }),\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not set';\r\n      return new Date(dateString).toLocaleDateString();\r\n    },\r\n    hasMarkForAssessment(assessmentId) {\r\n      return this.studentMarks.some(mark => mark.assessment_id === assessmentId);\r\n    },\r\n    getMarkForAssessment(assessmentId) {\r\n      return this.studentMarks.find(mark => mark.assessment_id === assessmentId);\r\n    },\r\n    calculatePercentage(mark, maxMark) {\r\n      if (!maxMark) return 0;\r\n      return Math.round((mark / maxMark) * 100);\r\n    },\r\n    getAssessmentTypeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    getAssessmentTypeBadgeClass(type) {\r\n      const types = {\r\n        'exam': 'bg-danger',\r\n        'midterm': 'bg-warning',\r\n        'quiz': 'bg-info',\r\n        'assignment': 'bg-success',\r\n        'project': 'bg-primary',\r\n        'lab': 'bg-secondary'\r\n      };\r\n      return types[type.toLowerCase()] || 'bg-secondary';\r\n    },\r\n    calculateGrade(percentage) {\r\n      if (percentage >= 90) return 'A+';\r\n      if (percentage >= 80) return 'A';\r\n      if (percentage >= 75) return 'B+';\r\n      if (percentage >= 70) return 'B';\r\n      if (percentage >= 65) return 'C+';\r\n      if (percentage >= 60) return 'C';\r\n      if (percentage >= 55) return 'D+';\r\n      if (percentage >= 50) return 'D';\r\n      return 'F';\r\n    },\r\n    getGradeClass(percentage) {\r\n      if (percentage >= 70) return 'text-success fw-bold';\r\n      if (percentage >= 50) return 'text-warning';\r\n      return 'text-danger';\r\n    },\r\n    sortMarks(order) {\r\n      this.sortOrder = order;\r\n    },\r\n    downloadMarks() {\r\n      // This would initiate a download of marks in CSV format\r\n      // Implementation would need to call an API endpoint\r\n      this.$store.dispatch('showToast', {\r\n        message: 'Downloading marks...',\r\n        type: 'info'\r\n      });\r\n    },\r\n    initPerformanceChart() {\r\n      // This would be implemented with Chart.js in a real application\r\n      /* Uncomment in real implementation\r\n      const ctx = document.getElementById('performanceChart');\r\n      \r\n      // Sort marks by date\r\n      const sortedMarks = [...this.studentMarks].sort((a, b) => {\r\n        const assessmentA = this.courseAssessments.find(assessment => assessment.id === a.assessment_id);\r\n        const assessmentB = this.courseAssessments.find(assessment => assessment.id === b.assessment_id);\r\n        if (!assessmentA || !assessmentA.due_date) return -1;\r\n        if (!assessmentB || !assessmentB.due_date) return 1;\r\n        return new Date(assessmentA.due_date) - new Date(assessmentB.due_date);\r\n      });\r\n      \r\n      const labels = sortedMarks.map(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        return assessment ? assessment.name : 'Unknown';\r\n      });\r\n      \r\n      const data = sortedMarks.map(mark => {\r\n        const assessment = this.courseAssessments.find(a => a.id === mark.assessment_id);\r\n        if (!assessment) return 0;\r\n        return this.calculatePercentage(mark.mark, assessment.max_mark);\r\n      });\r\n      \r\n      // Sample class averages (would come from API in real implementation)\r\n      const classAverages = sortedMarks.map(() => Math.floor(Math.random() * 30) + 50);\r\n      \r\n      this.performanceChart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Your Marks',\r\n              data: data,\r\n              borderColor: '#0d6efd',\r\n              backgroundColor: 'rgba(13, 110, 253, 0.1)',\r\n              borderWidth: 2,\r\n              tension: 0.1,\r\n              fill: true\r\n            },\r\n            {\r\n              label: 'Class Average',\r\n              data: classAverages,\r\n              borderColor: '#6c757d',\r\n              borderWidth: 2,\r\n              borderDash: [5, 5],\r\n              tension: 0.1,\r\n              fill: false\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              max: 100,\r\n              title: {\r\n                display: true,\r\n                text: 'Mark (%)'\r\n              }\r\n            }\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              position: 'top',\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: function(context) {\r\n                  return `${context.dataset.label}: ${context.raw}%`;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n      */\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.course-marks h1 {\r\n  font-size: 1.75rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.progress {\r\n  border-radius: 0.25rem;\r\n  overflow: hidden;\r\n}\r\n\r\n.display-4 {\r\n  font-size: 3rem;\r\n}\r\n\r\n.remarks-row {\r\n  font-style: italic;\r\n  font-size: 0.9em;\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .display-4 {\r\n    font-size: 2.5rem;\r\n  }\r\n}\r\n</style>\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\student\\Dashboard.vue",["175"],"<template>\r\n  <div class=\"dashboard\">\r\n    <h1 class=\"mb-4\">Student Dashboard</h1>\r\n    \r\n    <div class=\"row\">\r\n      <div class=\"col-md-7 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">My Courses</h5>\r\n            <p class=\"card-text text-muted mb-4\">Your current courses and progress</p>\r\n            \r\n            <div v-if=\"isLoading\" class=\"text-center py-4\">\r\n              <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div v-else-if=\"courses.length === 0\" class=\"text-center py-4\">\r\n              <p>You are not enrolled in any courses yet.</p>\r\n              <i class=\"fas fa-book-open fa-3x text-muted mb-3\"></i>\r\n            </div>\r\n            \r\n            <div v-else>\r\n              <div v-for=\"course in courses\" :key=\"course.id\" class=\"course-card mb-3\">\r\n                <div class=\"d-flex justify-content-between align-items-start\">\r\n                  <div>\r\n                    <h6>\r\n                      {{ course.code }} - {{ course.name }}\r\n                      <span class=\"badge bg-primary ms-2\">{{ course.semester }}</span>\r\n                    </h6>\r\n                    <p class=\"text-muted\">Lecturer: {{ course.lecturer_name || 'Not assigned' }}</p>\r\n                  </div>\r\n                  \r\n                  <div class=\"text-end\">\r\n                    <router-link :to=\"`/student/course/${course.id}`\" class=\"btn btn-sm btn-outline-primary me-1\">\r\n                      <i class=\"fas fa-chart-bar me-1\"></i> View Marks\r\n                    </router-link>\r\n                    <router-link :to=\"`/student/simulation/${course.id}`\" class=\"btn btn-sm btn-outline-info\">\r\n                      <i class=\"fas fa-calculator me-1\"></i> Simulate\r\n                    </router-link>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"progress mt-2\" style=\"height: 10px;\">\r\n                  <div \r\n                    class=\"progress-bar\" \r\n                    :class=\"getCourseProgressBarClass(course.progress)\" \r\n                    role=\"progressbar\" \r\n                    :style=\"`width: ${course.progress}%`\" \r\n                    :aria-valuenow=\"course.progress\" \r\n                    aria-valuemin=\"0\" \r\n                    aria-valuemax=\"100\"\r\n                  >\r\n                    {{ course.progress }}%\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"d-flex justify-content-between mt-1\">\r\n                  <small class=\"text-muted\">Current Average: {{ course.average }}%</small>\r\n                  <small class=\"text-muted\">Rank: {{ course.rank || 'N/A' }}</small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"col-md-5 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Upcoming Assessments</h5>\r\n            <p class=\"card-text text-muted mb-4\">Your next scheduled assessments</p>\r\n            \r\n            <div v-if=\"isLoading\" class=\"text-center py-4\">\r\n              <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div v-else-if=\"upcomingAssessments.length === 0\" class=\"text-center py-4\">\r\n              <p>No upcoming assessments.</p>\r\n              <i class=\"fas fa-calendar-check fa-3x text-muted mb-3\"></i>\r\n            </div>\r\n            \r\n            <ul v-else class=\"list-group list-group-flush\">\r\n              <li v-for=\"assessment in upcomingAssessments\" :key=\"assessment.id\" class=\"list-group-item\">\r\n                <div class=\"d-flex w-100 justify-content-between\">\r\n                  <h6 class=\"mb-1\">{{ assessment.name }}</h6>\r\n                  <span class=\"badge\" :class=\"getAssessmentTypeBadgeClass(assessment.type)\">\r\n                    {{ assessment.type }}\r\n                  </span>\r\n                </div>\r\n                <p class=\"mb-1\">{{ getCourseNameById(assessment.course_id) }}</p>\r\n                <div class=\"d-flex w-100 justify-content-between\">\r\n                  <small class=\"text-muted\">\r\n                    <i class=\"fas fa-weight me-1\"></i> {{ assessment.weightage }}% of total\r\n                  </small>\r\n                  <small class=\"text-muted\">\r\n                    <i class=\"far fa-calendar-alt me-1\"></i> {{ formatDate(assessment.date) }}\r\n                  </small>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 mb-4\">\r\n        <div class=\"card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Performance Overview</h5>\r\n            <p class=\"card-text text-muted mb-4\">Your academic performance across all courses</p>\r\n            \r\n            <div v-if=\"isLoading\" class=\"text-center py-4\">\r\n              <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div v-else class=\"chart-container\">\r\n              <!-- Placeholder for Chart.js integration -->\r\n              <canvas id=\"performanceChart\" width=\"400\" height=\"200\"></canvas>\r\n              <p class=\"text-center text-muted mt-3\">\r\n                <i class=\"fas fa-info-circle me-1\"></i>\r\n                Chart shows your performance trend over time across all courses\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex';\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  name: 'StudentDashboard',\r\n  data() {\r\n    return {\r\n      courses: [],\r\n      assessments: [],\r\n      performanceChart: null,\r\n      // Sample data for demonstration - in a real app, this would come from the API\r\n      coursesData: [\r\n        {\r\n          id: 1,\r\n          code: 'CS101',\r\n          name: 'Introduction to Programming',\r\n          lecturer_name: 'Dr. Smith',\r\n          semester: 'Fall 2023',\r\n          progress: 75,\r\n          average: 82,\r\n          rank: '3/30'\r\n        },\r\n        {\r\n          id: 2,\r\n          code: 'CS202',\r\n          name: 'Database Systems',\r\n          lecturer_name: 'Prof. Johnson',\r\n          semester: 'Fall 2023',\r\n          progress: 60,\r\n          average: 78,\r\n          rank: '5/25'\r\n        },\r\n        {\r\n          id: 3,\r\n          code: 'MATH201',\r\n          name: 'Discrete Mathematics',\r\n          lecturer_name: 'Dr. Wilson',\r\n          semester: 'Fall 2023',\r\n          progress: 90,\r\n          average: 85,\r\n          rank: '2/28'\r\n        }\r\n      ],\r\n      assessmentsData: [\r\n        {\r\n          id: 1,\r\n          name: 'Midterm Exam',\r\n          course_id: 1,\r\n          type: 'midterm',\r\n          date: '2023-10-15',\r\n          weightage: 30\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'Assignment 2',\r\n          course_id: 2,\r\n          type: 'assignment',\r\n          date: '2023-10-10',\r\n          weightage: 15\r\n        },\r\n        {\r\n          id: 3,\r\n          name: 'Quiz 3',\r\n          course_id: 3,\r\n          type: 'quiz',\r\n          date: '2023-10-05',\r\n          weightage: 10\r\n        }\r\n      ]\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters(['isLoading']),\r\n    ...mapGetters('auth', ['getUser']),\r\n    \r\n    upcomingAssessments() {\r\n      const today = new Date();\r\n      \r\n      return this.assessmentsData\r\n        .filter(a => new Date(a.date) >= today)\r\n        .sort((a, b) => new Date(a.date) - new Date(b.date))\r\n        .slice(0, 5);\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadData();\r\n  },\r\n  methods: {\r\n    async loadData() {\r\n      try {\r\n        // In a real app, we would fetch the student's courses and assessments from the API\r\n        // For now, using sample data\r\n        this.courses = this.coursesData;\r\n        this.assessments = this.assessmentsData;\r\n        \r\n        this.$nextTick(() => {\r\n          this.initChart();\r\n        });\r\n      } catch (error) {\r\n        console.error('Error loading dashboard data:', error);\r\n      }\r\n    },\r\n    \r\n    getCourseNameById(courseId) {\r\n      const course = this.courses.find(c => c.id === courseId);\r\n      return course ? `${course.code} - ${course.name}` : 'Unknown Course';\r\n    },\r\n    \r\n    getCourseProgressBarClass(progress) {\r\n      if (progress >= 80) return 'bg-success';\r\n      if (progress >= 60) return 'bg-info';\r\n      if (progress >= 40) return 'bg-warning';\r\n      return 'bg-danger';\r\n    },\r\n    \r\n    getAssessmentTypeBadgeClass(type) {\r\n      switch (type) {\r\n        case 'quiz': return 'bg-info';\r\n        case 'assignment': return 'bg-primary';\r\n        case 'midterm': return 'bg-warning';\r\n        case 'final_exam': return 'bg-danger';\r\n        default: return 'bg-secondary';\r\n      }\r\n    },\r\n    \r\n    formatDate(dateString) {\r\n      if (!dateString) return 'Not scheduled';\r\n      \r\n      const date = new Date(dateString);\r\n      return date.toLocaleDateString('en-GB', {\r\n        day: 'numeric',\r\n        month: 'short',\r\n        year: 'numeric'\r\n      });\r\n    },\r\n    \r\n    initChart() {\r\n      const ctx = document.getElementById('performanceChart');\r\n      \r\n      if (this.performanceChart) {\r\n        this.performanceChart.destroy();\r\n      }\r\n      \r\n      // Sample data for the chart\r\n      this.performanceChart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: ['Quiz 1', 'Assignment 1', 'Quiz 2', 'Midterm', 'Assignment 2', 'Quiz 3'],\r\n          datasets: [\r\n            {\r\n              label: 'CS101',\r\n              data: [75, 82, 80, 85, 90, 88],\r\n              borderColor: 'rgba(52, 152, 219, 1)',\r\n              backgroundColor: 'rgba(52, 152, 219, 0.1)',\r\n              tension: 0.4\r\n            },\r\n            {\r\n              label: 'CS202',\r\n              data: [65, 70, 75, 78, 80, 82],\r\n              borderColor: 'rgba(46, 204, 113, 1)',\r\n              backgroundColor: 'rgba(46, 204, 113, 0.1)',\r\n              tension: 0.4\r\n            },\r\n            {\r\n              label: 'MATH201',\r\n              data: [80, 85, 82, 90, 88, 92],\r\n              borderColor: 'rgba(231, 76, 60, 1)',\r\n              backgroundColor: 'rgba(231, 76, 60, 0.1)',\r\n              tension: 0.4\r\n            }\r\n          ]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          plugins: {\r\n            legend: {\r\n              position: 'top',\r\n            },\r\n            tooltip: {\r\n              mode: 'index',\r\n              intersect: false,\r\n            }\r\n          },\r\n          scales: {\r\n            y: {\r\n              min: 0,\r\n              max: 100,\r\n              ticks: {\r\n                callback: function(value) {\r\n                  return value + '%';\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard h1 {\r\n  color: #2c3e50;\r\n  font-weight: 700;\r\n}\r\n\r\n.card {\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  border: none;\r\n  border-radius: 10px;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.card-title {\r\n  color: #2c3e50;\r\n  font-weight: 600;\r\n}\r\n\r\n.course-card {\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  background-color: #f8f9fa;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.course-card:hover {\r\n  background-color: #e9ecef;\r\n}\r\n\r\n.progress {\r\n  border-radius: 5px;\r\n  background-color: #e9ecef;\r\n}\r\n\r\n.progress-bar {\r\n  border-radius: 5px;\r\n  font-size: 0.6rem;\r\n  line-height: 10px;\r\n  font-weight: bold;\r\n}\r\n\r\n.list-group-item {\r\n  padding: 15px;\r\n  border-left: 0;\r\n  border-right: 0;\r\n  transition: background-color 0.2s ease;\r\n}\r\n\r\n.list-group-item:first-child {\r\n  border-top: 0;\r\n}\r\n\r\n.list-group-item:last-child {\r\n  border-bottom: 0;\r\n}\r\n\r\n.badge {\r\n  padding: 6px 10px;\r\n  font-weight: 500;\r\n  text-transform: capitalize;\r\n}\r\n\r\n.chart-container {\r\n  position: relative;\r\n  height: 300px;\r\n  width: 100%;\r\n}\r\n</style>\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\courses.js",["176"],"import axios from 'axios'\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    courses: [],\r\n    course: null\r\n  },\r\n  getters: {\r\n    getAllCourses: state => state.courses,\r\n    getCourse: state => state.course\r\n  },\r\n  mutations: {\r\n    SET_COURSES(state, courses) {\r\n      state.courses = courses;\r\n    },\r\n    SET_COURSE(state, course) {\r\n      state.course = course;\r\n    },\r\n    ADD_COURSE(state, course) {\r\n      state.courses.push(course);\r\n    },\r\n    UPDATE_COURSE(state, updatedCourse) {\r\n      const index = state.courses.findIndex(c => c.id === updatedCourse.id);\r\n      if (index !== -1) {\r\n        state.courses.splice(index, 1, updatedCourse);\r\n      }\r\n      if (state.course && state.course.id === updatedCourse.id) {\r\n        state.course = updatedCourse;\r\n      }\r\n    },\r\n    DELETE_COURSE(state, courseId) {\r\n      state.courses = state.courses.filter(c => c.id !== courseId);\r\n      if (state.course && state.course.id === courseId) {\r\n        state.course = null;\r\n      }\r\n    }\r\n  },\r\n  actions: {\r\n    async fetchCourses({ commit, dispatch }, filter = {}) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        let url = '/api/courses';\r\n        const params = {};\r\n        \r\n        if (filter.lecturerId) {\r\n          params.lecturer_id = filter.lecturerId;\r\n        }\r\n        \r\n        const response = await axios.get(url, { params });\r\n        commit('SET_COURSES', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch courses';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async fetchCourse({ commit, dispatch }, courseId) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.get(`/api/courses/${courseId}`);\r\n        commit('SET_COURSE', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch course';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async createCourse({ commit, dispatch }, courseData) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.post('/api/courses', courseData);\r\n        // Fetch the newly created course with complete data\r\n        const newCourseId = response.data.courseId;\r\n        const newCourseResponse = await axios.get(`/api/courses/${newCourseId}`);\r\n        \r\n        commit('ADD_COURSE', newCourseResponse.data);\r\n        dispatch('showToast', {\r\n          message: 'Course created successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return newCourseResponse.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to create course';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async updateCourse({ commit, dispatch }, { courseId, courseData }) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        await axios.put(`/api/courses/${courseId}`, courseData);\r\n        // Fetch the updated course\r\n        const response = await axios.get(`/api/courses/${courseId}`);\r\n        \r\n        commit('UPDATE_COURSE', response.data);\r\n        dispatch('showToast', {\r\n          message: 'Course updated successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to update course';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async deleteCourse({ commit, dispatch }, courseId) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        await axios.delete(`/api/courses/${courseId}`);\r\n        \r\n        commit('DELETE_COURSE', courseId);\r\n        dispatch('showToast', {\r\n          message: 'Course deleted successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return true;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to delete course';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    }\r\n  }\r\n};\r\n",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\auth.js",["177"],"import axios from 'axios'\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    token: localStorage.getItem('token') || null,\r\n    user: JSON.parse(localStorage.getItem('user')) || null\r\n  },\r\n  getters: {\r\n    isAuthenticated: state => !!state.token,\r\n    getUser: state => state.user,\r\n    userRole: state => state.user ? state.user.role : null,\r\n    userId: state => state.user ? state.user.id : null\r\n  },\r\n  mutations: {\r\n    SET_TOKEN(state, token) {\r\n      state.token = token;\r\n    },\r\n    SET_USER(state, user) {\r\n      state.user = user;\r\n    },\r\n    CLEAR_AUTH(state) {\r\n      state.token = null;\r\n      state.user = null;\r\n    }\r\n  },\r\n  actions: {\r\n    async login({ commit, dispatch }, credentials) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        // Use real auth endpoint\r\n        const response = await axios.post('/api/auth/login', credentials);\r\n        const { token, user } = response.data;\r\n        \r\n        // Save to localStorage\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        \r\n        // Update state\r\n        commit('SET_TOKEN', token);\r\n        commit('SET_USER', user);\r\n        \r\n        return user;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Login failed';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async studentLogin({ commit, dispatch }, credentials) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        // Use real auth endpoint\r\n        const response = await axios.post('/api/auth/login', {\r\n          matricNumber: credentials.matricNumber,\r\n          pin: credentials.pin\r\n        });\r\n        const { token, user } = response.data;\r\n        \r\n        // Save to localStorage\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        \r\n        // Update state\r\n        commit('SET_TOKEN', token);\r\n        commit('SET_USER', user);\r\n        \r\n        return user;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Login failed';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async register({ commit, dispatch }, userData) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        const response = await axios.post('/api/auth/register', userData);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Registration failed';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    logout({ commit }) {\r\n      // Clear localStorage\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      \r\n      // Update state\r\n      commit('CLEAR_AUTH');\r\n    },\r\n    \r\n    checkAuth({ commit }) {\r\n      const token = localStorage.getItem('token');\r\n      const user = JSON.parse(localStorage.getItem('user'));\r\n      \r\n      if (token && user) {\r\n        commit('SET_TOKEN', token);\r\n        commit('SET_USER', user);\r\n      }\r\n    }\r\n  }\r\n};\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\assessments.js",["178"],"import axios from 'axios'\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    assessments: [],\r\n    assessment: null\r\n  },\r\n  getters: {\r\n    getAllAssessments: state => state.assessments,\r\n    getAssessment: state => state.assessment,\r\n    getCourseAssessments: state => courseId => {\r\n      return state.assessments.filter(a => a.course_id === parseInt(courseId));\r\n    }\r\n  },\r\n  mutations: {\r\n    SET_ASSESSMENTS(state, assessments) {\r\n      state.assessments = assessments;\r\n    },\r\n    SET_ASSESSMENT(state, assessment) {\r\n      state.assessment = assessment;\r\n    },\r\n    ADD_ASSESSMENT(state, assessment) {\r\n      state.assessments.push(assessment);\r\n    },\r\n    UPDATE_ASSESSMENT(state, updatedAssessment) {\r\n      const index = state.assessments.findIndex(a => a.id === updatedAssessment.id);\r\n      if (index !== -1) {\r\n        state.assessments.splice(index, 1, updatedAssessment);\r\n      }\r\n      if (state.assessment && state.assessment.id === updatedAssessment.id) {\r\n        state.assessment = updatedAssessment;\r\n      }\r\n    },\r\n    DELETE_ASSESSMENT(state, assessmentId) {\r\n      state.assessments = state.assessments.filter(a => a.id !== assessmentId);\r\n      if (state.assessment && state.assessment.id === assessmentId) {\r\n        state.assessment = null;\r\n      }\r\n    }\r\n  },\r\n  actions: {\r\n    async fetchAssessments({ commit, dispatch }, filter = {}) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        let url = '/api/assessments';\r\n        const params = {};\r\n        \r\n        if (filter.courseId) {\r\n          params.course_id = filter.courseId;\r\n        }\r\n        \r\n        const response = await axios.get(url, { params });\r\n        commit('SET_ASSESSMENTS', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch assessments';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async fetchAssessment({ commit, dispatch }, assessmentId) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.get(`/api/assessments/${assessmentId}`);\r\n        commit('SET_ASSESSMENT', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch assessment';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async createAssessment({ commit, dispatch }, assessmentData) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.post('/api/assessments', assessmentData);\r\n        // Fetch the newly created assessment\r\n        const newAssessmentId = response.data.assessmentId;\r\n        const newAssessmentResponse = await axios.get(`/api/assessments/${newAssessmentId}`);\r\n        \r\n        commit('ADD_ASSESSMENT', newAssessmentResponse.data);\r\n        dispatch('showToast', {\r\n          message: 'Assessment created successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return newAssessmentResponse.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to create assessment';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async updateAssessment({ commit, dispatch }, { assessmentId, assessmentData }) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        await axios.put(`/api/assessments/${assessmentId}`, assessmentData);\r\n        // Fetch the updated assessment\r\n        const response = await axios.get(`/api/assessments/${assessmentId}`);\r\n        \r\n        commit('UPDATE_ASSESSMENT', response.data);\r\n        dispatch('showToast', {\r\n          message: 'Assessment updated successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to update assessment';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async deleteAssessment({ commit, dispatch }, assessmentId) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        await axios.delete(`/api/assessments/${assessmentId}`);\r\n        \r\n        commit('DELETE_ASSESSMENT', assessmentId);\r\n        dispatch('showToast', {\r\n          message: 'Assessment deleted successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return true;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to delete assessment';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    }\r\n  }\r\n};\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\marks.js",["179"],"import axios from 'axios'\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    marks: [],\r\n    mark: null,\r\n    studentSummary: null,\r\n    courseStatistics: null\r\n  },\r\n  getters: {\r\n    getAllMarks: state => state.marks,\r\n    getMark: state => state.mark,\r\n    getStudentSummary: state => state.studentSummary,\r\n    getCourseStatistics: state => state.courseStatistics,\r\n    \r\n    getStudentCourseMarks: state => (studentId, courseId) => {\r\n      return state.marks.filter(\r\n        m => m.student_id === parseInt(studentId) && m.course_id === parseInt(courseId)\r\n      );\r\n    },\r\n    \r\n    getAssessmentMarks: state => assessmentId => {\r\n      return state.marks.filter(m => m.assessment_id === parseInt(assessmentId));\r\n    }\r\n  },\r\n  mutations: {\r\n    SET_MARKS(state, marks) {\r\n      state.marks = marks;\r\n    },\r\n    SET_MARK(state, mark) {\r\n      state.mark = mark;\r\n    },\r\n    ADD_MARK(state, mark) {\r\n      state.marks.push(mark);\r\n    },\r\n    UPDATE_MARK(state, updatedMark) {\r\n      const index = state.marks.findIndex(m => m.id === updatedMark.id);\r\n      if (index !== -1) {\r\n        state.marks.splice(index, 1, updatedMark);\r\n      }\r\n      if (state.mark && state.mark.id === updatedMark.id) {\r\n        state.mark = updatedMark;\r\n      }\r\n    },\r\n    DELETE_MARK(state, markId) {\r\n      state.marks = state.marks.filter(m => m.id !== markId);\r\n      if (state.mark && state.mark.id === markId) {\r\n        state.mark = null;\r\n      }\r\n    },\r\n    SET_STUDENT_SUMMARY(state, summary) {\r\n      state.studentSummary = summary;\r\n    },\r\n    SET_COURSE_STATISTICS(state, statistics) {\r\n      state.courseStatistics = statistics;\r\n    }\r\n  },\r\n  actions: {\r\n    async fetchMarks({ commit, dispatch }, filter = {}) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const params = {};\r\n        if (filter.studentId) params.student_id = filter.studentId;\r\n        if (filter.assessmentId) params.assessment_id = filter.assessmentId;\r\n        if (filter.courseId) params.course_id = filter.courseId;\r\n        \r\n        const response = await axios.get('/api/marks', { params });\r\n        commit('SET_MARKS', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch marks';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async fetchMark({ commit, dispatch }, markId) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.get(`/api/marks/${markId}`);\r\n        commit('SET_MARK', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch mark';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async createMark({ commit, dispatch }, markData) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.post('/api/marks', markData);\r\n        // Fetch the newly created mark\r\n        const newMarkId = response.data.markId;\r\n        const newMarkResponse = await axios.get(`/api/marks/${newMarkId}`);\r\n        \r\n        commit('ADD_MARK', newMarkResponse.data);\r\n        dispatch('showToast', {\r\n          message: 'Mark added successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return newMarkResponse.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to add mark';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async updateMark({ commit, dispatch }, { markId, markData }) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        await axios.put(`/api/marks/${markId}`, markData);\r\n        // Fetch the updated mark\r\n        const response = await axios.get(`/api/marks/${markId}`);\r\n        \r\n        commit('UPDATE_MARK', response.data);\r\n        dispatch('showToast', {\r\n          message: 'Mark updated successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to update mark';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async deleteMark({ commit, dispatch }, markId) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        await axios.delete(`/api/marks/${markId}`);\r\n        \r\n        commit('DELETE_MARK', markId);\r\n        dispatch('showToast', {\r\n          message: 'Mark deleted successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return true;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to delete mark';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async fetchStudentCourseSummary({ commit, dispatch }, { studentId, courseId }) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.get(`/api/marks/summary/student/${studentId}/course/${courseId}`);\r\n        commit('SET_STUDENT_SUMMARY', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch student summary';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async fetchCourseStatistics({ commit, dispatch }, courseId) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.get(`/api/marks/statistics/course/${courseId}`);\r\n        commit('SET_COURSE_STATISTICS', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch course statistics';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    }\r\n  }\r\n};\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\users.js",["180"],"import axios from 'axios'\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    users: [],\r\n    user: null,\r\n    students: [],\r\n    lecturers: [],\r\n    advisors: [],\r\n    advisees: []\r\n  },\r\n  getters: {\r\n    getAllUsers: state => state.users,\r\n    getUser: state => state.user,\r\n    getAllStudents: state => state.students,\r\n    getAllLecturers: state => state.lecturers,\r\n    getAllAdvisors: state => state.advisors,\r\n    getAllAdvisees: state => state.advisees\r\n  },\r\n  mutations: {\r\n    SET_USERS(state, users) {\r\n      state.users = users;\r\n    },\r\n    SET_USER(state, user) {\r\n      state.user = user;\r\n    },\r\n    SET_STUDENTS(state, students) {\r\n      state.students = students;\r\n    },\r\n    SET_LECTURERS(state, lecturers) {\r\n      state.lecturers = lecturers;\r\n    },\r\n    SET_ADVISORS(state, advisors) {\r\n      state.advisors = advisors;\r\n    },\r\n    SET_ADVISEES(state, advisees) {\r\n      state.advisees = advisees;\r\n    },\r\n    ADD_USER(state, user) {\r\n      state.users.push(user);\r\n      // Also add to specific role arrays\r\n      if (user.role === 'student') state.students.push(user);\r\n      if (user.role === 'lecturer') state.lecturers.push(user);\r\n      if (user.role === 'advisor') state.advisors.push(user);\r\n    },\r\n    UPDATE_USER(state, updatedUser) {\r\n      // Update in users array\r\n      const index = state.users.findIndex(u => u.id === updatedUser.id);\r\n      if (index !== -1) {\r\n        state.users.splice(index, 1, updatedUser);\r\n      }\r\n      \r\n      // Update in specific role arrays\r\n      if (updatedUser.role === 'student') {\r\n        const studentIndex = state.students.findIndex(s => s.id === updatedUser.id);\r\n        if (studentIndex !== -1) {\r\n          state.students.splice(studentIndex, 1, updatedUser);\r\n        } else {\r\n          state.students.push(updatedUser);\r\n        }\r\n      }\r\n      \r\n      if (updatedUser.role === 'lecturer') {\r\n        const lecturerIndex = state.lecturers.findIndex(l => l.id === updatedUser.id);\r\n        if (lecturerIndex !== -1) {\r\n          state.lecturers.splice(lecturerIndex, 1, updatedUser);\r\n        } else {\r\n          state.lecturers.push(updatedUser);\r\n        }\r\n      }\r\n      \r\n      if (updatedUser.role === 'advisor') {\r\n        const advisorIndex = state.advisors.findIndex(a => a.id === updatedUser.id);\r\n        if (advisorIndex !== -1) {\r\n          state.advisors.splice(advisorIndex, 1, updatedUser);\r\n        } else {\r\n          state.advisors.push(updatedUser);\r\n        }\r\n      }\r\n      \r\n      // If current user is being viewed\r\n      if (state.user && state.user.id === updatedUser.id) {\r\n        state.user = updatedUser;\r\n      }\r\n    },\r\n    DELETE_USER(state, userId) {\r\n      state.users = state.users.filter(u => u.id !== userId);\r\n      state.students = state.students.filter(u => u.id !== userId);\r\n      state.lecturers = state.lecturers.filter(u => u.id !== userId);\r\n      state.advisors = state.advisors.filter(u => u.id !== userId);\r\n      state.advisees = state.advisees.filter(u => u.id !== userId);\r\n      \r\n      if (state.user && state.user.id === userId) {\r\n        state.user = null;\r\n      }\r\n    }\r\n  },\r\n  actions: {\r\n    async fetchUsers({ commit, dispatch }) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.get('/api/users');\r\n        commit('SET_USERS', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch users';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async fetchUsersByRole({ commit, dispatch }, role) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.get('/api/users', { params: { role } });\r\n        \r\n        if (role === 'student') {\r\n          commit('SET_STUDENTS', response.data);\r\n        } else if (role === 'lecturer') {\r\n          commit('SET_LECTURERS', response.data);\r\n        } else if (role === 'advisor') {\r\n          commit('SET_ADVISORS', response.data);\r\n        }\r\n        \r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || `Failed to fetch ${role}s`;\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async fetchUser({ commit, dispatch }, userId) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        const response = await axios.get(`/api/users/${userId}`);\r\n        commit('SET_USER', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch user';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async createUser({ commit, dispatch }, userData) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        // Use the register endpoint to create a user\r\n        const response = await axios.post('/api/auth/register', userData);\r\n        const newUserId = response.data.userId;\r\n        \r\n        // Fetch the new user's details\r\n        const userResponse = await axios.get(`/api/users/${newUserId}`);\r\n        \r\n        commit('ADD_USER', userResponse.data);\r\n        dispatch('showToast', {\r\n          message: 'User created successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return userResponse.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to create user';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async updateUser({ commit, dispatch }, { userId, userData }) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        await axios.put(`/api/users/${userId}`, userData);\r\n        \r\n        // Fetch updated user data\r\n        const response = await axios.get(`/api/users/${userId}`);\r\n        \r\n        commit('UPDATE_USER', response.data);\r\n        dispatch('showToast', {\r\n          message: 'User updated successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to update user';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    async deleteUser({ commit, dispatch }, userId) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        await axios.delete(`/api/users/${userId}`);\r\n        \r\n        commit('DELETE_USER', userId);\r\n        dispatch('showToast', {\r\n          message: 'User deleted successfully',\r\n          type: 'success'\r\n        }, { root: true });\r\n        \r\n        return true;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to delete user';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    },\r\n    \r\n    // Fetch students assigned to an advisor\r\n    async fetchAdviseesByAdvisor({ commit, dispatch }, advisorId) {\r\n      try {\r\n        dispatch('setLoading', true, { root: true });\r\n        \r\n        // This is a placeholder - you would need to add this endpoint to your backend\r\n        const response = await axios.get(`/api/advisors/${advisorId}/advisees`);\r\n        \r\n        commit('SET_ADVISEES', response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.error || 'Failed to fetch advisees';\r\n        dispatch('setError', errorMsg, { root: true });\r\n        throw new Error(errorMsg);\r\n      } finally {\r\n        dispatch('setLoading', false, { root: true });\r\n      }\r\n    }\r\n  }\r\n};\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\components\\layout\\Navbar.vue",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\components\\charts\\AssessmentChart.vue",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\components\\charts\\MarkDistributionChart.vue",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\CSVImport.vue",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\student\\RemarkRequest.vue",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\advisor\\AtRiskStudents.vue",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\admin\\Dashboard.vue",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\admin\\UserManagement.vue",["181","182","183","184"],"<template>\r\n  <div class=\"user-management\">\r\n    <h1>User Management</h1>\r\n    <div class=\"card mb-4\">\r\n      <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n        <h5 class=\"mb-0\">Users</h5>\r\n        <button class=\"btn btn-primary\" @click=\"showAddUserModal = true\">\r\n          <i class=\"bi bi-plus\"></i> Add User\r\n        </button>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"mb-3\">\r\n          <div class=\"input-group\">\r\n            <span class=\"input-group-text\">\r\n              <i class=\"bi bi-search\"></i>\r\n            </span>\r\n            <input \r\n              type=\"text\" \r\n              class=\"form-control\" \r\n              v-model=\"searchQuery\" \r\n              placeholder=\"Search users...\" \r\n            />\r\n            <select class=\"form-select\" v-model=\"roleFilter\" style=\"max-width: 150px;\">\r\n              <option value=\"\">All Roles</option>\r\n              <option value=\"admin\">Admin</option>\r\n              <option value=\"lecturer\">Lecturer</option>\r\n              <option value=\"student\">Student</option>\r\n              <option value=\"advisor\">Advisor</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"table-responsive\">\r\n          <table class=\"table table-striped\">\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Email</th>\r\n                <th>Role</th>\r\n                <th>Matric Number</th>\r\n                <th>Created</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"user in filteredUsers\" :key=\"user.id\">\r\n                <td>{{ user.name }}</td>\r\n                <td>{{ user.email }}</td>\r\n                <td>\r\n                  <span class=\"badge\" :class=\"getRoleBadgeClass(user.role)\">\r\n                    {{ user.role }}\r\n                  </span>\r\n                </td>\r\n                <td>{{ user.matric_number || '-' }}</td>\r\n                <td>{{ formatDate(user.created_at) }}</td>\r\n                <td>\r\n                  <div class=\"btn-group\">\r\n                    <button \r\n                      class=\"btn btn-sm btn-outline-secondary\"\r\n                      @click=\"editUser(user)\"\r\n                    >\r\n                      <i class=\"bi bi-pencil\"></i>\r\n                    </button>\r\n                    <button \r\n                      class=\"btn btn-sm btn-outline-danger\"\r\n                      @click=\"confirmDeleteUser(user)\"\r\n                    >\r\n                      <i class=\"bi bi-trash\"></i>\r\n                    </button>\r\n                    <button \r\n                      class=\"btn btn-sm btn-outline-primary\"\r\n                      @click=\"resetPassword(user)\"\r\n                    >\r\n                      <i class=\"bi bi-key\"></i>\r\n                    </button>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <!-- Pagination controls -->\r\n        <nav aria-label=\"User pagination\">\r\n          <ul class=\"pagination justify-content-center\">\r\n            <li class=\"page-item\" :class=\"{ disabled: currentPage === 1 }\">\r\n              <a class=\"page-link\" href=\"#\" @click.prevent=\"changePage(currentPage - 1)\">Previous</a>\r\n            </li>\r\n            <li v-for=\"page in totalPages\" :key=\"page\" class=\"page-item\" :class=\"{ active: page === currentPage }\">\r\n              <a class=\"page-link\" href=\"#\" @click.prevent=\"changePage(page)\">{{ page }}</a>\r\n            </li>\r\n            <li class=\"page-item\" :class=\"{ disabled: currentPage === totalPages }\">\r\n              <a class=\"page-link\" href=\"#\" @click.prevent=\"changePage(currentPage + 1)\">Next</a>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Add User Modal -->\r\n    <div class=\"modal\" tabindex=\"-1\" :class=\"{ 'd-block': showAddUserModal }\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Add New User</h5>\r\n            <button type=\"button\" class=\"btn-close\" @click=\"showAddUserModal = false\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <form @submit.prevent=\"addUser\">\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Name</label>\r\n                <input type=\"text\" class=\"form-control\" v-model=\"newUser.name\" required>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Email</label>\r\n                <input type=\"email\" class=\"form-control\" v-model=\"newUser.email\" required>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Role</label>\r\n                <select class=\"form-select\" v-model=\"newUser.role\" required>\r\n                  <option value=\"admin\">Admin</option>\r\n                  <option value=\"lecturer\">Lecturer</option>\r\n                  <option value=\"student\">Student</option>\r\n                  <option value=\"advisor\">Advisor</option>\r\n                </select>\r\n              </div>\r\n              <div class=\"mb-3\" v-if=\"newUser.role === 'student'\">\r\n                <label class=\"form-label\">Matric Number</label>\r\n                <input type=\"text\" class=\"form-control\" v-model=\"newUser.matricNumber\">\r\n              </div>\r\n              <div class=\"mb-3\" v-if=\"newUser.role === 'student'\">\r\n                <label class=\"form-label\">PIN (for student login)</label>\r\n                <input type=\"password\" class=\"form-control\" v-model=\"newUser.pin\">\r\n              </div>\r\n              <div class=\"mb-3\" v-if=\"newUser.role === 'student'\">\r\n                <label class=\"form-label\">Advisor</label>\r\n                <select class=\"form-select\" v-model=\"newUser.advisorId\">\r\n                  <option value=\"\">Select Advisor</option>\r\n                  <option \r\n                    v-for=\"advisor in advisors\" \r\n                    :key=\"advisor.id\" \r\n                    :value=\"advisor.id\"\r\n                  >\r\n                    {{ advisor.name }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Password</label>\r\n                <input type=\"password\" class=\"form-control\" v-model=\"newUser.password\" required>\r\n              </div>\r\n              <div class=\"d-flex justify-content-end\">\r\n                <button type=\"button\" class=\"btn btn-secondary me-2\" @click=\"showAddUserModal = false\">Cancel</button>\r\n                <button type=\"submit\" class=\"btn btn-primary\">Add User</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"modal-backdrop fade show\" v-if=\"showAddUserModal\"></div>\r\n\r\n    <!-- Edit User Modal -->\r\n    <div class=\"modal\" tabindex=\"-1\" :class=\"{ 'd-block': showEditUserModal }\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Edit User</h5>\r\n            <button type=\"button\" class=\"btn-close\" @click=\"showEditUserModal = false\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <form @submit.prevent=\"updateUser\">\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Name</label>\r\n                <input type=\"text\" class=\"form-control\" v-model=\"editingUser.name\" required>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Email</label>\r\n                <input type=\"email\" class=\"form-control\" v-model=\"editingUser.email\" required>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Role</label>\r\n                <select class=\"form-select\" v-model=\"editingUser.role\" required>\r\n                  <option value=\"admin\">Admin</option>\r\n                  <option value=\"lecturer\">Lecturer</option>\r\n                  <option value=\"student\">Student</option>\r\n                  <option value=\"advisor\">Advisor</option>\r\n                </select>\r\n              </div>\r\n              <div class=\"mb-3\" v-if=\"editingUser.role === 'student'\">\r\n                <label class=\"form-label\">Matric Number</label>\r\n                <input type=\"text\" class=\"form-control\" v-model=\"editingUser.matric_number\">\r\n              </div>\r\n              <div class=\"mb-3\" v-if=\"editingUser.role === 'student'\">\r\n                <label class=\"form-label\">Advisor</label>\r\n                <select class=\"form-select\" v-model=\"editingUser.advisor_id\">\r\n                  <option value=\"\">Select Advisor</option>\r\n                  <option \r\n                    v-for=\"advisor in advisors\" \r\n                    :key=\"advisor.id\" \r\n                    :value=\"advisor.id\"\r\n                  >\r\n                    {{ advisor.name }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">New Password (leave blank to keep current)</label>\r\n                <input type=\"password\" class=\"form-control\" v-model=\"editingUser.password\">\r\n              </div>\r\n              <div class=\"d-flex justify-content-end\">\r\n                <button type=\"button\" class=\"btn btn-secondary me-2\" @click=\"showEditUserModal = false\">Cancel</button>\r\n                <button type=\"submit\" class=\"btn btn-primary\">Update User</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"modal-backdrop fade show\" v-if=\"showEditUserModal\"></div>\r\n\r\n    <!-- Delete Confirmation Modal -->\r\n    <div class=\"modal\" tabindex=\"-1\" :class=\"{ 'd-block': showDeleteModal }\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Confirm Delete</h5>\r\n            <button type=\"button\" class=\"btn-close\" @click=\"showDeleteModal = false\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <p>Are you sure you want to delete user <strong>{{ userToDelete?.name }}</strong>?</p>\r\n            <p class=\"text-danger\">This action cannot be undone and will remove all associated data.</p>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"showDeleteModal = false\">Cancel</button>\r\n            <button type=\"button\" class=\"btn btn-danger\" @click=\"deleteUser\">Delete User</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"modal-backdrop fade show\" v-if=\"showDeleteModal\"></div>\r\n\r\n    <!-- Reset Password Modal -->\r\n    <div class=\"modal\" tabindex=\"-1\" :class=\"{ 'd-block': showResetPasswordModal }\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Reset Password</h5>\r\n            <button type=\"button\" class=\"btn-close\" @click=\"showResetPasswordModal = false\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <p>Set a new password for <strong>{{ userToResetPassword?.name }}</strong>:</p>\r\n            <div class=\"mb-3\">\r\n              <label class=\"form-label\">New Password</label>\r\n              <input type=\"password\" class=\"form-control\" v-model=\"newPassword\" required>\r\n            </div>\r\n            <div class=\"mb-3\" v-if=\"userToResetPassword?.role === 'student'\">\r\n              <label class=\"form-label\">New PIN (for student login)</label>\r\n              <input type=\"password\" class=\"form-control\" v-model=\"newPin\">\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"showResetPasswordModal = false\">Cancel</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"confirmResetPassword\">Reset Password</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"modal-backdrop fade show\" v-if=\"showResetPasswordModal\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'UserManagement',\r\n  data() {\r\n    return {\r\n      users: [],\r\n      advisors: [],\r\n      searchQuery: '',\r\n      roleFilter: '',\r\n      currentPage: 1,\r\n      itemsPerPage: 10,\r\n      showAddUserModal: false,\r\n      showEditUserModal: false,\r\n      showDeleteModal: false,\r\n      showResetPasswordModal: false,\r\n      newUser: {\r\n        name: '',\r\n        email: '',\r\n        role: 'student',\r\n        matricNumber: '',\r\n        pin: '',\r\n        advisorId: null,\r\n        password: ''\r\n      },\r\n      editingUser: {\r\n        id: null,\r\n        name: '',\r\n        email: '',\r\n        role: '',\r\n        matric_number: '',\r\n        advisor_id: null,\r\n        password: ''\r\n      },\r\n      userToDelete: null,\r\n      userToResetPassword: null,\r\n      newPassword: '',\r\n      newPin: ''\r\n    };\r\n  },\r\n  computed: {\r\n    filteredUsers() {\r\n      let filtered = this.users;\r\n      \r\n      // Apply search query filter\r\n      if (this.searchQuery) {\r\n        const query = this.searchQuery.toLowerCase();\r\n        filtered = filtered.filter(user => \r\n          user.name.toLowerCase().includes(query) || \r\n          user.email.toLowerCase().includes(query) ||\r\n          (user.matric_number && user.matric_number.toLowerCase().includes(query))\r\n        );\r\n      }\r\n      \r\n      // Apply role filter\r\n      if (this.roleFilter) {\r\n        filtered = filtered.filter(user => user.role === this.roleFilter);\r\n      }\r\n      \r\n      // Calculate pagination\r\n      const start = (this.currentPage - 1) * this.itemsPerPage;\r\n      const end = start + this.itemsPerPage;\r\n      \r\n      return filtered.slice(start, end);\r\n    },\r\n    totalPages() {\r\n      let filtered = this.users;\r\n      \r\n      if (this.searchQuery) {\r\n        const query = this.searchQuery.toLowerCase();\r\n        filtered = filtered.filter(user => \r\n          user.name.toLowerCase().includes(query) || \r\n          user.email.toLowerCase().includes(query) ||\r\n          (user.matric_number && user.matric_number.toLowerCase().includes(query))\r\n        );\r\n      }\r\n      \r\n      if (this.roleFilter) {\r\n        filtered = filtered.filter(user => user.role === this.roleFilter);\r\n      }\r\n      \r\n      return Math.ceil(filtered.length / this.itemsPerPage);\r\n    }\r\n  },\r\n  methods: {\r\n    formatDate(dateString) {\r\n      const date = new Date(dateString);\r\n      return new Intl.DateTimeFormat('en-GB', {\r\n        day: '2-digit',\r\n        month: 'short',\r\n        year: 'numeric'\r\n      }).format(date);\r\n    },\r\n    getRoleBadgeClass(role) {\r\n      switch (role) {\r\n        case 'admin':\r\n          return 'bg-danger';\r\n        case 'lecturer':\r\n          return 'bg-primary';\r\n        case 'student':\r\n          return 'bg-success';\r\n        case 'advisor':\r\n          return 'bg-warning';\r\n        default:\r\n          return 'bg-secondary';\r\n      }\r\n    },\r\n    changePage(page) {\r\n      if (page >= 1 && page <= this.totalPages) {\r\n        this.currentPage = page;\r\n      }\r\n    },\r\n    fetchUsers() {\r\n      const token = this.$store.getters['auth/token'];\r\n      \r\n      axios.get(`${process.env.VUE_APP_API_URL}/api/admin/users`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      })\r\n      .then(response => {\r\n        this.users = response.data;\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching users:', error);\r\n        this.$toast.error('Failed to load users');\r\n      });\r\n    },\r\n    fetchAdvisors() {\r\n      const token = this.$store.getters['auth/token'];\r\n      \r\n      axios.get(`${process.env.VUE_APP_API_URL}/api/users?role=advisor`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      })\r\n      .then(response => {\r\n        this.advisors = response.data;\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching advisors:', error);\r\n      });\r\n    },\r\n    addUser() {\r\n      const token = this.$store.getters['auth/token'];\r\n      \r\n      axios.post(`${process.env.VUE_APP_API_URL}/api/admin/users`, this.newUser, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      })\r\n      .then(response => {\r\n        this.$toast.success('User added successfully');\r\n        this.showAddUserModal = false;\r\n        this.fetchUsers();\r\n        \r\n        // Reset form\r\n        this.newUser = {\r\n          name: '',\r\n          email: '',\r\n          role: 'student',\r\n          matricNumber: '',\r\n          pin: '',\r\n          advisorId: null,\r\n          password: ''\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error adding user:', error);\r\n        this.$toast.error(error.response?.data?.error || 'Failed to add user');\r\n      });\r\n    },\r\n    editUser(user) {\r\n      this.editingUser = { ...user };\r\n      this.showEditUserModal = true;\r\n    },\r\n    updateUser() {\r\n      const token = this.$store.getters['auth/token'];\r\n      const userId = this.editingUser.id;\r\n      \r\n      // Only send fields that should be updated\r\n      const updateData = {\r\n        name: this.editingUser.name,\r\n        email: this.editingUser.email,\r\n        role: this.editingUser.role\r\n      };\r\n      \r\n      if (this.editingUser.role === 'student') {\r\n        updateData.matricNumber = this.editingUser.matric_number;\r\n        updateData.advisorId = this.editingUser.advisor_id;\r\n      }\r\n      \r\n      if (this.editingUser.password) {\r\n        updateData.password = this.editingUser.password;\r\n      }\r\n      \r\n      axios.put(`${process.env.VUE_APP_API_URL}/api/admin/users/${userId}`, updateData, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      })\r\n      .then(response => {\r\n        this.$toast.success('User updated successfully');\r\n        this.showEditUserModal = false;\r\n        this.fetchUsers();\r\n      })\r\n      .catch(error => {\r\n        console.error('Error updating user:', error);\r\n        this.$toast.error(error.response?.data?.error || 'Failed to update user');\r\n      });\r\n    },\r\n    confirmDeleteUser(user) {\r\n      this.userToDelete = user;\r\n      this.showDeleteModal = true;\r\n    },\r\n    deleteUser() {\r\n      const token = this.$store.getters['auth/token'];\r\n      const userId = this.userToDelete.id;\r\n      \r\n      axios.delete(`${process.env.VUE_APP_API_URL}/api/admin/users/${userId}`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      })\r\n      .then(response => {\r\n        this.$toast.success('User deleted successfully');\r\n        this.showDeleteModal = false;\r\n        this.fetchUsers();\r\n      })\r\n      .catch(error => {\r\n        console.error('Error deleting user:', error);\r\n        this.$toast.error(error.response?.data?.error || 'Failed to delete user');\r\n      });\r\n    },\r\n    resetPassword(user) {\r\n      this.userToResetPassword = user;\r\n      this.newPassword = '';\r\n      this.newPin = '';\r\n      this.showResetPasswordModal = true;\r\n    },\r\n    confirmResetPassword() {\r\n      const token = this.$store.getters['auth/token'];\r\n      const userId = this.userToResetPassword.id;\r\n      \r\n      const updateData = {\r\n        password: this.newPassword\r\n      };\r\n      \r\n      if (this.userToResetPassword.role === 'student' && this.newPin) {\r\n        updateData.pin = this.newPin;\r\n      }\r\n      \r\n      axios.put(`${process.env.VUE_APP_API_URL}/api/admin/users/${userId}`, updateData, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      })\r\n      .then(response => {\r\n        this.$toast.success('Password reset successfully');\r\n        this.showResetPasswordModal = false;\r\n      })\r\n      .catch(error => {\r\n        console.error('Error resetting password:', error);\r\n        this.$toast.error(error.response?.data?.error || 'Failed to reset password');\r\n      });\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchUsers();\r\n    this.fetchAdvisors();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.user-management {\r\n  padding: 20px;\r\n}\r\n\r\n.modal {\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.badge {\r\n  text-transform: capitalize;\r\n  font-size: 0.8rem;\r\n  padding: 5px 10px;\r\n}\r\n</style>\r\n","C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\admin\\SystemLogs.vue",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\notification.js",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\components\\notifications\\NotificationList.vue",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\components\\admin\\SystemHealthMonitor.vue",[],"C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\components\\notifications\\NotificationsDropdown.vue",[],{"ruleId":null,"fatal":true,"severity":2,"message":"185"},{"ruleId":null,"fatal":true,"severity":2,"message":"186"},{"ruleId":null,"fatal":true,"severity":2,"message":"187"},{"ruleId":null,"fatal":true,"severity":2,"message":"188"},{"ruleId":null,"fatal":true,"severity":2,"message":"189"},{"ruleId":null,"fatal":true,"severity":2,"message":"190"},{"ruleId":null,"fatal":true,"severity":2,"message":"191"},{"ruleId":null,"fatal":true,"severity":2,"message":"192"},{"ruleId":"193","severity":2,"message":"194","line":295,"column":7,"nodeType":"195","messageId":"196","endLine":295,"endColumn":25},{"ruleId":"197","severity":2,"message":"198","line":295,"column":7,"nodeType":"199","endLine":295,"endColumn":25},{"ruleId":"193","severity":2,"message":"200","line":296,"column":7,"nodeType":"195","messageId":"196","endLine":296,"endColumn":19},{"ruleId":"197","severity":2,"message":"201","line":296,"column":7,"nodeType":"199","endLine":296,"endColumn":19},{"ruleId":null,"fatal":true,"severity":2,"message":"202"},{"ruleId":null,"fatal":true,"severity":2,"message":"203"},{"ruleId":null,"fatal":true,"severity":2,"message":"204"},{"ruleId":null,"fatal":true,"severity":2,"message":"205"},{"ruleId":"206","severity":2,"message":"207","line":81,"column":22,"nodeType":"199","messageId":"208","endLine":81,"endColumn":28},{"ruleId":null,"fatal":true,"severity":2,"message":"209"},{"ruleId":null,"fatal":true,"severity":2,"message":"210"},{"ruleId":null,"fatal":true,"severity":2,"message":"211"},{"ruleId":"206","severity":2,"message":"212","line":419,"column":13,"nodeType":"199","messageId":"208","endLine":419,"endColumn":21},{"ruleId":"206","severity":2,"message":"212","line":467,"column":13,"nodeType":"199","messageId":"208","endLine":467,"endColumn":21},{"ruleId":"206","severity":2,"message":"212","line":488,"column":13,"nodeType":"199","messageId":"208","endLine":488,"endColumn":21},{"ruleId":"206","severity":2,"message":"212","line":519,"column":13,"nodeType":"199","messageId":"208","endLine":519,"endColumn":21},"Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\Register.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\advisor\\AdviseeDetail.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\NotFound.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\AssessmentForm.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\StudentDetail.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\advisor\\AdviseeList.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\advisor\\Dashboard.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\lecturer\\CourseDetail.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","no-dupe-keys","Duplicate key 'selectedAssessment'.","ObjectExpression","unexpected","vue/no-dupe-keys","Duplicated key 'selectedAssessment'.","Identifier","Duplicate key 'notification'.","Duplicated key 'notification'.","Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\student\\MarkSimulation.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\student\\CourseMarks.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\views\\student\\Dashboard.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\courses.js. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","no-unused-vars","'commit' is defined but never used.","unusedVar","Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\assessments.js. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\marks.js. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\Users\\ansmu\\Desktop\\Web\\course-mark-management\\frontend\\src\\store\\modules\\users.js. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","'response' is defined but never used."]